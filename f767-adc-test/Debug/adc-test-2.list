
adc-test-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047fc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a64  08004a64  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a6c  08004a6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000070  08004ae4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004ae4  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2e0  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eff  00000000  00000000  0002c37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f0  00000000  00000000  0002e280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  0002ec70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027009  00000000  00000000  0002f558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000095a3  00000000  00000000  00056561  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2137  00000000  00000000  0005fb04  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151c3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a40  00000000  00000000  00151cb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080049e4 	.word	0x080049e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080049e4 	.word	0x080049e4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 fe97 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f806 	bl	800060c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f003 fbec 	bl	8003ddc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x54>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x58>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 feb1 	bl	8001392 <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e00e      	b.n	8000658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d80a      	bhi.n	8000656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f000 fe79 	bl	800133e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_InitTick+0x5c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000008 	.word	0x20000008
 8000664:	20000004 	.word	0x20000004
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x20>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_IncTick+0x24>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000004 	.word	0x20000004
 8000690:	2000022c 	.word	0x2000022c

08000694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <HAL_GetTick+0x14>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	2000022c 	.word	0x2000022c

080006ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b4:	f7ff ffee 	bl	8000694 <HAL_GetTick>
 80006b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c4:	d005      	beq.n	80006d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_Delay+0x40>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006d2:	bf00      	nop
 80006d4:	f7ff ffde 	bl	8000694 <HAL_GetTick>
 80006d8:	4602      	mov	r2, r0
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d8f7      	bhi.n	80006d4 <HAL_Delay+0x28>
  {
  }
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d101      	bne.n	8000706 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e031      	b.n	800076a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	2b00      	cmp	r3, #0
 800070c:	d109      	bne.n	8000722 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f003 fb88 	bl	8003e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	2b00      	cmp	r3, #0
 800072c:	d116      	bne.n	800075c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_ADC_Init+0x84>)
 8000734:	4013      	ands	r3, r2
 8000736:	f043 0202 	orr.w	r2, r3, #2
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 fb9c 	bl	8000e7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f023 0303 	bic.w	r3, r3, #3
 8000752:	f043 0201 	orr.w	r2, r3, #1
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	641a      	str	r2, [r3, #64]	; 0x40
 800075a:	e001      	b.n	8000760 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000768:	7bfb      	ldrb	r3, [r7, #15]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	ffffeefd 	.word	0xffffeefd

08000778 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	2b02      	cmp	r3, #2
 8000794:	bf0c      	ite	eq
 8000796:	2301      	moveq	r3, #1
 8000798:	2300      	movne	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f003 0320 	and.w	r3, r3, #32
 80007a8:	2b20      	cmp	r3, #32
 80007aa:	bf0c      	ite	eq
 80007ac:	2301      	moveq	r3, #1
 80007ae:	2300      	movne	r3, #0
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d049      	beq.n	800084e <HAL_ADC_IRQHandler+0xd6>
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d046      	beq.n	800084e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 0310 	and.w	r3, r3, #16
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d105      	bne.n	80007d8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d12b      	bne.n	800083e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d127      	bne.n	800083e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d006      	beq.n	800080a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000806:	2b00      	cmp	r3, #0
 8000808:	d119      	bne.n	800083e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f022 0220 	bic.w	r2, r2, #32
 8000818:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800082e:	2b00      	cmp	r3, #0
 8000830:	d105      	bne.n	800083e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f043 0201 	orr.w	r2, r3, #1
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f003 f878 	bl	8003934 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f06f 0212 	mvn.w	r2, #18
 800084c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	2b04      	cmp	r3, #4
 800085a:	bf0c      	ite	eq
 800085c:	2301      	moveq	r3, #1
 800085e:	2300      	movne	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	2b80      	cmp	r3, #128	; 0x80
 8000870:	bf0c      	ite	eq
 8000872:	2301      	moveq	r3, #1
 8000874:	2300      	movne	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d057      	beq.n	8000930 <HAL_ADC_IRQHandler+0x1b8>
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d054      	beq.n	8000930 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	2b00      	cmp	r3, #0
 8000890:	d105      	bne.n	800089e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d139      	bne.n	8000920 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d006      	beq.n	80008c8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d12b      	bne.n	8000920 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d124      	bne.n	8000920 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d11d      	bne.n	8000920 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d119      	bne.n	8000920 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000910:	2b00      	cmp	r3, #0
 8000912:	d105      	bne.n	8000920 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f043 0201 	orr.w	r2, r3, #1
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f000 fc27 	bl	8001174 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f06f 020c 	mvn.w	r2, #12
 800092e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	2b01      	cmp	r3, #1
 800093c:	bf0c      	ite	eq
 800093e:	2301      	moveq	r3, #1
 8000940:	2300      	movne	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000950:	2b40      	cmp	r3, #64	; 0x40
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d017      	beq.n	8000992 <HAL_ADC_IRQHandler+0x21a>
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d014      	beq.n	8000992 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	2b01      	cmp	r3, #1
 8000974:	d10d      	bne.n	8000992 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 f932 	bl	8000bec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f06f 0201 	mvn.w	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	2b20      	cmp	r3, #32
 800099e:	bf0c      	ite	eq
 80009a0:	2301      	moveq	r3, #1
 80009a2:	2300      	movne	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80009b6:	bf0c      	ite	eq
 80009b8:	2301      	moveq	r3, #1
 80009ba:	2300      	movne	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d015      	beq.n	80009f2 <HAL_ADC_IRQHandler+0x27a>
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d012      	beq.n	80009f2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d0:	f043 0202 	orr.w	r2, r3, #2
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f06f 0220 	mvn.w	r2, #32
 80009e0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f90c 	bl	8000c00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f06f 0220 	mvn.w	r2, #32
 80009f0:	601a      	str	r2, [r3, #0]
  }
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d101      	bne.n	8000a1a <HAL_ADC_Start_DMA+0x1e>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e0c7      	b.n	8000baa <HAL_ADC_Start_DMA+0x1ae>
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d018      	beq.n	8000a62 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f042 0201 	orr.w	r2, r2, #1
 8000a3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000a40:	4b5c      	ldr	r3, [pc, #368]	; (8000bb4 <HAL_ADC_Start_DMA+0x1b8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a5c      	ldr	r2, [pc, #368]	; (8000bb8 <HAL_ADC_Start_DMA+0x1bc>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	0c9a      	lsrs	r2, r3, #18
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000a54:	e002      	b.n	8000a5c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1f9      	bne.n	8000a56 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	f040 809b 	bne.w	8000ba8 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a76:	4b51      	ldr	r3, [pc, #324]	; (8000bbc <HAL_ADC_Start_DMA+0x1c0>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d007      	beq.n	8000aa0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aac:	d106      	bne.n	8000abc <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f023 0206 	bic.w	r2, r3, #6
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	645a      	str	r2, [r3, #68]	; 0x44
 8000aba:	e002      	b.n	8000ac2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ace:	4a3c      	ldr	r2, [pc, #240]	; (8000bc0 <HAL_ADC_Start_DMA+0x1c4>)
 8000ad0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad6:	4a3b      	ldr	r2, [pc, #236]	; (8000bc4 <HAL_ADC_Start_DMA+0x1c8>)
 8000ad8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ade:	4a3a      	ldr	r2, [pc, #232]	; (8000bc8 <HAL_ADC_Start_DMA+0x1cc>)
 8000ae0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000aea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000afa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	334c      	adds	r3, #76	; 0x4c
 8000b16:	4619      	mov	r1, r3
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f000 fcf4 	bl	8001508 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <HAL_ADC_Start_DMA+0x1d0>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 031f 	and.w	r3, r3, #31
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10f      	bne.n	8000b4c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d136      	bne.n	8000ba8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	e02d      	b.n	8000ba8 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <HAL_ADC_Start_DMA+0x1d4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d10e      	bne.n	8000b74 <HAL_ADC_Start_DMA+0x178>
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d107      	bne.n	8000b74 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000b72:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_ADC_Start_DMA+0x1d0>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d113      	bne.n	8000ba8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <HAL_ADC_Start_DMA+0x1d8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d10e      	bne.n	8000ba8 <HAL_ADC_Start_DMA+0x1ac>
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d107      	bne.n	8000ba8 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ba6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	fffff8fe 	.word	0xfffff8fe
 8000bc0:	08001071 	.word	0x08001071
 8000bc4:	0800112b 	.word	0x0800112b
 8000bc8:	08001147 	.word	0x08001147
 8000bcc:	40012300 	.word	0x40012300
 8000bd0:	40012000 	.word	0x40012000
 8000bd4:	40012200 	.word	0x40012200

08000bd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d101      	bne.n	8000c30 <HAL_ADC_ConfigChannel+0x1c>
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e115      	b.n	8000e5c <HAL_ADC_ConfigChannel+0x248>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2201      	movs	r2, #1
 8000c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b09      	cmp	r3, #9
 8000c3e:	d935      	bls.n	8000cac <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	68d9      	ldr	r1, [r3, #12]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	3b1e      	subs	r3, #30
 8000c56:	2207      	movs	r2, #7
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43da      	mvns	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	400a      	ands	r2, r1
 8000c64:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a7f      	ldr	r2, [pc, #508]	; (8000e68 <HAL_ADC_ConfigChannel+0x254>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d10a      	bne.n	8000c86 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68d9      	ldr	r1, [r3, #12]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	061a      	lsls	r2, r3, #24
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	e035      	b.n	8000cf2 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68d9      	ldr	r1, [r3, #12]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	4603      	mov	r3, r0
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4403      	add	r3, r0
 8000c9e:	3b1e      	subs	r3, #30
 8000ca0:	409a      	lsls	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	e022      	b.n	8000cf2 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6919      	ldr	r1, [r3, #16]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	400a      	ands	r2, r1
 8000cce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6919      	ldr	r1, [r3, #16]
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4403      	add	r3, r0
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d824      	bhi.n	8000d44 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	3b05      	subs	r3, #5
 8000d0c:	221f      	movs	r2, #31
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	400a      	ands	r2, r1
 8000d1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	3b05      	subs	r3, #5
 8000d36:	fa00 f203 	lsl.w	r2, r0, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
 8000d42:	e04c      	b.n	8000dde <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b0c      	cmp	r3, #12
 8000d4a:	d824      	bhi.n	8000d96 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3b23      	subs	r3, #35	; 0x23
 8000d5e:	221f      	movs	r2, #31
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43da      	mvns	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	3b23      	subs	r3, #35	; 0x23
 8000d88:	fa00 f203 	lsl.w	r2, r0, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	631a      	str	r2, [r3, #48]	; 0x30
 8000d94:	e023      	b.n	8000dde <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	3b41      	subs	r3, #65	; 0x41
 8000da8:	221f      	movs	r2, #31
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	400a      	ands	r2, r1
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	3b41      	subs	r3, #65	; 0x41
 8000dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a22      	ldr	r2, [pc, #136]	; (8000e6c <HAL_ADC_ConfigChannel+0x258>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d109      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x1e8>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b12      	cmp	r3, #18
 8000dee:	d105      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <HAL_ADC_ConfigChannel+0x25c>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <HAL_ADC_ConfigChannel+0x25c>)
 8000df6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dfa:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1a      	ldr	r2, [pc, #104]	; (8000e6c <HAL_ADC_ConfigChannel+0x258>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d125      	bne.n	8000e52 <HAL_ADC_ConfigChannel+0x23e>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_ADC_ConfigChannel+0x254>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d003      	beq.n	8000e18 <HAL_ADC_ConfigChannel+0x204>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b11      	cmp	r3, #17
 8000e16:	d11c      	bne.n	8000e52 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_ADC_ConfigChannel+0x25c>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <HAL_ADC_ConfigChannel+0x25c>)
 8000e1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e22:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_ADC_ConfigChannel+0x254>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d111      	bne.n	8000e52 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_ADC_ConfigChannel+0x260>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <HAL_ADC_ConfigChannel+0x264>)
 8000e34:	fba2 2303 	umull	r2, r3, r2, r3
 8000e38:	0c9a      	lsrs	r2, r3, #18
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e44:	e002      	b.n	8000e4c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f9      	bne.n	8000e46 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	10000012 	.word	0x10000012
 8000e6c:	40012000 	.word	0x40012000
 8000e70:	40012300 	.word	0x40012300
 8000e74:	20000008 	.word	0x20000008
 8000e78:	431bde83 	.word	0x431bde83

08000e7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000e84:	4b78      	ldr	r3, [pc, #480]	; (8001068 <ADC_Init+0x1ec>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4a77      	ldr	r2, [pc, #476]	; (8001068 <ADC_Init+0x1ec>)
 8000e8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e8e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000e90:	4b75      	ldr	r3, [pc, #468]	; (8001068 <ADC_Init+0x1ec>)
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4973      	ldr	r1, [pc, #460]	; (8001068 <ADC_Init+0x1ec>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6859      	ldr	r1, [r3, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	021a      	lsls	r2, r3, #8
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ed0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6859      	ldr	r1, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ef2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6899      	ldr	r1, [r3, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	4a58      	ldr	r2, [pc, #352]	; (800106c <ADC_Init+0x1f0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d022      	beq.n	8000f56 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6899      	ldr	r1, [r3, #8]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6899      	ldr	r1, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	e00f      	b.n	8000f76 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0202 	bic.w	r2, r2, #2
 8000f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6899      	ldr	r1, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	005a      	lsls	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d01b      	beq.n	8000fdc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6859      	ldr	r1, [r3, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	035a      	lsls	r2, r3, #13
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	e007      	b.n	8000fec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	3b01      	subs	r3, #1
 8001008:	051a      	lsls	r2, r3, #20
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6899      	ldr	r1, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800102e:	025a      	lsls	r2, r3, #9
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001046:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6899      	ldr	r1, [r3, #8]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	029a      	lsls	r2, r3, #10
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	609a      	str	r2, [r3, #8]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40012300 	.word	0x40012300
 800106c:	0f000001 	.word	0x0f000001

08001070 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001086:	2b00      	cmp	r3, #0
 8001088:	d13c      	bne.n	8001104 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d12b      	bne.n	80010fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d127      	bne.n	80010fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d119      	bne.n	80010fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0220 	bic.w	r2, r2, #32
 80010d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d105      	bne.n	80010fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f043 0201 	orr.w	r2, r3, #1
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f002 fc19 	bl	8003934 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001102:	e00e      	b.n	8001122 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f003 0310 	and.w	r3, r3, #16
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff fd75 	bl	8000c00 <HAL_ADC_ErrorCallback>
}
 8001116:	e004      	b.n	8001122 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4798      	blx	r3
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001136:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff fd4d 	bl	8000bd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001152:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2240      	movs	r2, #64	; 0x40
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f043 0204 	orr.w	r2, r3, #4
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f7ff fd4a 	bl	8000c00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	05fa0000 	.word	0x05fa0000

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db0b      	blt.n	8001216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	4907      	ldr	r1, [pc, #28]	; (8001224 <__NVIC_EnableIRQ+0x38>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	2001      	movs	r0, #1
 800120e:	fa00 f202 	lsl.w	r2, r0, r2
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f7ff ff8e 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff29 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff3e 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff8e 	bl	800127c <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5d 	bl	8001228 <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff31 	bl	80011ec <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa2 	bl	80012e4 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff f96c 	bl	8000694 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e099      	b.n	80014fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e8:	e00f      	b.n	800140a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ea:	f7ff f953 	bl	8000694 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d908      	bls.n	800140a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2220      	movs	r2, #32
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2203      	movs	r2, #3
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e078      	b.n	80014fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e8      	bne.n	80013ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_DMA_Init+0x158>)
 8001424:	4013      	ands	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001436:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001442:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4313      	orrs	r3, r2
 800145a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	2b04      	cmp	r3, #4
 8001462:	d107      	bne.n	8001474 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4313      	orrs	r3, r2
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4313      	orrs	r3, r2
 8001472:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f023 0307 	bic.w	r3, r3, #7
 800148a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4313      	orrs	r3, r2
 8001494:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	2b04      	cmp	r3, #4
 800149c:	d117      	bne.n	80014ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00e      	beq.n	80014ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fa77 	bl	80019a4 <DMA_CheckFifoParam>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2240      	movs	r2, #64	; 0x40
 80014c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014ca:	2301      	movs	r3, #1
 80014cc:	e016      	b.n	80014fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fa2e 	bl	8001938 <DMA_CalcBaseAndBitshift>
 80014dc:	4603      	mov	r3, r0
 80014de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e4:	223f      	movs	r2, #63	; 0x3f
 80014e6:	409a      	lsls	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	e010803f 	.word	0xe010803f

08001508 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_DMA_Start_IT+0x26>
 800152a:	2302      	movs	r3, #2
 800152c:	e048      	b.n	80015c0 <HAL_DMA_Start_IT+0xb8>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d137      	bne.n	80015b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2202      	movs	r2, #2
 8001546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 f9c0 	bl	80018dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001560:	223f      	movs	r2, #63	; 0x3f
 8001562:	409a      	lsls	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0216 	orr.w	r2, r2, #22
 8001576:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001586:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0208 	orr.w	r2, r2, #8
 800159e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e005      	b.n	80015be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015ba:	2302      	movs	r3, #2
 80015bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015be:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80015d4:	4b92      	ldr	r3, [pc, #584]	; (8001820 <HAL_DMA_IRQHandler+0x258>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a92      	ldr	r2, [pc, #584]	; (8001824 <HAL_DMA_IRQHandler+0x25c>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	0a9b      	lsrs	r3, r3, #10
 80015e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f2:	2208      	movs	r2, #8
 80015f4:	409a      	lsls	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01a      	beq.n	8001634 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0204 	bic.w	r2, r2, #4
 800161a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	2208      	movs	r2, #8
 8001622:	409a      	lsls	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	2201      	movs	r2, #1
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d012      	beq.n	800166a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2201      	movs	r2, #1
 8001658:	409a      	lsls	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	f043 0202 	orr.w	r2, r3, #2
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	2204      	movs	r2, #4
 8001670:	409a      	lsls	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d012      	beq.n	80016a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00b      	beq.n	80016a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	2204      	movs	r2, #4
 800168e:	409a      	lsls	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	f043 0204 	orr.w	r2, r3, #4
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	2210      	movs	r2, #16
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d043      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d03c      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c2:	2210      	movs	r2, #16
 80016c4:	409a      	lsls	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d018      	beq.n	800170a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d108      	bne.n	80016f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d024      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	4798      	blx	r3
 80016f6:	e01f      	b.n	8001738 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01b      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	4798      	blx	r3
 8001708:	e016      	b.n	8001738 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d107      	bne.n	8001728 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0208 	bic.w	r2, r2, #8
 8001726:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173c:	2220      	movs	r2, #32
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 808e 	beq.w	8001866 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 8086 	beq.w	8001866 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	2220      	movs	r2, #32
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b05      	cmp	r3, #5
 8001770:	d136      	bne.n	80017e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0216 	bic.w	r2, r2, #22
 8001780:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001790:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	d103      	bne.n	80017a2 <HAL_DMA_IRQHandler+0x1da>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0208 	bic.w	r2, r2, #8
 80017b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b6:	223f      	movs	r2, #63	; 0x3f
 80017b8:	409a      	lsls	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d07d      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
        }
        return;
 80017de:	e078      	b.n	80018d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d01c      	beq.n	8001828 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d108      	bne.n	800180e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	2b00      	cmp	r3, #0
 8001802:	d030      	beq.n	8001866 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
 800180c:	e02b      	b.n	8001866 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001812:	2b00      	cmp	r3, #0
 8001814:	d027      	beq.n	8001866 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	4798      	blx	r3
 800181e:	e022      	b.n	8001866 <HAL_DMA_IRQHandler+0x29e>
 8001820:	20000008 	.word	0x20000008
 8001824:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10f      	bne.n	8001856 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0210 	bic.w	r2, r2, #16
 8001844:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	2b00      	cmp	r3, #0
 800186c:	d032      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d022      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2205      	movs	r2, #5
 800187e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0201 	bic.w	r2, r2, #1
 8001890:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	3301      	adds	r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	429a      	cmp	r2, r3
 800189c:	d307      	bcc.n	80018ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f2      	bne.n	8001892 <HAL_DMA_IRQHandler+0x2ca>
 80018ac:	e000      	b.n	80018b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4798      	blx	r3
 80018d0:	e000      	b.n	80018d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018d2:	bf00      	nop
    }
  }
}
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop

080018dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b40      	cmp	r3, #64	; 0x40
 8001908:	d108      	bne.n	800191c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800191a:	e007      	b.n	800192c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	60da      	str	r2, [r3, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	3b10      	subs	r3, #16
 8001948:	4a13      	ldr	r2, [pc, #76]	; (8001998 <DMA_CalcBaseAndBitshift+0x60>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <DMA_CalcBaseAndBitshift+0x64>)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d908      	bls.n	8001978 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <DMA_CalcBaseAndBitshift+0x68>)
 800196e:	4013      	ands	r3, r2
 8001970:	1d1a      	adds	r2, r3, #4
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	659a      	str	r2, [r3, #88]	; 0x58
 8001976:	e006      	b.n	8001986 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <DMA_CalcBaseAndBitshift+0x68>)
 8001980:	4013      	ands	r3, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	aaaaaaab 	.word	0xaaaaaaab
 800199c:	08004a10 	.word	0x08004a10
 80019a0:	fffffc00 	.word	0xfffffc00

080019a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d11f      	bne.n	80019fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d855      	bhi.n	8001a70 <DMA_CheckFifoParam+0xcc>
 80019c4:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <DMA_CheckFifoParam+0x28>)
 80019c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ca:	bf00      	nop
 80019cc:	080019dd 	.word	0x080019dd
 80019d0:	080019ef 	.word	0x080019ef
 80019d4:	080019dd 	.word	0x080019dd
 80019d8:	08001a71 	.word	0x08001a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d045      	beq.n	8001a74 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ec:	e042      	b.n	8001a74 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019f6:	d13f      	bne.n	8001a78 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019fc:	e03c      	b.n	8001a78 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a06:	d121      	bne.n	8001a4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d836      	bhi.n	8001a7c <DMA_CheckFifoParam+0xd8>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <DMA_CheckFifoParam+0x70>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a25 	.word	0x08001a25
 8001a18:	08001a2b 	.word	0x08001a2b
 8001a1c:	08001a25 	.word	0x08001a25
 8001a20:	08001a3d 	.word	0x08001a3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
      break;
 8001a28:	e02f      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d024      	beq.n	8001a80 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a3a:	e021      	b.n	8001a80 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a44:	d11e      	bne.n	8001a84 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a4a:	e01b      	b.n	8001a84 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d902      	bls.n	8001a58 <DMA_CheckFifoParam+0xb4>
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d003      	beq.n	8001a5e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a56:	e018      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a5c:	e015      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00e      	beq.n	8001a88 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a6e:	e00b      	b.n	8001a88 <DMA_CheckFifoParam+0xe4>
      break;
 8001a70:	bf00      	nop
 8001a72:	e00a      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a74:	bf00      	nop
 8001a76:	e008      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a78:	bf00      	nop
 8001a7a:	e006      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a7c:	bf00      	nop
 8001a7e:	e004      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a80:	bf00      	nop
 8001a82:	e002      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;   
 8001a84:	bf00      	nop
 8001a86:	e000      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a88:	bf00      	nop
    }
  } 
  
  return status; 
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e175      	b.n	8001da4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f040 8164 	bne.w	8001d9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x4e>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b12      	cmp	r3, #18
 8001ae4:	d123      	bne.n	8001b2e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	69b9      	ldr	r1, [r7, #24]
 8001b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0203 	and.w	r2, r3, #3
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d00b      	beq.n	8001b82 <HAL_GPIO_Init+0xea>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b76:	2b11      	cmp	r3, #17
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b12      	cmp	r3, #18
 8001b80:	d130      	bne.n	8001be4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 0201 	and.w	r2, r3, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80be 	beq.w	8001d9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <HAL_GPIO_Init+0x320>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a64      	ldr	r2, [pc, #400]	; (8001db8 <HAL_GPIO_Init+0x320>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b62      	ldr	r3, [pc, #392]	; (8001db8 <HAL_GPIO_Init+0x320>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c3a:	4a60      	ldr	r2, [pc, #384]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <HAL_GPIO_Init+0x328>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d037      	beq.n	8001cd6 <HAL_GPIO_Init+0x23e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a56      	ldr	r2, [pc, #344]	; (8001dc4 <HAL_GPIO_Init+0x32c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d031      	beq.n	8001cd2 <HAL_GPIO_Init+0x23a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a55      	ldr	r2, [pc, #340]	; (8001dc8 <HAL_GPIO_Init+0x330>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d02b      	beq.n	8001cce <HAL_GPIO_Init+0x236>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a54      	ldr	r2, [pc, #336]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d025      	beq.n	8001cca <HAL_GPIO_Init+0x232>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a53      	ldr	r2, [pc, #332]	; (8001dd0 <HAL_GPIO_Init+0x338>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01f      	beq.n	8001cc6 <HAL_GPIO_Init+0x22e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_GPIO_Init+0x33c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d019      	beq.n	8001cc2 <HAL_GPIO_Init+0x22a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a51      	ldr	r2, [pc, #324]	; (8001dd8 <HAL_GPIO_Init+0x340>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_GPIO_Init+0x226>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a50      	ldr	r2, [pc, #320]	; (8001ddc <HAL_GPIO_Init+0x344>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00d      	beq.n	8001cba <HAL_GPIO_Init+0x222>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <HAL_GPIO_Init+0x348>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d007      	beq.n	8001cb6 <HAL_GPIO_Init+0x21e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <HAL_GPIO_Init+0x34c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_GPIO_Init+0x21a>
 8001cae:	2309      	movs	r3, #9
 8001cb0:	e012      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	e010      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	e00e      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cba:	2307      	movs	r3, #7
 8001cbc:	e00c      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cbe:	2306      	movs	r3, #6
 8001cc0:	e00a      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ce8:	4934      	ldr	r1, [pc, #208]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d1a:	4a33      	ldr	r2, [pc, #204]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d44:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	f67f ae86 	bls.w	8001ab8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	3724      	adds	r7, #36	; 0x24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40021400 	.word	0x40021400
 8001dd8:	40021800 	.word	0x40021800
 8001ddc:	40021c00 	.word	0x40021c00
 8001de0:	40022000 	.word	0x40022000
 8001de4:	40022400 	.word	0x40022400
 8001de8:	40013c00 	.word	0x40013c00

08001dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dfc:	787b      	ldrb	r3, [r7, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e08:	e003      	b.n	8001e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	041a      	lsls	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e6e:	f7fe fc11 	bl	8000694 <HAL_GetTick>
 8001e72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e74:	e009      	b.n	8001e8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e76:	f7fe fc0d 	bl	8000694 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e84:	d901      	bls.n	8001e8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e022      	b.n	8001ed0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e96:	d1ee      	bne.n	8001e76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea4:	f7fe fbf6 	bl	8000694 <HAL_GetTick>
 8001ea8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eaa:	e009      	b.n	8001ec0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eac:	f7fe fbf2 	bl	8000694 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eba:	d901      	bls.n	8001ec0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e007      	b.n	8001ed0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ecc:	d1ee      	bne.n	8001eac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e25e      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8087 	beq.w	8002012 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f04:	4b96      	ldr	r3, [pc, #600]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d00c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f10:	4b93      	ldr	r3, [pc, #588]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d112      	bne.n	8001f42 <HAL_RCC_OscConfig+0x62>
 8001f1c:	4b90      	ldr	r3, [pc, #576]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f28:	d10b      	bne.n	8001f42 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2a:	4b8d      	ldr	r3, [pc, #564]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d06c      	beq.n	8002010 <HAL_RCC_OscConfig+0x130>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d168      	bne.n	8002010 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e238      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x7a>
 8001f4c:	4b84      	ldr	r3, [pc, #528]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a83      	ldr	r2, [pc, #524]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e02e      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x9c>
 8001f62:	4b7f      	ldr	r3, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7e      	ldr	r2, [pc, #504]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b7c      	ldr	r3, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7b      	ldr	r2, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xc0>
 8001f86:	4b76      	ldr	r3, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a75      	ldr	r2, [pc, #468]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a72      	ldr	r2, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd8>
 8001fa0:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6b      	ldr	r2, [pc, #428]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7fe fb68 	bl	8000694 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7fe fb64 	bl	8000694 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1ec      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xe8>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7fe fb54 	bl	8000694 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7fe fb50 	bl	8000694 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1d8      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	4b57      	ldr	r3, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x110>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d069      	beq.n	80020f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201e:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b08      	cmp	r3, #8
 8002034:	d11c      	bne.n	8002070 <HAL_RCC_OscConfig+0x190>
 8002036:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x17a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1ac      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	493d      	ldr	r1, [pc, #244]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e040      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d023      	beq.n	80020c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe fb06 	bl	8000694 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208c:	f7fe fb02 	bl	8000694 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e18a      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4929      	ldr	r1, [pc, #164]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
 80020be:	e018      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe fae2 	bl	8000694 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d4:	f7fe fade 	bl	8000694 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e166      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d038      	beq.n	8002170 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d019      	beq.n	800213a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002112:	f7fe fabf 	bl	8000694 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800211a:	f7fe fabb 	bl	8000694 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e143      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800212e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x23a>
 8002138:	e01a      	b.n	8002170 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800213c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7fe faa5 	bl	8000694 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214e:	f7fe faa1 	bl	8000694 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d903      	bls.n	8002164 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e129      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
 8002160:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002164:	4b95      	ldr	r3, [pc, #596]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ee      	bne.n	800214e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a4 	beq.w	80022c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217e:	4b8f      	ldr	r3, [pc, #572]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	4b8c      	ldr	r3, [pc, #560]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a8b      	ldr	r2, [pc, #556]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a6:	4b86      	ldr	r3, [pc, #536]	; (80023c0 <HAL_RCC_OscConfig+0x4e0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d118      	bne.n	80021e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021b2:	4b83      	ldr	r3, [pc, #524]	; (80023c0 <HAL_RCC_OscConfig+0x4e0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a82      	ldr	r2, [pc, #520]	; (80023c0 <HAL_RCC_OscConfig+0x4e0>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7fe fa69 	bl	8000694 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021c6:	f7fe fa65 	bl	8000694 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b64      	cmp	r3, #100	; 0x64
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0ed      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d8:	4b79      	ldr	r3, [pc, #484]	; (80023c0 <HAL_RCC_OscConfig+0x4e0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x31a>
 80021ec:	4b73      	ldr	r3, [pc, #460]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a72      	ldr	r2, [pc, #456]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
 80021f8:	e02d      	b.n	8002256 <HAL_RCC_OscConfig+0x376>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x33c>
 8002202:	4b6e      	ldr	r3, [pc, #440]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	4a6d      	ldr	r2, [pc, #436]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6713      	str	r3, [r2, #112]	; 0x70
 800220e:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a6a      	ldr	r2, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002214:	f023 0304 	bic.w	r3, r3, #4
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	e01c      	b.n	8002256 <HAL_RCC_OscConfig+0x376>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d10c      	bne.n	800223e <HAL_RCC_OscConfig+0x35e>
 8002224:	4b65      	ldr	r3, [pc, #404]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	4a64      	ldr	r2, [pc, #400]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800222a:	f043 0304 	orr.w	r3, r3, #4
 800222e:	6713      	str	r3, [r2, #112]	; 0x70
 8002230:	4b62      	ldr	r3, [pc, #392]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a61      	ldr	r2, [pc, #388]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
 800223c:	e00b      	b.n	8002256 <HAL_RCC_OscConfig+0x376>
 800223e:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a5e      	ldr	r2, [pc, #376]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
 800224a:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a5b      	ldr	r2, [pc, #364]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d015      	beq.n	800228a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7fe fa19 	bl	8000694 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7fe fa15 	bl	8000694 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e09b      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227c:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0ee      	beq.n	8002266 <HAL_RCC_OscConfig+0x386>
 8002288:	e014      	b.n	80022b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228a:	f7fe fa03 	bl	8000694 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002290:	e00a      	b.n	80022a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe f9ff 	bl	8000694 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e085      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a8:	4b44      	ldr	r3, [pc, #272]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1ee      	bne.n	8002292 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4b40      	ldr	r3, [pc, #256]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a3f      	ldr	r2, [pc, #252]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d071      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d069      	beq.n	80023ae <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d14b      	bne.n	800237a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b36      	ldr	r3, [pc, #216]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a35      	ldr	r2, [pc, #212]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80022e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe f9d1 	bl	8000694 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe f9cd 	bl	8000694 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e055      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002308:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	019b      	lsls	r3, r3, #6
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	3b01      	subs	r3, #1
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	061b      	lsls	r3, r3, #24
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	071b      	lsls	r3, r3, #28
 8002340:	491e      	ldr	r1, [pc, #120]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800234c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe f99f 	bl	8000694 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235a:	f7fe f99b 	bl	8000694 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e023      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x47a>
 8002378:	e01b      	b.n	80023b2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe f985 	bl	8000694 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238e:	f7fe f981 	bl	8000694 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e009      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x4ae>
 80023ac:	e001      	b.n	80023b2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000

080023c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0ce      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b69      	ldr	r3, [pc, #420]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d910      	bls.n	800240c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b66      	ldr	r3, [pc, #408]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 020f 	bic.w	r2, r3, #15
 80023f2:	4964      	ldr	r1, [pc, #400]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b62      	ldr	r3, [pc, #392]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b6      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002424:	4b58      	ldr	r3, [pc, #352]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a57      	ldr	r2, [pc, #348]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800242e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800243c:	4b52      	ldr	r3, [pc, #328]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a51      	ldr	r2, [pc, #324]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002446:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b4f      	ldr	r3, [pc, #316]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	494c      	ldr	r1, [pc, #304]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d040      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b46      	ldr	r3, [pc, #280]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d115      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e07d      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4b40      	ldr	r3, [pc, #256]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e071      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b3c      	ldr	r3, [pc, #240]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e069      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b38      	ldr	r3, [pc, #224]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4935      	ldr	r1, [pc, #212]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b8:	f7fe f8ec 	bl	8000694 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7fe f8e8 	bl	8000694 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e051      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 020c 	and.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1eb      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d210      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 020f 	bic.w	r2, r3, #15
 80024fe:	4921      	ldr	r1, [pc, #132]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e030      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002524:	4b18      	ldr	r3, [pc, #96]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4915      	ldr	r1, [pc, #84]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	490d      	ldr	r1, [pc, #52]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002556:	f000 f81d 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 800255a:	4601      	mov	r1, r0
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1c8>)
 8002568:	5cd3      	ldrb	r3, [r2, r3]
 800256a:	fa21 f303 	lsr.w	r3, r1, r3
 800256e:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_RCC_ClockConfig+0x1cc>)
 8002570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe f84a 	bl	800060c <HAL_InitTick>

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023c00 	.word	0x40023c00
 8002588:	40023800 	.word	0x40023800
 800258c:	08004a18 	.word	0x08004a18
 8002590:	20000008 	.word	0x20000008

08002594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	2300      	movs	r3, #0
 80025a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025aa:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d007      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x32>
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d008      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x38>
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 80b4 	bne.w	8002728 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b5e      	ldr	r3, [pc, #376]	; (800273c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025c2:	60bb      	str	r3, [r7, #8]
       break;
 80025c4:	e0b3      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c6:	4b5e      	ldr	r3, [pc, #376]	; (8002740 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025c8:	60bb      	str	r3, [r7, #8]
      break;
 80025ca:	e0b0      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025cc:	4b5a      	ldr	r3, [pc, #360]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025d6:	4b58      	ldr	r3, [pc, #352]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d04a      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e2:	4b55      	ldr	r3, [pc, #340]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	f04f 0400 	mov.w	r4, #0
 80025ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	ea03 0501 	and.w	r5, r3, r1
 80025f8:	ea04 0602 	and.w	r6, r4, r2
 80025fc:	4629      	mov	r1, r5
 80025fe:	4632      	mov	r2, r6
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	f04f 0400 	mov.w	r4, #0
 8002608:	0154      	lsls	r4, r2, #5
 800260a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800260e:	014b      	lsls	r3, r1, #5
 8002610:	4619      	mov	r1, r3
 8002612:	4622      	mov	r2, r4
 8002614:	1b49      	subs	r1, r1, r5
 8002616:	eb62 0206 	sbc.w	r2, r2, r6
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	f04f 0400 	mov.w	r4, #0
 8002622:	0194      	lsls	r4, r2, #6
 8002624:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002628:	018b      	lsls	r3, r1, #6
 800262a:	1a5b      	subs	r3, r3, r1
 800262c:	eb64 0402 	sbc.w	r4, r4, r2
 8002630:	f04f 0100 	mov.w	r1, #0
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	00e2      	lsls	r2, r4, #3
 800263a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800263e:	00d9      	lsls	r1, r3, #3
 8002640:	460b      	mov	r3, r1
 8002642:	4614      	mov	r4, r2
 8002644:	195b      	adds	r3, r3, r5
 8002646:	eb44 0406 	adc.w	r4, r4, r6
 800264a:	f04f 0100 	mov.w	r1, #0
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	0262      	lsls	r2, r4, #9
 8002654:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002658:	0259      	lsls	r1, r3, #9
 800265a:	460b      	mov	r3, r1
 800265c:	4614      	mov	r4, r2
 800265e:	4618      	mov	r0, r3
 8002660:	4621      	mov	r1, r4
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f04f 0400 	mov.w	r4, #0
 8002668:	461a      	mov	r2, r3
 800266a:	4623      	mov	r3, r4
 800266c:	f7fd fe40 	bl	80002f0 <__aeabi_uldivmod>
 8002670:	4603      	mov	r3, r0
 8002672:	460c      	mov	r4, r1
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e049      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	f04f 0400 	mov.w	r4, #0
 8002682:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	ea03 0501 	and.w	r5, r3, r1
 800268e:	ea04 0602 	and.w	r6, r4, r2
 8002692:	4629      	mov	r1, r5
 8002694:	4632      	mov	r2, r6
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	f04f 0400 	mov.w	r4, #0
 800269e:	0154      	lsls	r4, r2, #5
 80026a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026a4:	014b      	lsls	r3, r1, #5
 80026a6:	4619      	mov	r1, r3
 80026a8:	4622      	mov	r2, r4
 80026aa:	1b49      	subs	r1, r1, r5
 80026ac:	eb62 0206 	sbc.w	r2, r2, r6
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	f04f 0400 	mov.w	r4, #0
 80026b8:	0194      	lsls	r4, r2, #6
 80026ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026be:	018b      	lsls	r3, r1, #6
 80026c0:	1a5b      	subs	r3, r3, r1
 80026c2:	eb64 0402 	sbc.w	r4, r4, r2
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	00e2      	lsls	r2, r4, #3
 80026d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026d4:	00d9      	lsls	r1, r3, #3
 80026d6:	460b      	mov	r3, r1
 80026d8:	4614      	mov	r4, r2
 80026da:	195b      	adds	r3, r3, r5
 80026dc:	eb44 0406 	adc.w	r4, r4, r6
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	02a2      	lsls	r2, r4, #10
 80026ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026ee:	0299      	lsls	r1, r3, #10
 80026f0:	460b      	mov	r3, r1
 80026f2:	4614      	mov	r4, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	4621      	mov	r1, r4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f04f 0400 	mov.w	r4, #0
 80026fe:	461a      	mov	r2, r3
 8002700:	4623      	mov	r3, r4
 8002702:	f7fd fdf5 	bl	80002f0 <__aeabi_uldivmod>
 8002706:	4603      	mov	r3, r0
 8002708:	460c      	mov	r4, r1
 800270a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	60bb      	str	r3, [r7, #8]
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800272a:	60bb      	str	r3, [r7, #8]
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	68bb      	ldr	r3, [r7, #8]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	00f42400 	.word	0x00f42400
 8002740:	007a1200 	.word	0x007a1200

08002744 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_RCC_GetHCLKFreq+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000008 	.word	0x20000008

0800275c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002760:	f7ff fff0 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002764:	4601      	mov	r1, r0
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0a9b      	lsrs	r3, r3, #10
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4a03      	ldr	r2, [pc, #12]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	08004a28 	.word	0x08004a28

08002784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002788:	f7ff ffdc 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 800278c:	4601      	mov	r1, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0b5b      	lsrs	r3, r3, #13
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4a03      	ldr	r2, [pc, #12]	; (80027a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	08004a28 	.word	0x08004a28

080027ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d012      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027d4:	4b69      	ldr	r3, [pc, #420]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a68      	ldr	r2, [pc, #416]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027de:	6093      	str	r3, [r2, #8]
 80027e0:	4b66      	ldr	r3, [pc, #408]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e8:	4964      	ldr	r1, [pc, #400]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d017      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002806:	4b5d      	ldr	r3, [pc, #372]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800280c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	4959      	ldr	r1, [pc, #356]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002824:	d101      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d017      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002842:	4b4e      	ldr	r3, [pc, #312]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002848:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	494a      	ldr	r1, [pc, #296]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002860:	d101      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002862:	2301      	movs	r3, #1
 8002864:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800286e:	2301      	movs	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800287e:	2301      	movs	r3, #1
 8002880:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 808b 	beq.w	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002890:	4b3a      	ldr	r3, [pc, #232]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	4a39      	ldr	r2, [pc, #228]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289a:	6413      	str	r3, [r2, #64]	; 0x40
 800289c:	4b37      	ldr	r3, [pc, #220]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028a8:	4b35      	ldr	r3, [pc, #212]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a34      	ldr	r2, [pc, #208]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b4:	f7fd feee 	bl	8000694 <HAL_GetTick>
 80028b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028bc:	f7fd feea 	bl	8000694 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e38d      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028ce:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028da:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d035      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d02e      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028f8:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002900:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a1a      	ldr	r2, [pc, #104]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002918:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002920:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d114      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fd feb2 	bl	8000694 <HAL_GetTick>
 8002930:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002932:	e00a      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7fd feae 	bl	8000694 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e34f      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ee      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002962:	d111      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002972:	400b      	ands	r3, r1
 8002974:	4901      	ldr	r1, [pc, #4]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
 800297a:	e00b      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800297c:	40023800 	.word	0x40023800
 8002980:	40007000 	.word	0x40007000
 8002984:	0ffffcff 	.word	0x0ffffcff
 8002988:	4bb3      	ldr	r3, [pc, #716]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4ab2      	ldr	r2, [pc, #712]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800298e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002992:	6093      	str	r3, [r2, #8]
 8002994:	4bb0      	ldr	r3, [pc, #704]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002996:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	49ad      	ldr	r1, [pc, #692]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d010      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029b2:	4ba9      	ldr	r3, [pc, #676]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b8:	4aa7      	ldr	r2, [pc, #668]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029c2:	4ba5      	ldr	r3, [pc, #660]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	49a2      	ldr	r1, [pc, #648]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029e0:	4b9d      	ldr	r3, [pc, #628]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ee:	499a      	ldr	r1, [pc, #616]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a02:	4b95      	ldr	r3, [pc, #596]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a10:	4991      	ldr	r1, [pc, #580]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a24:	4b8c      	ldr	r3, [pc, #560]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a32:	4989      	ldr	r1, [pc, #548]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a46:	4b84      	ldr	r3, [pc, #528]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	4980      	ldr	r1, [pc, #512]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a68:	4b7b      	ldr	r3, [pc, #492]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4978      	ldr	r1, [pc, #480]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a8a:	4b73      	ldr	r3, [pc, #460]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f023 020c 	bic.w	r2, r3, #12
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a98:	496f      	ldr	r1, [pc, #444]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	4967      	ldr	r1, [pc, #412]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ace:	4b62      	ldr	r3, [pc, #392]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002adc:	495e      	ldr	r1, [pc, #376]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	4956      	ldr	r1, [pc, #344]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b12:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	494d      	ldr	r1, [pc, #308]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b34:	4b48      	ldr	r3, [pc, #288]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	4945      	ldr	r1, [pc, #276]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b56:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b64:	493c      	ldr	r1, [pc, #240]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b78:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b86:	4934      	ldr	r1, [pc, #208]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d011      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ba8:	492b      	ldr	r1, [pc, #172]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be8:	491b      	ldr	r1, [pc, #108]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c0c:	4912      	ldr	r1, [pc, #72]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00b      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c26:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c30:	4909      	ldr	r1, [pc, #36]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00f      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	e002      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	4985      	ldr	r1, [pc, #532]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c70:	4b80      	ldr	r3, [pc, #512]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c80:	497c      	ldr	r1, [pc, #496]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d005      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c96:	f040 80d6 	bne.w	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c9a:	4b76      	ldr	r3, [pc, #472]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a75      	ldr	r2, [pc, #468]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ca0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca6:	f7fd fcf5 	bl	8000694 <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cae:	f7fd fcf1 	bl	8000694 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e194      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cc0:	4b6c      	ldr	r3, [pc, #432]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f0      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d021      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d11d      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ce0:	4b64      	ldr	r3, [pc, #400]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce6:	0c1b      	lsrs	r3, r3, #16
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cee:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf4:	0e1b      	lsrs	r3, r3, #24
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	019a      	lsls	r2, r3, #6
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	431a      	orrs	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	061b      	lsls	r3, r3, #24
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	071b      	lsls	r3, r3, #28
 8002d14:	4957      	ldr	r1, [pc, #348]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d02e      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d46:	d129      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d48:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d56:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5c:	0f1b      	lsrs	r3, r3, #28
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	019a      	lsls	r2, r3, #6
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	431a      	orrs	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	071b      	lsls	r3, r3, #28
 8002d7c:	493d      	ldr	r1, [pc, #244]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d8a:	f023 021f 	bic.w	r2, r3, #31
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	3b01      	subs	r3, #1
 8002d94:	4937      	ldr	r1, [pc, #220]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01d      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dae:	0e1b      	lsrs	r3, r3, #24
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002db6:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dbc:	0f1b      	lsrs	r3, r3, #28
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	019a      	lsls	r2, r3, #6
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	071b      	lsls	r3, r3, #28
 8002ddc:	4925      	ldr	r1, [pc, #148]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d011      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	019a      	lsls	r2, r3, #6
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	071b      	lsls	r3, r3, #28
 8002e0c:	4919      	ldr	r1, [pc, #100]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e14:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a16      	ldr	r2, [pc, #88]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e20:	f7fd fc38 	bl	8000694 <HAL_GetTick>
 8002e24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e28:	f7fd fc34 	bl	8000694 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e0d7      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	f040 80cd 	bne.w	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5a:	f7fd fc1b 	bl	8000694 <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e62:	f7fd fc17 	bl	8000694 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b64      	cmp	r3, #100	; 0x64
 8002e6e:	d903      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0ba      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002e74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e78:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e84:	d0ed      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d02e      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d12a      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eae:	4b51      	ldr	r3, [pc, #324]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ebc:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	0f1b      	lsrs	r3, r3, #28
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	019a      	lsls	r2, r3, #6
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	041b      	lsls	r3, r3, #16
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	431a      	orrs	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	071b      	lsls	r3, r3, #28
 8002ee2:	4944      	ldr	r1, [pc, #272]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002eea:	4b42      	ldr	r3, [pc, #264]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	493d      	ldr	r1, [pc, #244]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d022      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f18:	d11d      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	0e1b      	lsrs	r3, r3, #24
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f28:	4b32      	ldr	r3, [pc, #200]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	0f1b      	lsrs	r3, r3, #28
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	019a      	lsls	r2, r3, #6
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	061b      	lsls	r3, r3, #24
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	4929      	ldr	r1, [pc, #164]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	0e1b      	lsrs	r3, r3, #24
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f70:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	0c1b      	lsrs	r3, r3, #16
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	019a      	lsls	r2, r3, #6
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	061b      	lsls	r3, r3, #24
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	071b      	lsls	r3, r3, #28
 8002f96:	4917      	ldr	r1, [pc, #92]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	4911      	ldr	r1, [pc, #68]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc0:	f7fd fb68 	bl	8000694 <HAL_GetTick>
 8002fc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fc8:	f7fd fb64 	bl	8000694 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e007      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fe6:	d1ef      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800

08002ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e040      	b.n	800308c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 ff98 	bl	8003f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2224      	movs	r2, #36	; 0x24
 8003024:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f8be 	bl	80031b8 <UART_SetConfig>
 800303c:	4603      	mov	r3, r0
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e022      	b.n	800308c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fb56 	bl	8003700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003072:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fbdd 	bl	8003844 <UART_CheckIdleState>
 800308a:	4603      	mov	r3, r0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d17f      	bne.n	80031ac <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_UART_Transmit+0x24>
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e078      	b.n	80031ae <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Transmit+0x36>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e071      	b.n	80031ae <HAL_UART_Transmit+0x11a>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2221      	movs	r2, #33	; 0x21
 80030dc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80030de:	f7fd fad9 	bl	8000694 <HAL_GetTick>
 80030e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	88fa      	ldrh	r2, [r7, #6]
 80030e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fc:	d108      	bne.n	8003110 <HAL_UART_Transmit+0x7c>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d104      	bne.n	8003110 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	e003      	b.n	8003118 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003118:	e02c      	b.n	8003174 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2200      	movs	r2, #0
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fbbc 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e03c      	b.n	80031ae <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10b      	bne.n	8003152 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003148:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	3302      	adds	r3, #2
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	e007      	b.n	8003162 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	781a      	ldrb	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	3301      	adds	r3, #1
 8003160:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1cc      	bne.n	800311a <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2200      	movs	r2, #0
 8003188:	2140      	movs	r1, #64	; 0x40
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fb89 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e009      	b.n	80031ae <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80031ac:	2302      	movs	r3, #2
  }
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4bb1      	ldr	r3, [pc, #708]	; (80034ac <UART_SetConfig+0x2f4>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	6939      	ldr	r1, [r7, #16]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a9f      	ldr	r2, [pc, #636]	; (80034b0 <UART_SetConfig+0x2f8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d121      	bne.n	800327c <UART_SetConfig+0xc4>
 8003238:	4b9e      	ldr	r3, [pc, #632]	; (80034b4 <UART_SetConfig+0x2fc>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b03      	cmp	r3, #3
 8003244:	d816      	bhi.n	8003274 <UART_SetConfig+0xbc>
 8003246:	a201      	add	r2, pc, #4	; (adr r2, 800324c <UART_SetConfig+0x94>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	0800325d 	.word	0x0800325d
 8003250:	08003269 	.word	0x08003269
 8003254:	08003263 	.word	0x08003263
 8003258:	0800326f 	.word	0x0800326f
 800325c:	2301      	movs	r3, #1
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e151      	b.n	8003506 <UART_SetConfig+0x34e>
 8003262:	2302      	movs	r3, #2
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e14e      	b.n	8003506 <UART_SetConfig+0x34e>
 8003268:	2304      	movs	r3, #4
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e14b      	b.n	8003506 <UART_SetConfig+0x34e>
 800326e:	2308      	movs	r3, #8
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e148      	b.n	8003506 <UART_SetConfig+0x34e>
 8003274:	2310      	movs	r3, #16
 8003276:	77fb      	strb	r3, [r7, #31]
 8003278:	bf00      	nop
 800327a:	e144      	b.n	8003506 <UART_SetConfig+0x34e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a8d      	ldr	r2, [pc, #564]	; (80034b8 <UART_SetConfig+0x300>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d134      	bne.n	80032f0 <UART_SetConfig+0x138>
 8003286:	4b8b      	ldr	r3, [pc, #556]	; (80034b4 <UART_SetConfig+0x2fc>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b0c      	cmp	r3, #12
 8003292:	d829      	bhi.n	80032e8 <UART_SetConfig+0x130>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <UART_SetConfig+0xe4>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032d1 	.word	0x080032d1
 80032a0:	080032e9 	.word	0x080032e9
 80032a4:	080032e9 	.word	0x080032e9
 80032a8:	080032e9 	.word	0x080032e9
 80032ac:	080032dd 	.word	0x080032dd
 80032b0:	080032e9 	.word	0x080032e9
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	080032e9 	.word	0x080032e9
 80032bc:	080032d7 	.word	0x080032d7
 80032c0:	080032e9 	.word	0x080032e9
 80032c4:	080032e9 	.word	0x080032e9
 80032c8:	080032e9 	.word	0x080032e9
 80032cc:	080032e3 	.word	0x080032e3
 80032d0:	2300      	movs	r3, #0
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e117      	b.n	8003506 <UART_SetConfig+0x34e>
 80032d6:	2302      	movs	r3, #2
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e114      	b.n	8003506 <UART_SetConfig+0x34e>
 80032dc:	2304      	movs	r3, #4
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e111      	b.n	8003506 <UART_SetConfig+0x34e>
 80032e2:	2308      	movs	r3, #8
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e10e      	b.n	8003506 <UART_SetConfig+0x34e>
 80032e8:	2310      	movs	r3, #16
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	bf00      	nop
 80032ee:	e10a      	b.n	8003506 <UART_SetConfig+0x34e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a71      	ldr	r2, [pc, #452]	; (80034bc <UART_SetConfig+0x304>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d120      	bne.n	800333c <UART_SetConfig+0x184>
 80032fa:	4b6e      	ldr	r3, [pc, #440]	; (80034b4 <UART_SetConfig+0x2fc>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003304:	2b10      	cmp	r3, #16
 8003306:	d00f      	beq.n	8003328 <UART_SetConfig+0x170>
 8003308:	2b10      	cmp	r3, #16
 800330a:	d802      	bhi.n	8003312 <UART_SetConfig+0x15a>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <UART_SetConfig+0x164>
 8003310:	e010      	b.n	8003334 <UART_SetConfig+0x17c>
 8003312:	2b20      	cmp	r3, #32
 8003314:	d005      	beq.n	8003322 <UART_SetConfig+0x16a>
 8003316:	2b30      	cmp	r3, #48	; 0x30
 8003318:	d009      	beq.n	800332e <UART_SetConfig+0x176>
 800331a:	e00b      	b.n	8003334 <UART_SetConfig+0x17c>
 800331c:	2300      	movs	r3, #0
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e0f1      	b.n	8003506 <UART_SetConfig+0x34e>
 8003322:	2302      	movs	r3, #2
 8003324:	77fb      	strb	r3, [r7, #31]
 8003326:	e0ee      	b.n	8003506 <UART_SetConfig+0x34e>
 8003328:	2304      	movs	r3, #4
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e0eb      	b.n	8003506 <UART_SetConfig+0x34e>
 800332e:	2308      	movs	r3, #8
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e0e8      	b.n	8003506 <UART_SetConfig+0x34e>
 8003334:	2310      	movs	r3, #16
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	bf00      	nop
 800333a:	e0e4      	b.n	8003506 <UART_SetConfig+0x34e>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a5f      	ldr	r2, [pc, #380]	; (80034c0 <UART_SetConfig+0x308>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d120      	bne.n	8003388 <UART_SetConfig+0x1d0>
 8003346:	4b5b      	ldr	r3, [pc, #364]	; (80034b4 <UART_SetConfig+0x2fc>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d00f      	beq.n	8003374 <UART_SetConfig+0x1bc>
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d802      	bhi.n	800335e <UART_SetConfig+0x1a6>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <UART_SetConfig+0x1b0>
 800335c:	e010      	b.n	8003380 <UART_SetConfig+0x1c8>
 800335e:	2b80      	cmp	r3, #128	; 0x80
 8003360:	d005      	beq.n	800336e <UART_SetConfig+0x1b6>
 8003362:	2bc0      	cmp	r3, #192	; 0xc0
 8003364:	d009      	beq.n	800337a <UART_SetConfig+0x1c2>
 8003366:	e00b      	b.n	8003380 <UART_SetConfig+0x1c8>
 8003368:	2300      	movs	r3, #0
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e0cb      	b.n	8003506 <UART_SetConfig+0x34e>
 800336e:	2302      	movs	r3, #2
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e0c8      	b.n	8003506 <UART_SetConfig+0x34e>
 8003374:	2304      	movs	r3, #4
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e0c5      	b.n	8003506 <UART_SetConfig+0x34e>
 800337a:	2308      	movs	r3, #8
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e0c2      	b.n	8003506 <UART_SetConfig+0x34e>
 8003380:	2310      	movs	r3, #16
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	bf00      	nop
 8003386:	e0be      	b.n	8003506 <UART_SetConfig+0x34e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a4d      	ldr	r2, [pc, #308]	; (80034c4 <UART_SetConfig+0x30c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d124      	bne.n	80033dc <UART_SetConfig+0x224>
 8003392:	4b48      	ldr	r3, [pc, #288]	; (80034b4 <UART_SetConfig+0x2fc>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a0:	d012      	beq.n	80033c8 <UART_SetConfig+0x210>
 80033a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a6:	d802      	bhi.n	80033ae <UART_SetConfig+0x1f6>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <UART_SetConfig+0x204>
 80033ac:	e012      	b.n	80033d4 <UART_SetConfig+0x21c>
 80033ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b2:	d006      	beq.n	80033c2 <UART_SetConfig+0x20a>
 80033b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b8:	d009      	beq.n	80033ce <UART_SetConfig+0x216>
 80033ba:	e00b      	b.n	80033d4 <UART_SetConfig+0x21c>
 80033bc:	2300      	movs	r3, #0
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e0a1      	b.n	8003506 <UART_SetConfig+0x34e>
 80033c2:	2302      	movs	r3, #2
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e09e      	b.n	8003506 <UART_SetConfig+0x34e>
 80033c8:	2304      	movs	r3, #4
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e09b      	b.n	8003506 <UART_SetConfig+0x34e>
 80033ce:	2308      	movs	r3, #8
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e098      	b.n	8003506 <UART_SetConfig+0x34e>
 80033d4:	2310      	movs	r3, #16
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	bf00      	nop
 80033da:	e094      	b.n	8003506 <UART_SetConfig+0x34e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a39      	ldr	r2, [pc, #228]	; (80034c8 <UART_SetConfig+0x310>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d124      	bne.n	8003430 <UART_SetConfig+0x278>
 80033e6:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <UART_SetConfig+0x2fc>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f4:	d012      	beq.n	800341c <UART_SetConfig+0x264>
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fa:	d802      	bhi.n	8003402 <UART_SetConfig+0x24a>
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <UART_SetConfig+0x258>
 8003400:	e012      	b.n	8003428 <UART_SetConfig+0x270>
 8003402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003406:	d006      	beq.n	8003416 <UART_SetConfig+0x25e>
 8003408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800340c:	d009      	beq.n	8003422 <UART_SetConfig+0x26a>
 800340e:	e00b      	b.n	8003428 <UART_SetConfig+0x270>
 8003410:	2301      	movs	r3, #1
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	e077      	b.n	8003506 <UART_SetConfig+0x34e>
 8003416:	2302      	movs	r3, #2
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	e074      	b.n	8003506 <UART_SetConfig+0x34e>
 800341c:	2304      	movs	r3, #4
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e071      	b.n	8003506 <UART_SetConfig+0x34e>
 8003422:	2308      	movs	r3, #8
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	e06e      	b.n	8003506 <UART_SetConfig+0x34e>
 8003428:	2310      	movs	r3, #16
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	bf00      	nop
 800342e:	e06a      	b.n	8003506 <UART_SetConfig+0x34e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a25      	ldr	r2, [pc, #148]	; (80034cc <UART_SetConfig+0x314>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d124      	bne.n	8003484 <UART_SetConfig+0x2cc>
 800343a:	4b1e      	ldr	r3, [pc, #120]	; (80034b4 <UART_SetConfig+0x2fc>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003448:	d012      	beq.n	8003470 <UART_SetConfig+0x2b8>
 800344a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344e:	d802      	bhi.n	8003456 <UART_SetConfig+0x29e>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <UART_SetConfig+0x2ac>
 8003454:	e012      	b.n	800347c <UART_SetConfig+0x2c4>
 8003456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345a:	d006      	beq.n	800346a <UART_SetConfig+0x2b2>
 800345c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003460:	d009      	beq.n	8003476 <UART_SetConfig+0x2be>
 8003462:	e00b      	b.n	800347c <UART_SetConfig+0x2c4>
 8003464:	2300      	movs	r3, #0
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e04d      	b.n	8003506 <UART_SetConfig+0x34e>
 800346a:	2302      	movs	r3, #2
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e04a      	b.n	8003506 <UART_SetConfig+0x34e>
 8003470:	2304      	movs	r3, #4
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	e047      	b.n	8003506 <UART_SetConfig+0x34e>
 8003476:	2308      	movs	r3, #8
 8003478:	77fb      	strb	r3, [r7, #31]
 800347a:	e044      	b.n	8003506 <UART_SetConfig+0x34e>
 800347c:	2310      	movs	r3, #16
 800347e:	77fb      	strb	r3, [r7, #31]
 8003480:	bf00      	nop
 8003482:	e040      	b.n	8003506 <UART_SetConfig+0x34e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a11      	ldr	r2, [pc, #68]	; (80034d0 <UART_SetConfig+0x318>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d139      	bne.n	8003502 <UART_SetConfig+0x34a>
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <UART_SetConfig+0x2fc>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800349c:	d027      	beq.n	80034ee <UART_SetConfig+0x336>
 800349e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a2:	d817      	bhi.n	80034d4 <UART_SetConfig+0x31c>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01c      	beq.n	80034e2 <UART_SetConfig+0x32a>
 80034a8:	e027      	b.n	80034fa <UART_SetConfig+0x342>
 80034aa:	bf00      	nop
 80034ac:	efff69f3 	.word	0xefff69f3
 80034b0:	40011000 	.word	0x40011000
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40004400 	.word	0x40004400
 80034bc:	40004800 	.word	0x40004800
 80034c0:	40004c00 	.word	0x40004c00
 80034c4:	40005000 	.word	0x40005000
 80034c8:	40011400 	.word	0x40011400
 80034cc:	40007800 	.word	0x40007800
 80034d0:	40007c00 	.word	0x40007c00
 80034d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d8:	d006      	beq.n	80034e8 <UART_SetConfig+0x330>
 80034da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034de:	d009      	beq.n	80034f4 <UART_SetConfig+0x33c>
 80034e0:	e00b      	b.n	80034fa <UART_SetConfig+0x342>
 80034e2:	2300      	movs	r3, #0
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e00e      	b.n	8003506 <UART_SetConfig+0x34e>
 80034e8:	2302      	movs	r3, #2
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e00b      	b.n	8003506 <UART_SetConfig+0x34e>
 80034ee:	2304      	movs	r3, #4
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e008      	b.n	8003506 <UART_SetConfig+0x34e>
 80034f4:	2308      	movs	r3, #8
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e005      	b.n	8003506 <UART_SetConfig+0x34e>
 80034fa:	2310      	movs	r3, #16
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	bf00      	nop
 8003500:	e001      	b.n	8003506 <UART_SetConfig+0x34e>
 8003502:	2310      	movs	r3, #16
 8003504:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800350e:	d17c      	bne.n	800360a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003510:	7ffb      	ldrb	r3, [r7, #31]
 8003512:	2b08      	cmp	r3, #8
 8003514:	d859      	bhi.n	80035ca <UART_SetConfig+0x412>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0x364>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003541 	.word	0x08003541
 8003520:	0800355f 	.word	0x0800355f
 8003524:	0800357d 	.word	0x0800357d
 8003528:	080035cb 	.word	0x080035cb
 800352c:	08003595 	.word	0x08003595
 8003530:	080035cb 	.word	0x080035cb
 8003534:	080035cb 	.word	0x080035cb
 8003538:	080035cb 	.word	0x080035cb
 800353c:	080035b3 	.word	0x080035b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003540:	f7ff f90c 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 8003544:	4603      	mov	r3, r0
 8003546:	005a      	lsls	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	441a      	add	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	b29b      	uxth	r3, r3
 800355a:	61bb      	str	r3, [r7, #24]
        break;
 800355c:	e038      	b.n	80035d0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800355e:	f7ff f911 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 8003562:	4603      	mov	r3, r0
 8003564:	005a      	lsls	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	441a      	add	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	b29b      	uxth	r3, r3
 8003578:	61bb      	str	r3, [r7, #24]
        break;
 800357a:	e029      	b.n	80035d0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	085a      	lsrs	r2, r3, #1
 8003582:	4b5d      	ldr	r3, [pc, #372]	; (80036f8 <UART_SetConfig+0x540>)
 8003584:	4413      	add	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6852      	ldr	r2, [r2, #4]
 800358a:	fbb3 f3f2 	udiv	r3, r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	61bb      	str	r3, [r7, #24]
        break;
 8003592:	e01d      	b.n	80035d0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003594:	f7fe fffe 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8003598:	4603      	mov	r3, r0
 800359a:	005a      	lsls	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	441a      	add	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	61bb      	str	r3, [r7, #24]
        break;
 80035b0:	e00e      	b.n	80035d0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	61bb      	str	r3, [r7, #24]
        break;
 80035c8:	e002      	b.n	80035d0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
        break;
 80035ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b0f      	cmp	r3, #15
 80035d4:	d916      	bls.n	8003604 <UART_SetConfig+0x44c>
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d212      	bcs.n	8003604 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	f023 030f 	bic.w	r3, r3, #15
 80035e6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	89fb      	ldrh	r3, [r7, #14]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	89fa      	ldrh	r2, [r7, #14]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	e06e      	b.n	80036e2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	75fb      	strb	r3, [r7, #23]
 8003608:	e06b      	b.n	80036e2 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800360a:	7ffb      	ldrb	r3, [r7, #31]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d857      	bhi.n	80036c0 <UART_SetConfig+0x508>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <UART_SetConfig+0x460>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	0800363d 	.word	0x0800363d
 800361c:	08003659 	.word	0x08003659
 8003620:	08003675 	.word	0x08003675
 8003624:	080036c1 	.word	0x080036c1
 8003628:	0800368d 	.word	0x0800368d
 800362c:	080036c1 	.word	0x080036c1
 8003630:	080036c1 	.word	0x080036c1
 8003634:	080036c1 	.word	0x080036c1
 8003638:	080036a9 	.word	0x080036a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800363c:	f7ff f88e 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 8003640:	4602      	mov	r2, r0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	441a      	add	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003652:	b29b      	uxth	r3, r3
 8003654:	61bb      	str	r3, [r7, #24]
        break;
 8003656:	e036      	b.n	80036c6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003658:	f7ff f894 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 800365c:	4602      	mov	r2, r0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	441a      	add	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	fbb2 f3f3 	udiv	r3, r2, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	61bb      	str	r3, [r7, #24]
        break;
 8003672:	e028      	b.n	80036c6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	085a      	lsrs	r2, r3, #1
 800367a:	4b20      	ldr	r3, [pc, #128]	; (80036fc <UART_SetConfig+0x544>)
 800367c:	4413      	add	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6852      	ldr	r2, [r2, #4]
 8003682:	fbb3 f3f2 	udiv	r3, r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	61bb      	str	r3, [r7, #24]
        break;
 800368a:	e01c      	b.n	80036c6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800368c:	f7fe ff82 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	441a      	add	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	61bb      	str	r3, [r7, #24]
        break;
 80036a6:	e00e      	b.n	80036c6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	085b      	lsrs	r3, r3, #1
 80036ae:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	61bb      	str	r3, [r7, #24]
        break;
 80036be:	e002      	b.n	80036c6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	75fb      	strb	r3, [r7, #23]
        break;
 80036c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b0f      	cmp	r3, #15
 80036ca:	d908      	bls.n	80036de <UART_SetConfig+0x526>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d2:	d204      	bcs.n	80036de <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	e001      	b.n	80036e2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	01e84800 	.word	0x01e84800
 80036fc:	00f42400 	.word	0x00f42400

08003700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01a      	beq.n	8003816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037fe:	d10a      	bne.n	8003816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
  }
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af02      	add	r7, sp, #8
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003852:	f7fc ff1f 	bl	8000694 <HAL_GetTick>
 8003856:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b08      	cmp	r3, #8
 8003864:	d10e      	bne.n	8003884 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003866:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f814 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e00a      	b.n	800389a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4613      	mov	r3, r2
 80038b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b2:	e02a      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d026      	beq.n	800390a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038bc:	f7fc feea 	bl	8000694 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d302      	bcc.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11b      	bne.n	800390a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e00f      	b.n	800392a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4013      	ands	r3, r2
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	429a      	cmp	r2, r3
 8003918:	bf0c      	ite	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	2300      	movne	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	429a      	cmp	r2, r3
 8003926:	d0c5      	beq.n	80038b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_ADC_ConvCpltCallback>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1)								//check which adc made interrupt
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <HAL_ADC_ConvCpltCallback+0x44>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d113      	bne.n	800396c <HAL_ADC_ConvCpltCallback+0x38>
	{
		for(int i = 0; i < BUFF_SIZE; i++)
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e00a      	b.n	8003960 <HAL_ADC_ConvCpltCallback+0x2c>
		{
			adcData[i] = adcBuff[i];
 800394a:	4a0c      	ldr	r2, [pc, #48]	; (800397c <HAL_ADC_ConvCpltCallback+0x48>)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003952:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <HAL_ADC_ConvCpltCallback+0x4c>)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < BUFF_SIZE; i++)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3301      	adds	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b63      	cmp	r3, #99	; 0x63
 8003964:	ddf1      	ble.n	800394a <HAL_ADC_ConvCpltCallback+0x16>
		}
		convEnd = 1;
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <HAL_ADC_ConvCpltCallback+0x50>)
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
	}
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	200002b0 	.word	0x200002b0
 800397c:	20000090 	.word	0x20000090
 8003980:	20000158 	.word	0x20000158
 8003984:	2000008c 	.word	0x2000008c

08003988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800398e:	f7fc fe2f 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003992:	f000 f839 	bl	8003a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003996:	f000 f977 	bl	8003c88 <MX_GPIO_Init>
  MX_DMA_Init();
 800399a:	f000 f957 	bl	8003c4c <MX_DMA_Init>
  MX_ADC1_Init();
 800399e:	f000 f8c5 	bl	8003b2c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80039a2:	f000 f923 	bl	8003bec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuff, BUFF_SIZE);			//start ADC conversation
 80039a6:	2264      	movs	r2, #100	; 0x64
 80039a8:	4911      	ldr	r1, [pc, #68]	; (80039f0 <main+0x68>)
 80039aa:	4812      	ldr	r0, [pc, #72]	; (80039f4 <main+0x6c>)
 80039ac:	f7fd f826 	bl	80009fc <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(convEnd == 1)					//check is conv completed
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <main+0x70>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d1fb      	bne.n	80039b0 <main+0x28>
	  {
		  char txt[30];
		  sprintf(txt, "ADC Val: %d %d\n\r", adcData[0], adcData[1]);			//print value in a text
 80039b8:	4b10      	ldr	r3, [pc, #64]	; (80039fc <main+0x74>)
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <main+0x74>)
 80039c0:	885b      	ldrh	r3, [r3, #2]
 80039c2:	4638      	mov	r0, r7
 80039c4:	490e      	ldr	r1, [pc, #56]	; (8003a00 <main+0x78>)
 80039c6:	f000 fc07 	bl	80041d8 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t *)txt, strlen(txt), 100);		//send text over UART
 80039ca:	463b      	mov	r3, r7
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fc fc37 	bl	8000240 <strlen>
 80039d2:	4603      	mov	r3, r0
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	4639      	mov	r1, r7
 80039d8:	2364      	movs	r3, #100	; 0x64
 80039da:	480a      	ldr	r0, [pc, #40]	; (8003a04 <main+0x7c>)
 80039dc:	f7ff fb5a 	bl	8003094 <HAL_UART_Transmit>
		  HAL_Delay(500);									//wait 100ms
 80039e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039e4:	f7fc fe62 	bl	80006ac <HAL_Delay>
		  convEnd = 0;
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <main+0x70>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
	  if(convEnd == 1)					//check is conv completed
 80039ee:	e7df      	b.n	80039b0 <main+0x28>
 80039f0:	20000090 	.word	0x20000090
 80039f4:	200002b0 	.word	0x200002b0
 80039f8:	2000008c 	.word	0x2000008c
 80039fc:	20000158 	.word	0x20000158
 8003a00:	080049fc 	.word	0x080049fc
 8003a04:	20000230 	.word	0x20000230

08003a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b0b8      	sub	sp, #224	; 0xe0
 8003a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a0e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a12:	2234      	movs	r2, #52	; 0x34
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fbd6 	bl	80041c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a2c:	f107 0308 	add.w	r3, r7, #8
 8003a30:	2290      	movs	r2, #144	; 0x90
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fbc7 	bl	80041c8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003a3a:	f7fe f9f1 	bl	8001e20 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	4b39      	ldr	r3, [pc, #228]	; (8003b24 <SystemClock_Config+0x11c>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a38      	ldr	r2, [pc, #224]	; (8003b24 <SystemClock_Config+0x11c>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4a:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <SystemClock_Config+0x11c>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a56:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <SystemClock_Config+0x120>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a33      	ldr	r2, [pc, #204]	; (8003b28 <SystemClock_Config+0x120>)
 8003a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <SystemClock_Config+0x120>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003a74:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003a90:	23d8      	movs	r3, #216	; 0xd8
 8003a92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a96:	2302      	movs	r3, #2
 8003a98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aa2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fa1a 	bl	8001ee0 <HAL_RCC_OscConfig>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003ab2:	f000 f98b 	bl	8003dcc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003ab6:	f7fe f9c3 	bl	8001e40 <HAL_PWREx_EnableOverDrive>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003ac0:	f000 f984 	bl	8003dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ac4:	230f      	movs	r3, #15
 8003ac6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aca:	2302      	movs	r3, #2
 8003acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ad6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003ae6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003aea:	2107      	movs	r1, #7
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fc69 	bl	80023c4 <HAL_RCC_ClockConfig>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003af8:	f000 f968 	bl	8003dcc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b00:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003b02:	2300      	movs	r3, #0
 8003b04:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fe4e 	bl	80027ac <HAL_RCCEx_PeriphCLKConfig>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <SystemClock_Config+0x112>
  {
    Error_Handler();
 8003b16:	f000 f959 	bl	8003dcc <Error_Handler>
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	37e0      	adds	r7, #224	; 0xe0
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40007000 	.word	0x40007000

08003b2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b32:	463b      	mov	r3, r7
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b40:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <MX_ADC1_Init+0xb8>)
 8003b42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b44:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b4c:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003b52:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003b58:	4b21      	ldr	r3, [pc, #132]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b6c:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <MX_ADC1_Init+0xbc>)
 8003b70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003b7e:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b86:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b8c:	4814      	ldr	r0, [pc, #80]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003b8e:	f7fc fdaf 	bl	80006f0 <HAL_ADC_Init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003b98:	f000 f918 	bl	8003dcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003ba4:	2306      	movs	r3, #6
 8003ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ba8:	463b      	mov	r3, r7
 8003baa:	4619      	mov	r1, r3
 8003bac:	480c      	ldr	r0, [pc, #48]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003bae:	f7fd f831 	bl	8000c14 <HAL_ADC_ConfigChannel>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003bb8:	f000 f908 	bl	8003dcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003bbc:	230a      	movs	r3, #10
 8003bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bc4:	463b      	mov	r3, r7
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4805      	ldr	r0, [pc, #20]	; (8003be0 <MX_ADC1_Init+0xb4>)
 8003bca:	f7fd f823 	bl	8000c14 <HAL_ADC_ConfigChannel>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003bd4:	f000 f8fa 	bl	8003dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	200002b0 	.word	0x200002b0
 8003be4:	40012000 	.word	0x40012000
 8003be8:	0f000001 	.word	0x0f000001

08003bec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003bf0:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <MX_USART3_UART_Init+0x58>)
 8003bf2:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <MX_USART3_UART_Init+0x5c>)
 8003bf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <MX_USART3_UART_Init+0x58>)
 8003bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003bfe:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <MX_USART3_UART_Init+0x58>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <MX_USART3_UART_Init+0x58>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <MX_USART3_UART_Init+0x58>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <MX_USART3_UART_Init+0x58>)
 8003c12:	220c      	movs	r2, #12
 8003c14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <MX_USART3_UART_Init+0x58>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <MX_USART3_UART_Init+0x58>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <MX_USART3_UART_Init+0x58>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <MX_USART3_UART_Init+0x58>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c2e:	4805      	ldr	r0, [pc, #20]	; (8003c44 <MX_USART3_UART_Init+0x58>)
 8003c30:	f7ff f9e2 	bl	8002ff8 <HAL_UART_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003c3a:	f000 f8c7 	bl	8003dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000230 	.word	0x20000230
 8003c48:	40004800 	.word	0x40004800

08003c4c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <MX_DMA_Init+0x38>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4a0b      	ldr	r2, [pc, #44]	; (8003c84 <MX_DMA_Init+0x38>)
 8003c58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <MX_DMA_Init+0x38>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c66:	607b      	str	r3, [r7, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	2038      	movs	r0, #56	; 0x38
 8003c70:	f7fd fb65 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003c74:	2038      	movs	r0, #56	; 0x38
 8003c76:	f7fd fb7e 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800

08003c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08c      	sub	sp, #48	; 0x30
 8003c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8e:	f107 031c 	add.w	r3, r7, #28
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	609a      	str	r2, [r3, #8]
 8003c9a:	60da      	str	r2, [r3, #12]
 8003c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c9e:	4b46      	ldr	r3, [pc, #280]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a45      	ldr	r2, [pc, #276]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003ca4:	f043 0304 	orr.w	r3, r3, #4
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cb6:	4b40      	ldr	r3, [pc, #256]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cce:	4b3a      	ldr	r3, [pc, #232]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a39      	ldr	r2, [pc, #228]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cda:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce6:	4b34      	ldr	r3, [pc, #208]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	4a33      	ldr	r2, [pc, #204]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003cec:	f043 0302 	orr.w	r3, r3, #2
 8003cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf2:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cfe:	4b2e      	ldr	r3, [pc, #184]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4a2d      	ldr	r2, [pc, #180]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003d04:	f043 0308 	orr.w	r3, r3, #8
 8003d08:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d16:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	4a27      	ldr	r2, [pc, #156]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d20:	6313      	str	r3, [r2, #48]	; 0x30
 8003d22:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <MX_GPIO_Init+0x130>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003d34:	4821      	ldr	r0, [pc, #132]	; (8003dbc <MX_GPIO_Init+0x134>)
 8003d36:	f7fe f859 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2140      	movs	r1, #64	; 0x40
 8003d3e:	4820      	ldr	r0, [pc, #128]	; (8003dc0 <MX_GPIO_Init+0x138>)
 8003d40:	f7fe f854 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d4a:	4b1e      	ldr	r3, [pc, #120]	; (8003dc4 <MX_GPIO_Init+0x13c>)
 8003d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003d52:	f107 031c 	add.w	r3, r7, #28
 8003d56:	4619      	mov	r1, r3
 8003d58:	481b      	ldr	r0, [pc, #108]	; (8003dc8 <MX_GPIO_Init+0x140>)
 8003d5a:	f7fd fe9d 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003d5e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8003d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d64:	2301      	movs	r3, #1
 8003d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d70:	f107 031c 	add.w	r3, r7, #28
 8003d74:	4619      	mov	r1, r3
 8003d76:	4811      	ldr	r0, [pc, #68]	; (8003dbc <MX_GPIO_Init+0x134>)
 8003d78:	f7fd fe8e 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003d7c:	2340      	movs	r3, #64	; 0x40
 8003d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d80:	2301      	movs	r3, #1
 8003d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003d8c:	f107 031c 	add.w	r3, r7, #28
 8003d90:	4619      	mov	r1, r3
 8003d92:	480b      	ldr	r0, [pc, #44]	; (8003dc0 <MX_GPIO_Init+0x138>)
 8003d94:	f7fd fe80 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003da4:	f107 031c 	add.w	r3, r7, #28
 8003da8:	4619      	mov	r1, r3
 8003daa:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <MX_GPIO_Init+0x138>)
 8003dac:	f7fd fe74 	bl	8001a98 <HAL_GPIO_Init>

}
 8003db0:	bf00      	nop
 8003db2:	3730      	adds	r7, #48	; 0x30
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	40021800 	.word	0x40021800
 8003dc4:	10110000 	.word	0x10110000
 8003dc8:	40020800 	.word	0x40020800

08003dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <HAL_MspInit+0x44>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <HAL_MspInit+0x44>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <HAL_MspInit+0x44>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	607b      	str	r3, [r7, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_MspInit+0x44>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <HAL_MspInit+0x44>)
 8003e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e04:	6453      	str	r3, [r2, #68]	; 0x44
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_MspInit+0x44>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800

08003e24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	; 0x28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a3d      	ldr	r2, [pc, #244]	; (8003f38 <HAL_ADC_MspInit+0x114>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d173      	bne.n	8003f2e <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e46:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <HAL_ADC_MspInit+0x118>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	4a3c      	ldr	r2, [pc, #240]	; (8003f3c <HAL_ADC_MspInit+0x118>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e50:	6453      	str	r3, [r2, #68]	; 0x44
 8003e52:	4b3a      	ldr	r3, [pc, #232]	; (8003f3c <HAL_ADC_MspInit+0x118>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5e:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <HAL_ADC_MspInit+0x118>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	4a36      	ldr	r2, [pc, #216]	; (8003f3c <HAL_ADC_MspInit+0x118>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6a:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_ADC_MspInit+0x118>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e76:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_ADC_MspInit+0x118>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	4a30      	ldr	r2, [pc, #192]	; (8003f3c <HAL_ADC_MspInit+0x118>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6313      	str	r3, [r2, #48]	; 0x30
 8003e82:	4b2e      	ldr	r3, [pc, #184]	; (8003f3c <HAL_ADC_MspInit+0x118>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e92:	2303      	movs	r3, #3
 8003e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4827      	ldr	r0, [pc, #156]	; (8003f40 <HAL_ADC_MspInit+0x11c>)
 8003ea2:	f7fd fdf9 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb2:	f107 0314 	add.w	r3, r7, #20
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4822      	ldr	r0, [pc, #136]	; (8003f44 <HAL_ADC_MspInit+0x120>)
 8003eba:	f7fd fded 	bl	8001a98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003ebe:	4b22      	ldr	r3, [pc, #136]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003ec0:	4a22      	ldr	r2, [pc, #136]	; (8003f4c <HAL_ADC_MspInit+0x128>)
 8003ec2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003ec4:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eca:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003edc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ede:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ee4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ee6:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003ee8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003eee:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ef4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003efc:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f02:	4811      	ldr	r0, [pc, #68]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003f04:	f7fd fa52 	bl	80013ac <HAL_DMA_Init>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8003f0e:	f7ff ff5d 	bl	8003dcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a0c      	ldr	r2, [pc, #48]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
 8003f18:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <HAL_ADC_MspInit+0x124>)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2100      	movs	r1, #0
 8003f22:	2012      	movs	r0, #18
 8003f24:	f7fd fa0b 	bl	800133e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003f28:	2012      	movs	r0, #18
 8003f2a:	f7fd fa24 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f2e:	bf00      	nop
 8003f30:	3728      	adds	r7, #40	; 0x28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40012000 	.word	0x40012000
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40020800 	.word	0x40020800
 8003f44:	40020000 	.word	0x40020000
 8003f48:	200002f8 	.word	0x200002f8
 8003f4c:	40026410 	.word	0x40026410

08003f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <HAL_UART_MspInit+0x7c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d128      	bne.n	8003fc4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f72:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	4a10      	ldr	r2, [pc, #64]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f90:	f043 0308 	orr.w	r3, r3, #8
 8003f94:	6313      	str	r3, [r2, #48]	; 0x30
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <HAL_UART_MspInit+0x80>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003fa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fb4:	2307      	movs	r3, #7
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fb8:	f107 0314 	add.w	r3, r7, #20
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4805      	ldr	r0, [pc, #20]	; (8003fd4 <HAL_UART_MspInit+0x84>)
 8003fc0:	f7fd fd6a 	bl	8001a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003fc4:	bf00      	nop
 8003fc6:	3728      	adds	r7, #40	; 0x28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40004800 	.word	0x40004800
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40020c00 	.word	0x40020c00

08003fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fea:	e7fe      	b.n	8003fea <HardFault_Handler+0x4>

08003fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ff0:	e7fe      	b.n	8003ff0 <MemManage_Handler+0x4>

08003ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ff6:	e7fe      	b.n	8003ff6 <BusFault_Handler+0x4>

08003ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ffc:	e7fe      	b.n	8003ffc <UsageFault_Handler+0x4>

08003ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800402c:	f7fc fb1e 	bl	800066c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004030:	bf00      	nop
 8004032:	bd80      	pop	{r7, pc}

08004034 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <ADC_IRQHandler+0x10>)
 800403a:	f7fc fb9d 	bl	8000778 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	200002b0 	.word	0x200002b0

08004048 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <DMA2_Stream0_IRQHandler+0x10>)
 800404e:	f7fd fabb 	bl	80015c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200002f8 	.word	0x200002f8

0800405c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <_sbrk+0x50>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <_sbrk+0x16>
		heap_end = &end;
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <_sbrk+0x50>)
 800406e:	4a10      	ldr	r2, [pc, #64]	; (80040b0 <_sbrk+0x54>)
 8004070:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <_sbrk+0x50>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <_sbrk+0x50>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4413      	add	r3, r2
 8004080:	466a      	mov	r2, sp
 8004082:	4293      	cmp	r3, r2
 8004084:	d907      	bls.n	8004096 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004086:	f000 f875 	bl	8004174 <__errno>
 800408a:	4602      	mov	r2, r0
 800408c:	230c      	movs	r3, #12
 800408e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004090:	f04f 33ff 	mov.w	r3, #4294967295
 8004094:	e006      	b.n	80040a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <_sbrk+0x50>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	4a03      	ldr	r2, [pc, #12]	; (80040ac <_sbrk+0x50>)
 80040a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000220 	.word	0x20000220
 80040b0:	20000360 	.word	0x20000360

080040b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040b8:	4b15      	ldr	r3, [pc, #84]	; (8004110 <SystemInit+0x5c>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	4a14      	ldr	r2, [pc, #80]	; (8004110 <SystemInit+0x5c>)
 80040c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80040c8:	4b12      	ldr	r3, [pc, #72]	; (8004114 <SystemInit+0x60>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a11      	ldr	r2, [pc, #68]	; (8004114 <SystemInit+0x60>)
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80040d4:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <SystemInit+0x60>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <SystemInit+0x60>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	490d      	ldr	r1, [pc, #52]	; (8004114 <SystemInit+0x60>)
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <SystemInit+0x64>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <SystemInit+0x60>)
 80040e8:	4a0c      	ldr	r2, [pc, #48]	; (800411c <SystemInit+0x68>)
 80040ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <SystemInit+0x60>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a08      	ldr	r2, [pc, #32]	; (8004114 <SystemInit+0x60>)
 80040f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <SystemInit+0x60>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <SystemInit+0x5c>)
 8004100:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004104:	609a      	str	r2, [r3, #8]
#endif
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	e000ed00 	.word	0xe000ed00
 8004114:	40023800 	.word	0x40023800
 8004118:	fef6ffff 	.word	0xfef6ffff
 800411c:	24003010 	.word	0x24003010

08004120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004158 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004124:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004126:	e003      	b.n	8004130 <LoopCopyDataInit>

08004128 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004128:	4b0c      	ldr	r3, [pc, #48]	; (800415c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800412a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800412c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800412e:	3104      	adds	r1, #4

08004130 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004130:	480b      	ldr	r0, [pc, #44]	; (8004160 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004134:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004136:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004138:	d3f6      	bcc.n	8004128 <CopyDataInit>
  ldr  r2, =_sbss
 800413a:	4a0b      	ldr	r2, [pc, #44]	; (8004168 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800413c:	e002      	b.n	8004144 <LoopFillZerobss>

0800413e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800413e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004140:	f842 3b04 	str.w	r3, [r2], #4

08004144 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004144:	4b09      	ldr	r3, [pc, #36]	; (800416c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004146:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004148:	d3f9      	bcc.n	800413e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800414a:	f7ff ffb3 	bl	80040b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800414e:	f000 f817 	bl	8004180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004152:	f7ff fc19 	bl	8003988 <main>
  bx  lr    
 8004156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004158:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800415c:	08004a74 	.word	0x08004a74
  ldr  r0, =_sdata
 8004160:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004164:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004168:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800416c:	2000035c 	.word	0x2000035c

08004170 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004170:	e7fe      	b.n	8004170 <CAN1_RX0_IRQHandler>
	...

08004174 <__errno>:
 8004174:	4b01      	ldr	r3, [pc, #4]	; (800417c <__errno+0x8>)
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	2000000c 	.word	0x2000000c

08004180 <__libc_init_array>:
 8004180:	b570      	push	{r4, r5, r6, lr}
 8004182:	4e0d      	ldr	r6, [pc, #52]	; (80041b8 <__libc_init_array+0x38>)
 8004184:	4c0d      	ldr	r4, [pc, #52]	; (80041bc <__libc_init_array+0x3c>)
 8004186:	1ba4      	subs	r4, r4, r6
 8004188:	10a4      	asrs	r4, r4, #2
 800418a:	2500      	movs	r5, #0
 800418c:	42a5      	cmp	r5, r4
 800418e:	d109      	bne.n	80041a4 <__libc_init_array+0x24>
 8004190:	4e0b      	ldr	r6, [pc, #44]	; (80041c0 <__libc_init_array+0x40>)
 8004192:	4c0c      	ldr	r4, [pc, #48]	; (80041c4 <__libc_init_array+0x44>)
 8004194:	f000 fc26 	bl	80049e4 <_init>
 8004198:	1ba4      	subs	r4, r4, r6
 800419a:	10a4      	asrs	r4, r4, #2
 800419c:	2500      	movs	r5, #0
 800419e:	42a5      	cmp	r5, r4
 80041a0:	d105      	bne.n	80041ae <__libc_init_array+0x2e>
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
 80041a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041a8:	4798      	blx	r3
 80041aa:	3501      	adds	r5, #1
 80041ac:	e7ee      	b.n	800418c <__libc_init_array+0xc>
 80041ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041b2:	4798      	blx	r3
 80041b4:	3501      	adds	r5, #1
 80041b6:	e7f2      	b.n	800419e <__libc_init_array+0x1e>
 80041b8:	08004a6c 	.word	0x08004a6c
 80041bc:	08004a6c 	.word	0x08004a6c
 80041c0:	08004a6c 	.word	0x08004a6c
 80041c4:	08004a70 	.word	0x08004a70

080041c8 <memset>:
 80041c8:	4402      	add	r2, r0
 80041ca:	4603      	mov	r3, r0
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d100      	bne.n	80041d2 <memset+0xa>
 80041d0:	4770      	bx	lr
 80041d2:	f803 1b01 	strb.w	r1, [r3], #1
 80041d6:	e7f9      	b.n	80041cc <memset+0x4>

080041d8 <siprintf>:
 80041d8:	b40e      	push	{r1, r2, r3}
 80041da:	b500      	push	{lr}
 80041dc:	b09c      	sub	sp, #112	; 0x70
 80041de:	ab1d      	add	r3, sp, #116	; 0x74
 80041e0:	9002      	str	r0, [sp, #8]
 80041e2:	9006      	str	r0, [sp, #24]
 80041e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041e8:	4809      	ldr	r0, [pc, #36]	; (8004210 <siprintf+0x38>)
 80041ea:	9107      	str	r1, [sp, #28]
 80041ec:	9104      	str	r1, [sp, #16]
 80041ee:	4909      	ldr	r1, [pc, #36]	; (8004214 <siprintf+0x3c>)
 80041f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80041f4:	9105      	str	r1, [sp, #20]
 80041f6:	6800      	ldr	r0, [r0, #0]
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	a902      	add	r1, sp, #8
 80041fc:	f000 f866 	bl	80042cc <_svfiprintf_r>
 8004200:	9b02      	ldr	r3, [sp, #8]
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	b01c      	add	sp, #112	; 0x70
 8004208:	f85d eb04 	ldr.w	lr, [sp], #4
 800420c:	b003      	add	sp, #12
 800420e:	4770      	bx	lr
 8004210:	2000000c 	.word	0x2000000c
 8004214:	ffff0208 	.word	0xffff0208

08004218 <__ssputs_r>:
 8004218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800421c:	688e      	ldr	r6, [r1, #8]
 800421e:	429e      	cmp	r6, r3
 8004220:	4682      	mov	sl, r0
 8004222:	460c      	mov	r4, r1
 8004224:	4690      	mov	r8, r2
 8004226:	4699      	mov	r9, r3
 8004228:	d837      	bhi.n	800429a <__ssputs_r+0x82>
 800422a:	898a      	ldrh	r2, [r1, #12]
 800422c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004230:	d031      	beq.n	8004296 <__ssputs_r+0x7e>
 8004232:	6825      	ldr	r5, [r4, #0]
 8004234:	6909      	ldr	r1, [r1, #16]
 8004236:	1a6f      	subs	r7, r5, r1
 8004238:	6965      	ldr	r5, [r4, #20]
 800423a:	2302      	movs	r3, #2
 800423c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004240:	fb95 f5f3 	sdiv	r5, r5, r3
 8004244:	f109 0301 	add.w	r3, r9, #1
 8004248:	443b      	add	r3, r7
 800424a:	429d      	cmp	r5, r3
 800424c:	bf38      	it	cc
 800424e:	461d      	movcc	r5, r3
 8004250:	0553      	lsls	r3, r2, #21
 8004252:	d530      	bpl.n	80042b6 <__ssputs_r+0x9e>
 8004254:	4629      	mov	r1, r5
 8004256:	f000 fb2b 	bl	80048b0 <_malloc_r>
 800425a:	4606      	mov	r6, r0
 800425c:	b950      	cbnz	r0, 8004274 <__ssputs_r+0x5c>
 800425e:	230c      	movs	r3, #12
 8004260:	f8ca 3000 	str.w	r3, [sl]
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426a:	81a3      	strh	r3, [r4, #12]
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004274:	463a      	mov	r2, r7
 8004276:	6921      	ldr	r1, [r4, #16]
 8004278:	f000 faa8 	bl	80047cc <memcpy>
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004286:	81a3      	strh	r3, [r4, #12]
 8004288:	6126      	str	r6, [r4, #16]
 800428a:	6165      	str	r5, [r4, #20]
 800428c:	443e      	add	r6, r7
 800428e:	1bed      	subs	r5, r5, r7
 8004290:	6026      	str	r6, [r4, #0]
 8004292:	60a5      	str	r5, [r4, #8]
 8004294:	464e      	mov	r6, r9
 8004296:	454e      	cmp	r6, r9
 8004298:	d900      	bls.n	800429c <__ssputs_r+0x84>
 800429a:	464e      	mov	r6, r9
 800429c:	4632      	mov	r2, r6
 800429e:	4641      	mov	r1, r8
 80042a0:	6820      	ldr	r0, [r4, #0]
 80042a2:	f000 fa9e 	bl	80047e2 <memmove>
 80042a6:	68a3      	ldr	r3, [r4, #8]
 80042a8:	1b9b      	subs	r3, r3, r6
 80042aa:	60a3      	str	r3, [r4, #8]
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	441e      	add	r6, r3
 80042b0:	6026      	str	r6, [r4, #0]
 80042b2:	2000      	movs	r0, #0
 80042b4:	e7dc      	b.n	8004270 <__ssputs_r+0x58>
 80042b6:	462a      	mov	r2, r5
 80042b8:	f000 fb54 	bl	8004964 <_realloc_r>
 80042bc:	4606      	mov	r6, r0
 80042be:	2800      	cmp	r0, #0
 80042c0:	d1e2      	bne.n	8004288 <__ssputs_r+0x70>
 80042c2:	6921      	ldr	r1, [r4, #16]
 80042c4:	4650      	mov	r0, sl
 80042c6:	f000 faa5 	bl	8004814 <_free_r>
 80042ca:	e7c8      	b.n	800425e <__ssputs_r+0x46>

080042cc <_svfiprintf_r>:
 80042cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d0:	461d      	mov	r5, r3
 80042d2:	898b      	ldrh	r3, [r1, #12]
 80042d4:	061f      	lsls	r7, r3, #24
 80042d6:	b09d      	sub	sp, #116	; 0x74
 80042d8:	4680      	mov	r8, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	4616      	mov	r6, r2
 80042de:	d50f      	bpl.n	8004300 <_svfiprintf_r+0x34>
 80042e0:	690b      	ldr	r3, [r1, #16]
 80042e2:	b96b      	cbnz	r3, 8004300 <_svfiprintf_r+0x34>
 80042e4:	2140      	movs	r1, #64	; 0x40
 80042e6:	f000 fae3 	bl	80048b0 <_malloc_r>
 80042ea:	6020      	str	r0, [r4, #0]
 80042ec:	6120      	str	r0, [r4, #16]
 80042ee:	b928      	cbnz	r0, 80042fc <_svfiprintf_r+0x30>
 80042f0:	230c      	movs	r3, #12
 80042f2:	f8c8 3000 	str.w	r3, [r8]
 80042f6:	f04f 30ff 	mov.w	r0, #4294967295
 80042fa:	e0c8      	b.n	800448e <_svfiprintf_r+0x1c2>
 80042fc:	2340      	movs	r3, #64	; 0x40
 80042fe:	6163      	str	r3, [r4, #20]
 8004300:	2300      	movs	r3, #0
 8004302:	9309      	str	r3, [sp, #36]	; 0x24
 8004304:	2320      	movs	r3, #32
 8004306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800430a:	2330      	movs	r3, #48	; 0x30
 800430c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004310:	9503      	str	r5, [sp, #12]
 8004312:	f04f 0b01 	mov.w	fp, #1
 8004316:	4637      	mov	r7, r6
 8004318:	463d      	mov	r5, r7
 800431a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800431e:	b10b      	cbz	r3, 8004324 <_svfiprintf_r+0x58>
 8004320:	2b25      	cmp	r3, #37	; 0x25
 8004322:	d13e      	bne.n	80043a2 <_svfiprintf_r+0xd6>
 8004324:	ebb7 0a06 	subs.w	sl, r7, r6
 8004328:	d00b      	beq.n	8004342 <_svfiprintf_r+0x76>
 800432a:	4653      	mov	r3, sl
 800432c:	4632      	mov	r2, r6
 800432e:	4621      	mov	r1, r4
 8004330:	4640      	mov	r0, r8
 8004332:	f7ff ff71 	bl	8004218 <__ssputs_r>
 8004336:	3001      	adds	r0, #1
 8004338:	f000 80a4 	beq.w	8004484 <_svfiprintf_r+0x1b8>
 800433c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800433e:	4453      	add	r3, sl
 8004340:	9309      	str	r3, [sp, #36]	; 0x24
 8004342:	783b      	ldrb	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 809d 	beq.w	8004484 <_svfiprintf_r+0x1b8>
 800434a:	2300      	movs	r3, #0
 800434c:	f04f 32ff 	mov.w	r2, #4294967295
 8004350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004354:	9304      	str	r3, [sp, #16]
 8004356:	9307      	str	r3, [sp, #28]
 8004358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800435c:	931a      	str	r3, [sp, #104]	; 0x68
 800435e:	462f      	mov	r7, r5
 8004360:	2205      	movs	r2, #5
 8004362:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004366:	4850      	ldr	r0, [pc, #320]	; (80044a8 <_svfiprintf_r+0x1dc>)
 8004368:	f7fb ff72 	bl	8000250 <memchr>
 800436c:	9b04      	ldr	r3, [sp, #16]
 800436e:	b9d0      	cbnz	r0, 80043a6 <_svfiprintf_r+0xda>
 8004370:	06d9      	lsls	r1, r3, #27
 8004372:	bf44      	itt	mi
 8004374:	2220      	movmi	r2, #32
 8004376:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800437a:	071a      	lsls	r2, r3, #28
 800437c:	bf44      	itt	mi
 800437e:	222b      	movmi	r2, #43	; 0x2b
 8004380:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004384:	782a      	ldrb	r2, [r5, #0]
 8004386:	2a2a      	cmp	r2, #42	; 0x2a
 8004388:	d015      	beq.n	80043b6 <_svfiprintf_r+0xea>
 800438a:	9a07      	ldr	r2, [sp, #28]
 800438c:	462f      	mov	r7, r5
 800438e:	2000      	movs	r0, #0
 8004390:	250a      	movs	r5, #10
 8004392:	4639      	mov	r1, r7
 8004394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004398:	3b30      	subs	r3, #48	; 0x30
 800439a:	2b09      	cmp	r3, #9
 800439c:	d94d      	bls.n	800443a <_svfiprintf_r+0x16e>
 800439e:	b1b8      	cbz	r0, 80043d0 <_svfiprintf_r+0x104>
 80043a0:	e00f      	b.n	80043c2 <_svfiprintf_r+0xf6>
 80043a2:	462f      	mov	r7, r5
 80043a4:	e7b8      	b.n	8004318 <_svfiprintf_r+0x4c>
 80043a6:	4a40      	ldr	r2, [pc, #256]	; (80044a8 <_svfiprintf_r+0x1dc>)
 80043a8:	1a80      	subs	r0, r0, r2
 80043aa:	fa0b f000 	lsl.w	r0, fp, r0
 80043ae:	4318      	orrs	r0, r3
 80043b0:	9004      	str	r0, [sp, #16]
 80043b2:	463d      	mov	r5, r7
 80043b4:	e7d3      	b.n	800435e <_svfiprintf_r+0x92>
 80043b6:	9a03      	ldr	r2, [sp, #12]
 80043b8:	1d11      	adds	r1, r2, #4
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	9103      	str	r1, [sp, #12]
 80043be:	2a00      	cmp	r2, #0
 80043c0:	db01      	blt.n	80043c6 <_svfiprintf_r+0xfa>
 80043c2:	9207      	str	r2, [sp, #28]
 80043c4:	e004      	b.n	80043d0 <_svfiprintf_r+0x104>
 80043c6:	4252      	negs	r2, r2
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	9207      	str	r2, [sp, #28]
 80043ce:	9304      	str	r3, [sp, #16]
 80043d0:	783b      	ldrb	r3, [r7, #0]
 80043d2:	2b2e      	cmp	r3, #46	; 0x2e
 80043d4:	d10c      	bne.n	80043f0 <_svfiprintf_r+0x124>
 80043d6:	787b      	ldrb	r3, [r7, #1]
 80043d8:	2b2a      	cmp	r3, #42	; 0x2a
 80043da:	d133      	bne.n	8004444 <_svfiprintf_r+0x178>
 80043dc:	9b03      	ldr	r3, [sp, #12]
 80043de:	1d1a      	adds	r2, r3, #4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	9203      	str	r2, [sp, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bfb8      	it	lt
 80043e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80043ec:	3702      	adds	r7, #2
 80043ee:	9305      	str	r3, [sp, #20]
 80043f0:	4d2e      	ldr	r5, [pc, #184]	; (80044ac <_svfiprintf_r+0x1e0>)
 80043f2:	7839      	ldrb	r1, [r7, #0]
 80043f4:	2203      	movs	r2, #3
 80043f6:	4628      	mov	r0, r5
 80043f8:	f7fb ff2a 	bl	8000250 <memchr>
 80043fc:	b138      	cbz	r0, 800440e <_svfiprintf_r+0x142>
 80043fe:	2340      	movs	r3, #64	; 0x40
 8004400:	1b40      	subs	r0, r0, r5
 8004402:	fa03 f000 	lsl.w	r0, r3, r0
 8004406:	9b04      	ldr	r3, [sp, #16]
 8004408:	4303      	orrs	r3, r0
 800440a:	3701      	adds	r7, #1
 800440c:	9304      	str	r3, [sp, #16]
 800440e:	7839      	ldrb	r1, [r7, #0]
 8004410:	4827      	ldr	r0, [pc, #156]	; (80044b0 <_svfiprintf_r+0x1e4>)
 8004412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004416:	2206      	movs	r2, #6
 8004418:	1c7e      	adds	r6, r7, #1
 800441a:	f7fb ff19 	bl	8000250 <memchr>
 800441e:	2800      	cmp	r0, #0
 8004420:	d038      	beq.n	8004494 <_svfiprintf_r+0x1c8>
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <_svfiprintf_r+0x1e8>)
 8004424:	bb13      	cbnz	r3, 800446c <_svfiprintf_r+0x1a0>
 8004426:	9b03      	ldr	r3, [sp, #12]
 8004428:	3307      	adds	r3, #7
 800442a:	f023 0307 	bic.w	r3, r3, #7
 800442e:	3308      	adds	r3, #8
 8004430:	9303      	str	r3, [sp, #12]
 8004432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004434:	444b      	add	r3, r9
 8004436:	9309      	str	r3, [sp, #36]	; 0x24
 8004438:	e76d      	b.n	8004316 <_svfiprintf_r+0x4a>
 800443a:	fb05 3202 	mla	r2, r5, r2, r3
 800443e:	2001      	movs	r0, #1
 8004440:	460f      	mov	r7, r1
 8004442:	e7a6      	b.n	8004392 <_svfiprintf_r+0xc6>
 8004444:	2300      	movs	r3, #0
 8004446:	3701      	adds	r7, #1
 8004448:	9305      	str	r3, [sp, #20]
 800444a:	4619      	mov	r1, r3
 800444c:	250a      	movs	r5, #10
 800444e:	4638      	mov	r0, r7
 8004450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004454:	3a30      	subs	r2, #48	; 0x30
 8004456:	2a09      	cmp	r2, #9
 8004458:	d903      	bls.n	8004462 <_svfiprintf_r+0x196>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0c8      	beq.n	80043f0 <_svfiprintf_r+0x124>
 800445e:	9105      	str	r1, [sp, #20]
 8004460:	e7c6      	b.n	80043f0 <_svfiprintf_r+0x124>
 8004462:	fb05 2101 	mla	r1, r5, r1, r2
 8004466:	2301      	movs	r3, #1
 8004468:	4607      	mov	r7, r0
 800446a:	e7f0      	b.n	800444e <_svfiprintf_r+0x182>
 800446c:	ab03      	add	r3, sp, #12
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	4622      	mov	r2, r4
 8004472:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <_svfiprintf_r+0x1ec>)
 8004474:	a904      	add	r1, sp, #16
 8004476:	4640      	mov	r0, r8
 8004478:	f3af 8000 	nop.w
 800447c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004480:	4681      	mov	r9, r0
 8004482:	d1d6      	bne.n	8004432 <_svfiprintf_r+0x166>
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	065b      	lsls	r3, r3, #25
 8004488:	f53f af35 	bmi.w	80042f6 <_svfiprintf_r+0x2a>
 800448c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800448e:	b01d      	add	sp, #116	; 0x74
 8004490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004494:	ab03      	add	r3, sp, #12
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	4622      	mov	r2, r4
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <_svfiprintf_r+0x1ec>)
 800449c:	a904      	add	r1, sp, #16
 800449e:	4640      	mov	r0, r8
 80044a0:	f000 f882 	bl	80045a8 <_printf_i>
 80044a4:	e7ea      	b.n	800447c <_svfiprintf_r+0x1b0>
 80044a6:	bf00      	nop
 80044a8:	08004a30 	.word	0x08004a30
 80044ac:	08004a36 	.word	0x08004a36
 80044b0:	08004a3a 	.word	0x08004a3a
 80044b4:	00000000 	.word	0x00000000
 80044b8:	08004219 	.word	0x08004219

080044bc <_printf_common>:
 80044bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c0:	4691      	mov	r9, r2
 80044c2:	461f      	mov	r7, r3
 80044c4:	688a      	ldr	r2, [r1, #8]
 80044c6:	690b      	ldr	r3, [r1, #16]
 80044c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bfb8      	it	lt
 80044d0:	4613      	movlt	r3, r2
 80044d2:	f8c9 3000 	str.w	r3, [r9]
 80044d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044da:	4606      	mov	r6, r0
 80044dc:	460c      	mov	r4, r1
 80044de:	b112      	cbz	r2, 80044e6 <_printf_common+0x2a>
 80044e0:	3301      	adds	r3, #1
 80044e2:	f8c9 3000 	str.w	r3, [r9]
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	0699      	lsls	r1, r3, #26
 80044ea:	bf42      	ittt	mi
 80044ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80044f0:	3302      	addmi	r3, #2
 80044f2:	f8c9 3000 	strmi.w	r3, [r9]
 80044f6:	6825      	ldr	r5, [r4, #0]
 80044f8:	f015 0506 	ands.w	r5, r5, #6
 80044fc:	d107      	bne.n	800450e <_printf_common+0x52>
 80044fe:	f104 0a19 	add.w	sl, r4, #25
 8004502:	68e3      	ldr	r3, [r4, #12]
 8004504:	f8d9 2000 	ldr.w	r2, [r9]
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	42ab      	cmp	r3, r5
 800450c:	dc28      	bgt.n	8004560 <_printf_common+0xa4>
 800450e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004512:	6822      	ldr	r2, [r4, #0]
 8004514:	3300      	adds	r3, #0
 8004516:	bf18      	it	ne
 8004518:	2301      	movne	r3, #1
 800451a:	0692      	lsls	r2, r2, #26
 800451c:	d42d      	bmi.n	800457a <_printf_common+0xbe>
 800451e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004522:	4639      	mov	r1, r7
 8004524:	4630      	mov	r0, r6
 8004526:	47c0      	blx	r8
 8004528:	3001      	adds	r0, #1
 800452a:	d020      	beq.n	800456e <_printf_common+0xb2>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	68e5      	ldr	r5, [r4, #12]
 8004530:	f8d9 2000 	ldr.w	r2, [r9]
 8004534:	f003 0306 	and.w	r3, r3, #6
 8004538:	2b04      	cmp	r3, #4
 800453a:	bf08      	it	eq
 800453c:	1aad      	subeq	r5, r5, r2
 800453e:	68a3      	ldr	r3, [r4, #8]
 8004540:	6922      	ldr	r2, [r4, #16]
 8004542:	bf0c      	ite	eq
 8004544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004548:	2500      	movne	r5, #0
 800454a:	4293      	cmp	r3, r2
 800454c:	bfc4      	itt	gt
 800454e:	1a9b      	subgt	r3, r3, r2
 8004550:	18ed      	addgt	r5, r5, r3
 8004552:	f04f 0900 	mov.w	r9, #0
 8004556:	341a      	adds	r4, #26
 8004558:	454d      	cmp	r5, r9
 800455a:	d11a      	bne.n	8004592 <_printf_common+0xd6>
 800455c:	2000      	movs	r0, #0
 800455e:	e008      	b.n	8004572 <_printf_common+0xb6>
 8004560:	2301      	movs	r3, #1
 8004562:	4652      	mov	r2, sl
 8004564:	4639      	mov	r1, r7
 8004566:	4630      	mov	r0, r6
 8004568:	47c0      	blx	r8
 800456a:	3001      	adds	r0, #1
 800456c:	d103      	bne.n	8004576 <_printf_common+0xba>
 800456e:	f04f 30ff 	mov.w	r0, #4294967295
 8004572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004576:	3501      	adds	r5, #1
 8004578:	e7c3      	b.n	8004502 <_printf_common+0x46>
 800457a:	18e1      	adds	r1, r4, r3
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	2030      	movs	r0, #48	; 0x30
 8004580:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004584:	4422      	add	r2, r4
 8004586:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800458a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800458e:	3302      	adds	r3, #2
 8004590:	e7c5      	b.n	800451e <_printf_common+0x62>
 8004592:	2301      	movs	r3, #1
 8004594:	4622      	mov	r2, r4
 8004596:	4639      	mov	r1, r7
 8004598:	4630      	mov	r0, r6
 800459a:	47c0      	blx	r8
 800459c:	3001      	adds	r0, #1
 800459e:	d0e6      	beq.n	800456e <_printf_common+0xb2>
 80045a0:	f109 0901 	add.w	r9, r9, #1
 80045a4:	e7d8      	b.n	8004558 <_printf_common+0x9c>
	...

080045a8 <_printf_i>:
 80045a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80045b0:	460c      	mov	r4, r1
 80045b2:	7e09      	ldrb	r1, [r1, #24]
 80045b4:	b085      	sub	sp, #20
 80045b6:	296e      	cmp	r1, #110	; 0x6e
 80045b8:	4617      	mov	r7, r2
 80045ba:	4606      	mov	r6, r0
 80045bc:	4698      	mov	r8, r3
 80045be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045c0:	f000 80b3 	beq.w	800472a <_printf_i+0x182>
 80045c4:	d822      	bhi.n	800460c <_printf_i+0x64>
 80045c6:	2963      	cmp	r1, #99	; 0x63
 80045c8:	d036      	beq.n	8004638 <_printf_i+0x90>
 80045ca:	d80a      	bhi.n	80045e2 <_printf_i+0x3a>
 80045cc:	2900      	cmp	r1, #0
 80045ce:	f000 80b9 	beq.w	8004744 <_printf_i+0x19c>
 80045d2:	2958      	cmp	r1, #88	; 0x58
 80045d4:	f000 8083 	beq.w	80046de <_printf_i+0x136>
 80045d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80045e0:	e032      	b.n	8004648 <_printf_i+0xa0>
 80045e2:	2964      	cmp	r1, #100	; 0x64
 80045e4:	d001      	beq.n	80045ea <_printf_i+0x42>
 80045e6:	2969      	cmp	r1, #105	; 0x69
 80045e8:	d1f6      	bne.n	80045d8 <_printf_i+0x30>
 80045ea:	6820      	ldr	r0, [r4, #0]
 80045ec:	6813      	ldr	r3, [r2, #0]
 80045ee:	0605      	lsls	r5, r0, #24
 80045f0:	f103 0104 	add.w	r1, r3, #4
 80045f4:	d52a      	bpl.n	800464c <_printf_i+0xa4>
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6011      	str	r1, [r2, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	da03      	bge.n	8004606 <_printf_i+0x5e>
 80045fe:	222d      	movs	r2, #45	; 0x2d
 8004600:	425b      	negs	r3, r3
 8004602:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004606:	486f      	ldr	r0, [pc, #444]	; (80047c4 <_printf_i+0x21c>)
 8004608:	220a      	movs	r2, #10
 800460a:	e039      	b.n	8004680 <_printf_i+0xd8>
 800460c:	2973      	cmp	r1, #115	; 0x73
 800460e:	f000 809d 	beq.w	800474c <_printf_i+0x1a4>
 8004612:	d808      	bhi.n	8004626 <_printf_i+0x7e>
 8004614:	296f      	cmp	r1, #111	; 0x6f
 8004616:	d020      	beq.n	800465a <_printf_i+0xb2>
 8004618:	2970      	cmp	r1, #112	; 0x70
 800461a:	d1dd      	bne.n	80045d8 <_printf_i+0x30>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	f043 0320 	orr.w	r3, r3, #32
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	e003      	b.n	800462e <_printf_i+0x86>
 8004626:	2975      	cmp	r1, #117	; 0x75
 8004628:	d017      	beq.n	800465a <_printf_i+0xb2>
 800462a:	2978      	cmp	r1, #120	; 0x78
 800462c:	d1d4      	bne.n	80045d8 <_printf_i+0x30>
 800462e:	2378      	movs	r3, #120	; 0x78
 8004630:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004634:	4864      	ldr	r0, [pc, #400]	; (80047c8 <_printf_i+0x220>)
 8004636:	e055      	b.n	80046e4 <_printf_i+0x13c>
 8004638:	6813      	ldr	r3, [r2, #0]
 800463a:	1d19      	adds	r1, r3, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6011      	str	r1, [r2, #0]
 8004640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004648:	2301      	movs	r3, #1
 800464a:	e08c      	b.n	8004766 <_printf_i+0x1be>
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6011      	str	r1, [r2, #0]
 8004650:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004654:	bf18      	it	ne
 8004656:	b21b      	sxthne	r3, r3
 8004658:	e7cf      	b.n	80045fa <_printf_i+0x52>
 800465a:	6813      	ldr	r3, [r2, #0]
 800465c:	6825      	ldr	r5, [r4, #0]
 800465e:	1d18      	adds	r0, r3, #4
 8004660:	6010      	str	r0, [r2, #0]
 8004662:	0628      	lsls	r0, r5, #24
 8004664:	d501      	bpl.n	800466a <_printf_i+0xc2>
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	e002      	b.n	8004670 <_printf_i+0xc8>
 800466a:	0668      	lsls	r0, r5, #25
 800466c:	d5fb      	bpl.n	8004666 <_printf_i+0xbe>
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	4854      	ldr	r0, [pc, #336]	; (80047c4 <_printf_i+0x21c>)
 8004672:	296f      	cmp	r1, #111	; 0x6f
 8004674:	bf14      	ite	ne
 8004676:	220a      	movne	r2, #10
 8004678:	2208      	moveq	r2, #8
 800467a:	2100      	movs	r1, #0
 800467c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004680:	6865      	ldr	r5, [r4, #4]
 8004682:	60a5      	str	r5, [r4, #8]
 8004684:	2d00      	cmp	r5, #0
 8004686:	f2c0 8095 	blt.w	80047b4 <_printf_i+0x20c>
 800468a:	6821      	ldr	r1, [r4, #0]
 800468c:	f021 0104 	bic.w	r1, r1, #4
 8004690:	6021      	str	r1, [r4, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d13d      	bne.n	8004712 <_printf_i+0x16a>
 8004696:	2d00      	cmp	r5, #0
 8004698:	f040 808e 	bne.w	80047b8 <_printf_i+0x210>
 800469c:	4665      	mov	r5, ip
 800469e:	2a08      	cmp	r2, #8
 80046a0:	d10b      	bne.n	80046ba <_printf_i+0x112>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	07db      	lsls	r3, r3, #31
 80046a6:	d508      	bpl.n	80046ba <_printf_i+0x112>
 80046a8:	6923      	ldr	r3, [r4, #16]
 80046aa:	6862      	ldr	r2, [r4, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	bfde      	ittt	le
 80046b0:	2330      	movle	r3, #48	; 0x30
 80046b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046ba:	ebac 0305 	sub.w	r3, ip, r5
 80046be:	6123      	str	r3, [r4, #16]
 80046c0:	f8cd 8000 	str.w	r8, [sp]
 80046c4:	463b      	mov	r3, r7
 80046c6:	aa03      	add	r2, sp, #12
 80046c8:	4621      	mov	r1, r4
 80046ca:	4630      	mov	r0, r6
 80046cc:	f7ff fef6 	bl	80044bc <_printf_common>
 80046d0:	3001      	adds	r0, #1
 80046d2:	d14d      	bne.n	8004770 <_printf_i+0x1c8>
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	b005      	add	sp, #20
 80046da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046de:	4839      	ldr	r0, [pc, #228]	; (80047c4 <_printf_i+0x21c>)
 80046e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80046e4:	6813      	ldr	r3, [r2, #0]
 80046e6:	6821      	ldr	r1, [r4, #0]
 80046e8:	1d1d      	adds	r5, r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6015      	str	r5, [r2, #0]
 80046ee:	060a      	lsls	r2, r1, #24
 80046f0:	d50b      	bpl.n	800470a <_printf_i+0x162>
 80046f2:	07ca      	lsls	r2, r1, #31
 80046f4:	bf44      	itt	mi
 80046f6:	f041 0120 	orrmi.w	r1, r1, #32
 80046fa:	6021      	strmi	r1, [r4, #0]
 80046fc:	b91b      	cbnz	r3, 8004706 <_printf_i+0x15e>
 80046fe:	6822      	ldr	r2, [r4, #0]
 8004700:	f022 0220 	bic.w	r2, r2, #32
 8004704:	6022      	str	r2, [r4, #0]
 8004706:	2210      	movs	r2, #16
 8004708:	e7b7      	b.n	800467a <_printf_i+0xd2>
 800470a:	064d      	lsls	r5, r1, #25
 800470c:	bf48      	it	mi
 800470e:	b29b      	uxthmi	r3, r3
 8004710:	e7ef      	b.n	80046f2 <_printf_i+0x14a>
 8004712:	4665      	mov	r5, ip
 8004714:	fbb3 f1f2 	udiv	r1, r3, r2
 8004718:	fb02 3311 	mls	r3, r2, r1, r3
 800471c:	5cc3      	ldrb	r3, [r0, r3]
 800471e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004722:	460b      	mov	r3, r1
 8004724:	2900      	cmp	r1, #0
 8004726:	d1f5      	bne.n	8004714 <_printf_i+0x16c>
 8004728:	e7b9      	b.n	800469e <_printf_i+0xf6>
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	6825      	ldr	r5, [r4, #0]
 800472e:	6961      	ldr	r1, [r4, #20]
 8004730:	1d18      	adds	r0, r3, #4
 8004732:	6010      	str	r0, [r2, #0]
 8004734:	0628      	lsls	r0, r5, #24
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	d501      	bpl.n	800473e <_printf_i+0x196>
 800473a:	6019      	str	r1, [r3, #0]
 800473c:	e002      	b.n	8004744 <_printf_i+0x19c>
 800473e:	066a      	lsls	r2, r5, #25
 8004740:	d5fb      	bpl.n	800473a <_printf_i+0x192>
 8004742:	8019      	strh	r1, [r3, #0]
 8004744:	2300      	movs	r3, #0
 8004746:	6123      	str	r3, [r4, #16]
 8004748:	4665      	mov	r5, ip
 800474a:	e7b9      	b.n	80046c0 <_printf_i+0x118>
 800474c:	6813      	ldr	r3, [r2, #0]
 800474e:	1d19      	adds	r1, r3, #4
 8004750:	6011      	str	r1, [r2, #0]
 8004752:	681d      	ldr	r5, [r3, #0]
 8004754:	6862      	ldr	r2, [r4, #4]
 8004756:	2100      	movs	r1, #0
 8004758:	4628      	mov	r0, r5
 800475a:	f7fb fd79 	bl	8000250 <memchr>
 800475e:	b108      	cbz	r0, 8004764 <_printf_i+0x1bc>
 8004760:	1b40      	subs	r0, r0, r5
 8004762:	6060      	str	r0, [r4, #4]
 8004764:	6863      	ldr	r3, [r4, #4]
 8004766:	6123      	str	r3, [r4, #16]
 8004768:	2300      	movs	r3, #0
 800476a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800476e:	e7a7      	b.n	80046c0 <_printf_i+0x118>
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	462a      	mov	r2, r5
 8004774:	4639      	mov	r1, r7
 8004776:	4630      	mov	r0, r6
 8004778:	47c0      	blx	r8
 800477a:	3001      	adds	r0, #1
 800477c:	d0aa      	beq.n	80046d4 <_printf_i+0x12c>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	079b      	lsls	r3, r3, #30
 8004782:	d413      	bmi.n	80047ac <_printf_i+0x204>
 8004784:	68e0      	ldr	r0, [r4, #12]
 8004786:	9b03      	ldr	r3, [sp, #12]
 8004788:	4298      	cmp	r0, r3
 800478a:	bfb8      	it	lt
 800478c:	4618      	movlt	r0, r3
 800478e:	e7a3      	b.n	80046d8 <_printf_i+0x130>
 8004790:	2301      	movs	r3, #1
 8004792:	464a      	mov	r2, r9
 8004794:	4639      	mov	r1, r7
 8004796:	4630      	mov	r0, r6
 8004798:	47c0      	blx	r8
 800479a:	3001      	adds	r0, #1
 800479c:	d09a      	beq.n	80046d4 <_printf_i+0x12c>
 800479e:	3501      	adds	r5, #1
 80047a0:	68e3      	ldr	r3, [r4, #12]
 80047a2:	9a03      	ldr	r2, [sp, #12]
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	42ab      	cmp	r3, r5
 80047a8:	dcf2      	bgt.n	8004790 <_printf_i+0x1e8>
 80047aa:	e7eb      	b.n	8004784 <_printf_i+0x1dc>
 80047ac:	2500      	movs	r5, #0
 80047ae:	f104 0919 	add.w	r9, r4, #25
 80047b2:	e7f5      	b.n	80047a0 <_printf_i+0x1f8>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ac      	bne.n	8004712 <_printf_i+0x16a>
 80047b8:	7803      	ldrb	r3, [r0, #0]
 80047ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047c2:	e76c      	b.n	800469e <_printf_i+0xf6>
 80047c4:	08004a41 	.word	0x08004a41
 80047c8:	08004a52 	.word	0x08004a52

080047cc <memcpy>:
 80047cc:	b510      	push	{r4, lr}
 80047ce:	1e43      	subs	r3, r0, #1
 80047d0:	440a      	add	r2, r1
 80047d2:	4291      	cmp	r1, r2
 80047d4:	d100      	bne.n	80047d8 <memcpy+0xc>
 80047d6:	bd10      	pop	{r4, pc}
 80047d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e0:	e7f7      	b.n	80047d2 <memcpy+0x6>

080047e2 <memmove>:
 80047e2:	4288      	cmp	r0, r1
 80047e4:	b510      	push	{r4, lr}
 80047e6:	eb01 0302 	add.w	r3, r1, r2
 80047ea:	d807      	bhi.n	80047fc <memmove+0x1a>
 80047ec:	1e42      	subs	r2, r0, #1
 80047ee:	4299      	cmp	r1, r3
 80047f0:	d00a      	beq.n	8004808 <memmove+0x26>
 80047f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80047fa:	e7f8      	b.n	80047ee <memmove+0xc>
 80047fc:	4283      	cmp	r3, r0
 80047fe:	d9f5      	bls.n	80047ec <memmove+0xa>
 8004800:	1881      	adds	r1, r0, r2
 8004802:	1ad2      	subs	r2, r2, r3
 8004804:	42d3      	cmn	r3, r2
 8004806:	d100      	bne.n	800480a <memmove+0x28>
 8004808:	bd10      	pop	{r4, pc}
 800480a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800480e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004812:	e7f7      	b.n	8004804 <memmove+0x22>

08004814 <_free_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4605      	mov	r5, r0
 8004818:	2900      	cmp	r1, #0
 800481a:	d045      	beq.n	80048a8 <_free_r+0x94>
 800481c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004820:	1f0c      	subs	r4, r1, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	bfb8      	it	lt
 8004826:	18e4      	addlt	r4, r4, r3
 8004828:	f000 f8d2 	bl	80049d0 <__malloc_lock>
 800482c:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <_free_r+0x98>)
 800482e:	6813      	ldr	r3, [r2, #0]
 8004830:	4610      	mov	r0, r2
 8004832:	b933      	cbnz	r3, 8004842 <_free_r+0x2e>
 8004834:	6063      	str	r3, [r4, #4]
 8004836:	6014      	str	r4, [r2, #0]
 8004838:	4628      	mov	r0, r5
 800483a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800483e:	f000 b8c8 	b.w	80049d2 <__malloc_unlock>
 8004842:	42a3      	cmp	r3, r4
 8004844:	d90c      	bls.n	8004860 <_free_r+0x4c>
 8004846:	6821      	ldr	r1, [r4, #0]
 8004848:	1862      	adds	r2, r4, r1
 800484a:	4293      	cmp	r3, r2
 800484c:	bf04      	itt	eq
 800484e:	681a      	ldreq	r2, [r3, #0]
 8004850:	685b      	ldreq	r3, [r3, #4]
 8004852:	6063      	str	r3, [r4, #4]
 8004854:	bf04      	itt	eq
 8004856:	1852      	addeq	r2, r2, r1
 8004858:	6022      	streq	r2, [r4, #0]
 800485a:	6004      	str	r4, [r0, #0]
 800485c:	e7ec      	b.n	8004838 <_free_r+0x24>
 800485e:	4613      	mov	r3, r2
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	b10a      	cbz	r2, 8004868 <_free_r+0x54>
 8004864:	42a2      	cmp	r2, r4
 8004866:	d9fa      	bls.n	800485e <_free_r+0x4a>
 8004868:	6819      	ldr	r1, [r3, #0]
 800486a:	1858      	adds	r0, r3, r1
 800486c:	42a0      	cmp	r0, r4
 800486e:	d10b      	bne.n	8004888 <_free_r+0x74>
 8004870:	6820      	ldr	r0, [r4, #0]
 8004872:	4401      	add	r1, r0
 8004874:	1858      	adds	r0, r3, r1
 8004876:	4282      	cmp	r2, r0
 8004878:	6019      	str	r1, [r3, #0]
 800487a:	d1dd      	bne.n	8004838 <_free_r+0x24>
 800487c:	6810      	ldr	r0, [r2, #0]
 800487e:	6852      	ldr	r2, [r2, #4]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	4401      	add	r1, r0
 8004884:	6019      	str	r1, [r3, #0]
 8004886:	e7d7      	b.n	8004838 <_free_r+0x24>
 8004888:	d902      	bls.n	8004890 <_free_r+0x7c>
 800488a:	230c      	movs	r3, #12
 800488c:	602b      	str	r3, [r5, #0]
 800488e:	e7d3      	b.n	8004838 <_free_r+0x24>
 8004890:	6820      	ldr	r0, [r4, #0]
 8004892:	1821      	adds	r1, r4, r0
 8004894:	428a      	cmp	r2, r1
 8004896:	bf04      	itt	eq
 8004898:	6811      	ldreq	r1, [r2, #0]
 800489a:	6852      	ldreq	r2, [r2, #4]
 800489c:	6062      	str	r2, [r4, #4]
 800489e:	bf04      	itt	eq
 80048a0:	1809      	addeq	r1, r1, r0
 80048a2:	6021      	streq	r1, [r4, #0]
 80048a4:	605c      	str	r4, [r3, #4]
 80048a6:	e7c7      	b.n	8004838 <_free_r+0x24>
 80048a8:	bd38      	pop	{r3, r4, r5, pc}
 80048aa:	bf00      	nop
 80048ac:	20000224 	.word	0x20000224

080048b0 <_malloc_r>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	1ccd      	adds	r5, r1, #3
 80048b4:	f025 0503 	bic.w	r5, r5, #3
 80048b8:	3508      	adds	r5, #8
 80048ba:	2d0c      	cmp	r5, #12
 80048bc:	bf38      	it	cc
 80048be:	250c      	movcc	r5, #12
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	4606      	mov	r6, r0
 80048c4:	db01      	blt.n	80048ca <_malloc_r+0x1a>
 80048c6:	42a9      	cmp	r1, r5
 80048c8:	d903      	bls.n	80048d2 <_malloc_r+0x22>
 80048ca:	230c      	movs	r3, #12
 80048cc:	6033      	str	r3, [r6, #0]
 80048ce:	2000      	movs	r0, #0
 80048d0:	bd70      	pop	{r4, r5, r6, pc}
 80048d2:	f000 f87d 	bl	80049d0 <__malloc_lock>
 80048d6:	4a21      	ldr	r2, [pc, #132]	; (800495c <_malloc_r+0xac>)
 80048d8:	6814      	ldr	r4, [r2, #0]
 80048da:	4621      	mov	r1, r4
 80048dc:	b991      	cbnz	r1, 8004904 <_malloc_r+0x54>
 80048de:	4c20      	ldr	r4, [pc, #128]	; (8004960 <_malloc_r+0xb0>)
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	b91b      	cbnz	r3, 80048ec <_malloc_r+0x3c>
 80048e4:	4630      	mov	r0, r6
 80048e6:	f000 f863 	bl	80049b0 <_sbrk_r>
 80048ea:	6020      	str	r0, [r4, #0]
 80048ec:	4629      	mov	r1, r5
 80048ee:	4630      	mov	r0, r6
 80048f0:	f000 f85e 	bl	80049b0 <_sbrk_r>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d124      	bne.n	8004942 <_malloc_r+0x92>
 80048f8:	230c      	movs	r3, #12
 80048fa:	6033      	str	r3, [r6, #0]
 80048fc:	4630      	mov	r0, r6
 80048fe:	f000 f868 	bl	80049d2 <__malloc_unlock>
 8004902:	e7e4      	b.n	80048ce <_malloc_r+0x1e>
 8004904:	680b      	ldr	r3, [r1, #0]
 8004906:	1b5b      	subs	r3, r3, r5
 8004908:	d418      	bmi.n	800493c <_malloc_r+0x8c>
 800490a:	2b0b      	cmp	r3, #11
 800490c:	d90f      	bls.n	800492e <_malloc_r+0x7e>
 800490e:	600b      	str	r3, [r1, #0]
 8004910:	50cd      	str	r5, [r1, r3]
 8004912:	18cc      	adds	r4, r1, r3
 8004914:	4630      	mov	r0, r6
 8004916:	f000 f85c 	bl	80049d2 <__malloc_unlock>
 800491a:	f104 000b 	add.w	r0, r4, #11
 800491e:	1d23      	adds	r3, r4, #4
 8004920:	f020 0007 	bic.w	r0, r0, #7
 8004924:	1ac3      	subs	r3, r0, r3
 8004926:	d0d3      	beq.n	80048d0 <_malloc_r+0x20>
 8004928:	425a      	negs	r2, r3
 800492a:	50e2      	str	r2, [r4, r3]
 800492c:	e7d0      	b.n	80048d0 <_malloc_r+0x20>
 800492e:	428c      	cmp	r4, r1
 8004930:	684b      	ldr	r3, [r1, #4]
 8004932:	bf16      	itet	ne
 8004934:	6063      	strne	r3, [r4, #4]
 8004936:	6013      	streq	r3, [r2, #0]
 8004938:	460c      	movne	r4, r1
 800493a:	e7eb      	b.n	8004914 <_malloc_r+0x64>
 800493c:	460c      	mov	r4, r1
 800493e:	6849      	ldr	r1, [r1, #4]
 8004940:	e7cc      	b.n	80048dc <_malloc_r+0x2c>
 8004942:	1cc4      	adds	r4, r0, #3
 8004944:	f024 0403 	bic.w	r4, r4, #3
 8004948:	42a0      	cmp	r0, r4
 800494a:	d005      	beq.n	8004958 <_malloc_r+0xa8>
 800494c:	1a21      	subs	r1, r4, r0
 800494e:	4630      	mov	r0, r6
 8004950:	f000 f82e 	bl	80049b0 <_sbrk_r>
 8004954:	3001      	adds	r0, #1
 8004956:	d0cf      	beq.n	80048f8 <_malloc_r+0x48>
 8004958:	6025      	str	r5, [r4, #0]
 800495a:	e7db      	b.n	8004914 <_malloc_r+0x64>
 800495c:	20000224 	.word	0x20000224
 8004960:	20000228 	.word	0x20000228

08004964 <_realloc_r>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	4607      	mov	r7, r0
 8004968:	4614      	mov	r4, r2
 800496a:	460e      	mov	r6, r1
 800496c:	b921      	cbnz	r1, 8004978 <_realloc_r+0x14>
 800496e:	4611      	mov	r1, r2
 8004970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004974:	f7ff bf9c 	b.w	80048b0 <_malloc_r>
 8004978:	b922      	cbnz	r2, 8004984 <_realloc_r+0x20>
 800497a:	f7ff ff4b 	bl	8004814 <_free_r>
 800497e:	4625      	mov	r5, r4
 8004980:	4628      	mov	r0, r5
 8004982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004984:	f000 f826 	bl	80049d4 <_malloc_usable_size_r>
 8004988:	42a0      	cmp	r0, r4
 800498a:	d20f      	bcs.n	80049ac <_realloc_r+0x48>
 800498c:	4621      	mov	r1, r4
 800498e:	4638      	mov	r0, r7
 8004990:	f7ff ff8e 	bl	80048b0 <_malloc_r>
 8004994:	4605      	mov	r5, r0
 8004996:	2800      	cmp	r0, #0
 8004998:	d0f2      	beq.n	8004980 <_realloc_r+0x1c>
 800499a:	4631      	mov	r1, r6
 800499c:	4622      	mov	r2, r4
 800499e:	f7ff ff15 	bl	80047cc <memcpy>
 80049a2:	4631      	mov	r1, r6
 80049a4:	4638      	mov	r0, r7
 80049a6:	f7ff ff35 	bl	8004814 <_free_r>
 80049aa:	e7e9      	b.n	8004980 <_realloc_r+0x1c>
 80049ac:	4635      	mov	r5, r6
 80049ae:	e7e7      	b.n	8004980 <_realloc_r+0x1c>

080049b0 <_sbrk_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4c06      	ldr	r4, [pc, #24]	; (80049cc <_sbrk_r+0x1c>)
 80049b4:	2300      	movs	r3, #0
 80049b6:	4605      	mov	r5, r0
 80049b8:	4608      	mov	r0, r1
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	f7ff fb4e 	bl	800405c <_sbrk>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d102      	bne.n	80049ca <_sbrk_r+0x1a>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	b103      	cbz	r3, 80049ca <_sbrk_r+0x1a>
 80049c8:	602b      	str	r3, [r5, #0]
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	20000358 	.word	0x20000358

080049d0 <__malloc_lock>:
 80049d0:	4770      	bx	lr

080049d2 <__malloc_unlock>:
 80049d2:	4770      	bx	lr

080049d4 <_malloc_usable_size_r>:
 80049d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049d8:	1f18      	subs	r0, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bfbc      	itt	lt
 80049de:	580b      	ldrlt	r3, [r1, r0]
 80049e0:	18c0      	addlt	r0, r0, r3
 80049e2:	4770      	bx	lr

080049e4 <_init>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr

080049f0 <_fini>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr
