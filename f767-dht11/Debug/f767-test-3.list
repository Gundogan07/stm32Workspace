
f767-test-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a8c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000164  20000070  08003d80  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001d4  08003d80  000201d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012a29  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002255  00000000  00000000  00032ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c38  00000000  00000000  00034d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b50  00000000  00000000  00035958  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005b8d  00000000  00000000  000364a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000043a3  00000000  00000000  0003c035  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000403d8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000035c8  00000000  00000000  00040454  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003c74 	.word	0x08003c74

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003c74 	.word	0x08003c74

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b97a 	b.w	80005ec <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <set_gpio_mode>:

#define OUTPUT 1
#define INPUT 0

void set_gpio_mode(uint8_t pMode)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d10e      	bne.n	800062e <set_gpio_mode+0x3e>
	{
	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	  GPIO_InitStruct.Pin = DHT11_Pin;
 8000610:	2310      	movs	r3, #16
 8000612:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	4619      	mov	r1, r3
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <set_gpio_mode+0x68>)
 8000628:	f000 fe14 	bl	8001254 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
}
 800062c:	e010      	b.n	8000650 <set_gpio_mode+0x60>
	}else if(pMode == INPUT)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d10d      	bne.n	8000650 <set_gpio_mode+0x60>
	  GPIO_InitStruct.Pin = DHT11_Pin;
 8000634:	2310      	movs	r3, #16
 8000636:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	4619      	mov	r1, r3
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <set_gpio_mode+0x68>)
 800064c:	f000 fe02 	bl	8001254 <HAL_GPIO_Init>
}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020400 	.word	0x40020400

0800065c <readDHT11>:


uint8_t readDHT11(uint8_t *pData)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000668:	2300      	movs	r3, #0
 800066a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800066c:	2300      	movs	r3, #0
 800066e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000678:	2300      	movs	r3, #0
 800067a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800067e:	2300      	movs	r3, #0
 8000680:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000684:	2300      	movs	r3, #0
 8000686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t mData[40];

	//start comm
	set_gpio_mode(OUTPUT);
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff ffb0 	bl	80005f0 <set_gpio_mode>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2110      	movs	r1, #16
 8000694:	4898      	ldr	r0, [pc, #608]	; (80008f8 <readDHT11+0x29c>)
 8000696:	f000 ff9f 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800069a:	2014      	movs	r0, #20
 800069c:	f000 fcd4 	bl	8001048 <HAL_Delay>
	set_gpio_mode(INPUT);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f7ff ffa5 	bl	80005f0 <set_gpio_mode>

	//check dht aswer
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80006a6:	4b95      	ldr	r3, [pc, #596]	; (80008fc <readDHT11+0x2a0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 80006ae:	e008      	b.n	80006c2 <readDHT11+0x66>
 80006b0:	4b92      	ldr	r3, [pc, #584]	; (80008fc <readDHT11+0x2a0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006bc:	d901      	bls.n	80006c2 <readDHT11+0x66>
 80006be:	2300      	movs	r3, #0
 80006c0:	e116      	b.n	80008f0 <readDHT11+0x294>
 80006c2:	2110      	movs	r1, #16
 80006c4:	488c      	ldr	r0, [pc, #560]	; (80008f8 <readDHT11+0x29c>)
 80006c6:	f000 ff6f 	bl	80015a8 <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d0ef      	beq.n	80006b0 <readDHT11+0x54>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80006d0:	4b8a      	ldr	r3, [pc, #552]	; (80008fc <readDHT11+0x2a0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 80006d8:	e008      	b.n	80006ec <readDHT11+0x90>
 80006da:	4b88      	ldr	r3, [pc, #544]	; (80008fc <readDHT11+0x2a0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006e6:	d901      	bls.n	80006ec <readDHT11+0x90>
 80006e8:	2300      	movs	r3, #0
 80006ea:	e101      	b.n	80008f0 <readDHT11+0x294>
 80006ec:	2110      	movs	r1, #16
 80006ee:	4882      	ldr	r0, [pc, #520]	; (80008f8 <readDHT11+0x29c>)
 80006f0:	f000 ff5a 	bl	80015a8 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0ef      	beq.n	80006da <readDHT11+0x7e>
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 80006fa:	4b80      	ldr	r3, [pc, #512]	; (80008fc <readDHT11+0x2a0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000700:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000702:	4b7e      	ldr	r3, [pc, #504]	; (80008fc <readDHT11+0x2a0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 800070a:	e008      	b.n	800071e <readDHT11+0xc2>
 800070c:	4b7b      	ldr	r3, [pc, #492]	; (80008fc <readDHT11+0x2a0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000712:	b29b      	uxth	r3, r3
 8000714:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000718:	d901      	bls.n	800071e <readDHT11+0xc2>
 800071a:	2300      	movs	r3, #0
 800071c:	e0e8      	b.n	80008f0 <readDHT11+0x294>
 800071e:	2110      	movs	r1, #16
 8000720:	4875      	ldr	r0, [pc, #468]	; (80008f8 <readDHT11+0x29c>)
 8000722:	f000 ff41 	bl	80015a8 <HAL_GPIO_ReadPin>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d0ef      	beq.n	800070c <readDHT11+0xb0>
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 800072c:	4b73      	ldr	r3, [pc, #460]	; (80008fc <readDHT11+0x2a0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is worng return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8000734:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000736:	2b4a      	cmp	r3, #74	; 0x4a
 8000738:	d80f      	bhi.n	800075a <readDHT11+0xfe>
 800073a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800073c:	2b55      	cmp	r3, #85	; 0x55
 800073e:	d90c      	bls.n	800075a <readDHT11+0xfe>
 8000740:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000742:	2b4a      	cmp	r3, #74	; 0x4a
 8000744:	d809      	bhi.n	800075a <readDHT11+0xfe>
 8000746:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000748:	2b55      	cmp	r3, #85	; 0x55
 800074a:	d906      	bls.n	800075a <readDHT11+0xfe>
	{
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800074c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000750:	4869      	ldr	r0, [pc, #420]	; (80008f8 <readDHT11+0x29c>)
 8000752:	f000 ff5a 	bl	800160a <HAL_GPIO_TogglePin>
		return 0;
 8000756:	2300      	movs	r3, #0
 8000758:	e0ca      	b.n	80008f0 <readDHT11+0x294>
	}

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	4866      	ldr	r0, [pc, #408]	; (80008f8 <readDHT11+0x29c>)
 8000760:	f000 ff3a 	bl	80015d8 <HAL_GPIO_WritePin>
	for(int j = 0; j < 40; j++)
 8000764:	2300      	movs	r3, #0
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
 8000768:	e04c      	b.n	8000804 <readDHT11+0x1a8>
	{
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 800076a:	4b64      	ldr	r3, [pc, #400]	; (80008fc <readDHT11+0x2a0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000772:	e008      	b.n	8000786 <readDHT11+0x12a>
 8000774:	4b61      	ldr	r3, [pc, #388]	; (80008fc <readDHT11+0x2a0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	b29b      	uxth	r3, r3
 800077c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000780:	d901      	bls.n	8000786 <readDHT11+0x12a>
 8000782:	2300      	movs	r3, #0
 8000784:	e0b4      	b.n	80008f0 <readDHT11+0x294>
 8000786:	2110      	movs	r1, #16
 8000788:	485b      	ldr	r0, [pc, #364]	; (80008f8 <readDHT11+0x29c>)
 800078a:	f000 ff0d 	bl	80015a8 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0ef      	beq.n	8000774 <readDHT11+0x118>
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000794:	4b59      	ldr	r3, [pc, #356]	; (80008fc <readDHT11+0x2a0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 800079c:	e008      	b.n	80007b0 <readDHT11+0x154>
 800079e:	4b57      	ldr	r3, [pc, #348]	; (80008fc <readDHT11+0x2a0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007aa:	d901      	bls.n	80007b0 <readDHT11+0x154>
 80007ac:	2300      	movs	r3, #0
 80007ae:	e09f      	b.n	80008f0 <readDHT11+0x294>
 80007b0:	2110      	movs	r1, #16
 80007b2:	4851      	ldr	r0, [pc, #324]	; (80008f8 <readDHT11+0x29c>)
 80007b4:	f000 fef8 	bl	80015a8 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d0ef      	beq.n	800079e <readDHT11+0x142>
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 80007be:	4b4f      	ldr	r3, [pc, #316]	; (80008fc <readDHT11+0x2a0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c4:	86fb      	strh	r3, [r7, #54]	; 0x36

		if(mTime1 > 20 && mTime1 < 30)
 80007c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80007c8:	2b14      	cmp	r3, #20
 80007ca:	d906      	bls.n	80007da <readDHT11+0x17e>
 80007cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80007ce:	2b1d      	cmp	r3, #29
 80007d0:	d803      	bhi.n	80007da <readDHT11+0x17e>
		{
			mBit = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80007d8:	e008      	b.n	80007ec <readDHT11+0x190>
		}
		else if(mTime1 > 60 && mTime1 < 80)
 80007da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80007dc:	2b3c      	cmp	r3, #60	; 0x3c
 80007de:	d905      	bls.n	80007ec <readDHT11+0x190>
 80007e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80007e2:	2b4f      	cmp	r3, #79	; 0x4f
 80007e4:	d802      	bhi.n	80007ec <readDHT11+0x190>
		{
			 mBit = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		mData[j] = mBit;
 80007ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80007f0:	b2d9      	uxtb	r1, r3
 80007f2:	f107 0208 	add.w	r2, r7, #8
 80007f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007f8:	4413      	add	r3, r2
 80007fa:	460a      	mov	r2, r1
 80007fc:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 80007fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000800:	3301      	adds	r3, #1
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
 8000804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000806:	2b27      	cmp	r3, #39	; 0x27
 8000808:	ddaf      	ble.n	800076a <readDHT11+0x10e>

	}

	for(int i = 0; i < 8; i++)
 800080a:	2300      	movs	r3, #0
 800080c:	643b      	str	r3, [r7, #64]	; 0x40
 800080e:	e011      	b.n	8000834 <readDHT11+0x1d8>
	{
		humVal += mData[i];
 8000810:	f107 0208 	add.w	r2, r7, #8
 8000814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000816:	4413      	add	r3, r2
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800081e:	4413      	add	r3, r2
 8000820:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 8000824:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 800082e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000830:	3301      	adds	r3, #1
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
 8000834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000836:	2b07      	cmp	r3, #7
 8000838:	ddea      	ble.n	8000810 <readDHT11+0x1b4>
	}

	for(int i = 16; i < 24; i++)
 800083a:	2310      	movs	r3, #16
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800083e:	e011      	b.n	8000864 <readDHT11+0x208>
	{
		tempVal += mData[i];
 8000840:	f107 0208 	add.w	r2, r7, #8
 8000844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000846:	4413      	add	r3, r2
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800084e:	4413      	add	r3, r2
 8000850:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 8000854:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 800085e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000860:	3301      	adds	r3, #1
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000866:	2b17      	cmp	r3, #23
 8000868:	ddea      	ble.n	8000840 <readDHT11+0x1e4>
	}

	for(int i = 32; i < 40; i++)
 800086a:	2320      	movs	r3, #32
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
 800086e:	e011      	b.n	8000894 <readDHT11+0x238>
	{
		parityVal += mData[i];
 8000870:	f107 0208 	add.w	r2, r7, #8
 8000874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000876:	4413      	add	r3, r2
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800087e:	4413      	add	r3, r2
 8000880:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 8000884:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 800088e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000890:	3301      	adds	r3, #1
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
 8000894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000896:	2b27      	cmp	r3, #39	; 0x27
 8000898:	ddea      	ble.n	8000870 <readDHT11+0x214>
	}

	parityVal = parityVal >> 1;
 800089a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800089e:	085b      	lsrs	r3, r3, #1
 80008a0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 80008a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 80008ae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008b2:	085b      	lsrs	r3, r3, #1
 80008b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	genParity = humVal + tempVal;
 80008b8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80008bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008c0:	4413      	add	r3, r2
 80008c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if(genParity == parityVal)
 80008c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80008ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d104      	bne.n	80008dc <readDHT11+0x280>

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	4808      	ldr	r0, [pc, #32]	; (80008f8 <readDHT11+0x29c>)
 80008d8:	f000 fe7e 	bl	80015d8 <HAL_GPIO_WritePin>

	pData[0] = tempVal;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80008e2:	701a      	strb	r2, [r3, #0]
	pData[1] = humVal;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3301      	adds	r3, #1
 80008e8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80008ec:	701a      	strb	r2, [r3, #0]

	return 1;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3750      	adds	r7, #80	; 0x50
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40020400 	.word	0x40020400
 80008fc:	2000010c 	.word	0x2000010c

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f000 fb41 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f84f 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f000 f945 	bl	8000b9c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000912:	f000 f913 	bl	8000b3c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000916:	f000 f8db 	bl	8000ad0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800091a:	481d      	ldr	r0, [pc, #116]	; (8000990 <main+0x90>)
 800091c:	f001 ff9f 	bl	800285e <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000920:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000924:	481b      	ldr	r0, [pc, #108]	; (8000994 <main+0x94>)
 8000926:	f000 fe70 	bl	800160a <HAL_GPIO_TogglePin>

	  if(readDHT11(dhtVal))
 800092a:	481b      	ldr	r0, [pc, #108]	; (8000998 <main+0x98>)
 800092c:	f7ff fe96 	bl	800065c <readDHT11>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d011      	beq.n	800095a <main+0x5a>
	  {

		  uint16_t len = sprintf(sendData, "Hum: %d Temp: %d\n\r", dhtVal[1], dhtVal[0]);
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <main+0x98>)
 8000938:	785b      	ldrb	r3, [r3, #1]
 800093a:	461a      	mov	r2, r3
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <main+0x98>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4916      	ldr	r1, [pc, #88]	; (800099c <main+0x9c>)
 8000942:	4817      	ldr	r0, [pc, #92]	; (80009a0 <main+0xa0>)
 8000944:	f002 fd6a 	bl	800341c <siprintf>
 8000948:	4603      	mov	r3, r0
 800094a:	80fb      	strh	r3, [r7, #6]

	  	  HAL_UART_Transmit(&huart3, (uint8_t*)sendData, len, 100);
 800094c:	88fa      	ldrh	r2, [r7, #6]
 800094e:	2364      	movs	r3, #100	; 0x64
 8000950:	4913      	ldr	r1, [pc, #76]	; (80009a0 <main+0xa0>)
 8000952:	4814      	ldr	r0, [pc, #80]	; (80009a4 <main+0xa4>)
 8000954:	f002 f8f3 	bl	8002b3e <HAL_UART_Transmit>
 8000958:	e015      	b.n	8000986 <main+0x86>

	  }else{
		  uint16_t len = sprintf(sendData, "DHT Read Error!!\n\r");
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <main+0xa0>)
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <main+0xa8>)
 800095e:	4615      	mov	r5, r2
 8000960:	461c      	mov	r4, r3
 8000962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000964:	6028      	str	r0, [r5, #0]
 8000966:	6069      	str	r1, [r5, #4]
 8000968:	60aa      	str	r2, [r5, #8]
 800096a:	60eb      	str	r3, [r5, #12]
 800096c:	8823      	ldrh	r3, [r4, #0]
 800096e:	78a2      	ldrb	r2, [r4, #2]
 8000970:	822b      	strh	r3, [r5, #16]
 8000972:	4613      	mov	r3, r2
 8000974:	74ab      	strb	r3, [r5, #18]
 8000976:	2312      	movs	r3, #18
 8000978:	80bb      	strh	r3, [r7, #4]

		  HAL_UART_Transmit(&huart3, (uint8_t*)sendData, len, 100);
 800097a:	88ba      	ldrh	r2, [r7, #4]
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <main+0xa0>)
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <main+0xa4>)
 8000982:	f002 f8dc 	bl	8002b3e <HAL_UART_Transmit>
	  }

	  HAL_Delay(3000);
 8000986:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800098a:	f000 fb5d 	bl	8001048 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800098e:	e7c7      	b.n	8000920 <main+0x20>
 8000990:	2000010c 	.word	0x2000010c
 8000994:	40020400 	.word	0x40020400
 8000998:	20000108 	.word	0x20000108
 800099c:	08003c8c 	.word	0x08003c8c
 80009a0:	2000014c 	.word	0x2000014c
 80009a4:	20000098 	.word	0x20000098
 80009a8:	08003ca0 	.word	0x08003ca0

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0b8      	sub	sp, #224	; 0xe0
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009b6:	2234      	movs	r2, #52	; 0x34
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fd26 	bl	800340c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2290      	movs	r2, #144	; 0x90
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 fd17 	bl	800340c <memset>

  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80009de:	f000 fe27 	bl	8001630 <HAL_PWR_EnableBkUpAccess>
  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4a39      	ldr	r2, [pc, #228]	; (8000ac8 <SystemClock_Config+0x11c>)
 80009e4:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <SystemClock_Config+0x11c>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <SystemClock_Config+0x11c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fa:	4a34      	ldr	r2, [pc, #208]	; (8000acc <SystemClock_Config+0x120>)
 80009fc:	4b33      	ldr	r3, [pc, #204]	; (8000acc <SystemClock_Config+0x120>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	4b31      	ldr	r3, [pc, #196]	; (8000acc <SystemClock_Config+0x120>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a12:	2301      	movs	r3, #1
 8000a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a20:	2302      	movs	r3, #2
 8000a22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a34:	23d8      	movs	r3, #216	; 0xd8
 8000a36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a40:	2309      	movs	r3, #9
 8000a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fe50 	bl	80016f0 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a56:	f000 f9a5 	bl	8000da4 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a5a:	f000 fdf9 	bl	8001650 <HAL_PWREx_EnableOverDrive>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000a64:	f000 f99e 	bl	8000da4 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a8e:	2107      	movs	r1, #7
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 f89f 	bl	8001bd4 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a9c:	f000 f982 	bl	8000da4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fa84 	bl	8001fbc <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000aba:	f000 f973 	bl	8000da4 <Error_Handler>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	37e0      	adds	r7, #224	; 0xe0
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000

08000ad0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_TIM6_Init+0x64>)
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <MX_TIM6_Init+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_TIM6_Init+0x64>)
 8000ae8:	226c      	movs	r2, #108	; 0x6c
 8000aea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_TIM6_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_TIM6_Init+0x64>)
 8000af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_TIM6_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_TIM6_Init+0x64>)
 8000b02:	f001 fe81 	bl	8002808 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b0c:	f000 f94a 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_TIM6_Init+0x64>)
 8000b1e:	f001 ff69 	bl	80029f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b28:	f000 f93c 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000010c 	.word	0x2000010c
 8000b38:	40001000 	.word	0x40001000

08000b3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <MX_USART3_UART_Init+0x5c>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b80:	f001 ff8c 	bl	8002a9c <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b8a:	f000 f90b 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000098 	.word	0x20000098
 8000b98:	40004800 	.word	0x40004800

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4a76      	ldr	r2, [pc, #472]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000bb4:	4b75      	ldr	r3, [pc, #468]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b73      	ldr	r3, [pc, #460]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	4a70      	ldr	r2, [pc, #448]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000bcc:	4b6f      	ldr	r3, [pc, #444]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b6d      	ldr	r3, [pc, #436]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4a6a      	ldr	r2, [pc, #424]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000be4:	4b69      	ldr	r3, [pc, #420]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b67      	ldr	r3, [pc, #412]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4a64      	ldr	r2, [pc, #400]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000bfc:	4b63      	ldr	r3, [pc, #396]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b61      	ldr	r3, [pc, #388]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c12:	4a5e      	ldr	r2, [pc, #376]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000c14:	4b5d      	ldr	r3, [pc, #372]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b5b      	ldr	r3, [pc, #364]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2a:	4a58      	ldr	r2, [pc, #352]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000c2c:	4b57      	ldr	r3, [pc, #348]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b55      	ldr	r3, [pc, #340]	; (8000d8c <MX_GPIO_Init+0x1f0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|DHT11_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f244 0190 	movw	r1, #16528	; 0x4090
 8000c48:	4851      	ldr	r0, [pc, #324]	; (8000d90 <MX_GPIO_Init+0x1f4>)
 8000c4a:	f000 fcc5 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	4850      	ldr	r0, [pc, #320]	; (8000d94 <MX_GPIO_Init+0x1f8>)
 8000c54:	f000 fcc0 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5e:	4b4e      	ldr	r3, [pc, #312]	; (8000d98 <MX_GPIO_Init+0x1fc>)
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	484b      	ldr	r0, [pc, #300]	; (8000d9c <MX_GPIO_Init+0x200>)
 8000c6e:	f000 faf1 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c72:	2332      	movs	r3, #50	; 0x32
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c82:	230b      	movs	r3, #11
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4843      	ldr	r0, [pc, #268]	; (8000d9c <MX_GPIO_Init+0x200>)
 8000c8e:	f000 fae1 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c92:	2386      	movs	r3, #134	; 0x86
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca2:	230b      	movs	r3, #11
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	483c      	ldr	r0, [pc, #240]	; (8000da0 <MX_GPIO_Init+0x204>)
 8000cae:	f000 fad1 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4830      	ldr	r0, [pc, #192]	; (8000d90 <MX_GPIO_Init+0x1f4>)
 8000cd0:	f000 fac0 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin DHT11_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|DHT11_Pin|LD2_Pin;
 8000cd4:	f244 0390 	movw	r3, #16528	; 0x4090
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4828      	ldr	r0, [pc, #160]	; (8000d90 <MX_GPIO_Init+0x1f4>)
 8000cee:	f000 fab1 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4822      	ldr	r0, [pc, #136]	; (8000d94 <MX_GPIO_Init+0x1f8>)
 8000d0a:	f000 faa3 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481c      	ldr	r0, [pc, #112]	; (8000d94 <MX_GPIO_Init+0x1f8>)
 8000d22:	f000 fa97 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d26:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d38:	230a      	movs	r3, #10
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4817      	ldr	r0, [pc, #92]	; (8000da0 <MX_GPIO_Init+0x204>)
 8000d44:	f000 fa86 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4810      	ldr	r0, [pc, #64]	; (8000da0 <MX_GPIO_Init+0x204>)
 8000d5e:	f000 fa79 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d74:	230b      	movs	r3, #11
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_GPIO_Init+0x1f8>)
 8000d80:	f000 fa68 	bl	8001254 <HAL_GPIO_Init>

}
 8000d84:	bf00      	nop
 8000d86:	3730      	adds	r7, #48	; 0x30
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40021800 	.word	0x40021800
 8000d98:	10110000 	.word	0x10110000
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020000 	.word	0x40020000

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <HAL_MspInit+0x44>)
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_MspInit+0x44>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_MspInit+0x44>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_MspInit+0x44>)
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_MspInit+0x44>)
 8000dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_MspInit+0x44>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM6)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_TIM_Base_MspInit+0x38>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d10b      	bne.n	8000e26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_TIM_Base_MspInit+0x3c>)
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_TIM_Base_MspInit+0x3c>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f043 0310 	orr.w	r3, r3, #16
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_TIM_Base_MspInit+0x3c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40001000 	.word	0x40001000
 8000e38:	40023800 	.word	0x40023800

08000e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_UART_MspInit+0x7c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d128      	bne.n	8000eb0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0x80>)
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_UART_MspInit+0x80>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_UART_MspInit+0x80>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <HAL_UART_MspInit+0x80>)
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_UART_MspInit+0x80>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_UART_MspInit+0x80>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_UART_MspInit+0x84>)
 8000eac:	f000 f9d2 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	; 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40004800 	.word	0x40004800
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f876 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <SystemInit+0x5c>)
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <SystemInit+0x5c>)
 8000f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <SystemInit+0x60>)
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <SystemInit+0x60>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <SystemInit+0x60>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f46:	490e      	ldr	r1, [pc, #56]	; (8000f80 <SystemInit+0x60>)
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <SystemInit+0x60>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <SystemInit+0x64>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <SystemInit+0x60>)
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <SystemInit+0x68>)
 8000f56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <SystemInit+0x60>)
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <SystemInit+0x60>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <SystemInit+0x60>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SystemInit+0x5c>)
 8000f6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f70:	609a      	str	r2, [r3, #8]
#endif
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00
 8000f80:	40023800 	.word	0x40023800
 8000f84:	fef6ffff 	.word	0xfef6ffff
 8000f88:	24003010 	.word	0x24003010

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f92b 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f806 	bl	8000fa8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff ff0a 	bl	8000db4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x54>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f937 	bl	800123a <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f000 f90d 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_InitTick+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	200001cc 	.word	0x200001cc

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200001cc 	.word	0x200001cc

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff ffee 	bl	8001030 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_Delay+0x40>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffde 	bl	8001030 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3f7      	bcc.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000008 	.word	0x20000008

0800108c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <NVIC_SetPriorityGrouping+0x40>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <NVIC_SetPriorityGrouping+0x44>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <NVIC_SetPriorityGrouping+0x40>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	05fa0000 	.word	0x05fa0000

080010d4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	da0b      	bge.n	800111c <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	490d      	ldr	r1, [pc, #52]	; (800113c <NVIC_SetPriority+0x4c>)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	3b04      	subs	r3, #4
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111a:	e009      	b.n	8001130 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	4908      	ldr	r1, [pc, #32]	; (8001140 <NVIC_SetPriority+0x50>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	e000e100 	.word	0xe000e100

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	2201      	movs	r2, #1
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	1e5a      	subs	r2, r3, #1
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	401a      	ands	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118a:	2101      	movs	r1, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	1e59      	subs	r1, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff90 	bl	80010f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff49 	bl	800108c <NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff5e 	bl	80010d4 <NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff90 	bl	8001144 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5f 	bl	80010f0 <NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffb0 	bl	80011a8 <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	e175      	b.n	8001560 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 8164 	bne.w	800155a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x4e>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b12      	cmp	r3, #18
 80012a0:	d123      	bne.n	80012ea <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0203 	and.w	r2, r3, #3
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d00b      	beq.n	800133e <HAL_GPIO_Init+0xea>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001332:	2b11      	cmp	r3, #17
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b12      	cmp	r3, #18
 800133c:	d130      	bne.n	80013a0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80be 	beq.w	800155a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	4a65      	ldr	r2, [pc, #404]	; (8001574 <HAL_GPIO_Init+0x320>)
 80013e0:	4b64      	ldr	r3, [pc, #400]	; (8001574 <HAL_GPIO_Init+0x320>)
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b62      	ldr	r3, [pc, #392]	; (8001574 <HAL_GPIO_Init+0x320>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013f6:	4a60      	ldr	r2, [pc, #384]	; (8001578 <HAL_GPIO_Init+0x324>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a57      	ldr	r2, [pc, #348]	; (800157c <HAL_GPIO_Init+0x328>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d037      	beq.n	8001492 <HAL_GPIO_Init+0x23e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a56      	ldr	r2, [pc, #344]	; (8001580 <HAL_GPIO_Init+0x32c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d031      	beq.n	800148e <HAL_GPIO_Init+0x23a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a55      	ldr	r2, [pc, #340]	; (8001584 <HAL_GPIO_Init+0x330>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d02b      	beq.n	800148a <HAL_GPIO_Init+0x236>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a54      	ldr	r2, [pc, #336]	; (8001588 <HAL_GPIO_Init+0x334>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d025      	beq.n	8001486 <HAL_GPIO_Init+0x232>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a53      	ldr	r2, [pc, #332]	; (800158c <HAL_GPIO_Init+0x338>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d01f      	beq.n	8001482 <HAL_GPIO_Init+0x22e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_GPIO_Init+0x33c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d019      	beq.n	800147e <HAL_GPIO_Init+0x22a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_GPIO_Init+0x340>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0x226>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a50      	ldr	r2, [pc, #320]	; (8001598 <HAL_GPIO_Init+0x344>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00d      	beq.n	8001476 <HAL_GPIO_Init+0x222>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4f      	ldr	r2, [pc, #316]	; (800159c <HAL_GPIO_Init+0x348>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x21e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4e      	ldr	r2, [pc, #312]	; (80015a0 <HAL_GPIO_Init+0x34c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_GPIO_Init+0x21a>
 800146a:	2309      	movs	r3, #9
 800146c:	e012      	b.n	8001494 <HAL_GPIO_Init+0x240>
 800146e:	230a      	movs	r3, #10
 8001470:	e010      	b.n	8001494 <HAL_GPIO_Init+0x240>
 8001472:	2308      	movs	r3, #8
 8001474:	e00e      	b.n	8001494 <HAL_GPIO_Init+0x240>
 8001476:	2307      	movs	r3, #7
 8001478:	e00c      	b.n	8001494 <HAL_GPIO_Init+0x240>
 800147a:	2306      	movs	r3, #6
 800147c:	e00a      	b.n	8001494 <HAL_GPIO_Init+0x240>
 800147e:	2305      	movs	r3, #5
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x240>
 8001482:	2304      	movs	r3, #4
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x240>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x240>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x240>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x240>
 8001492:	2300      	movs	r3, #0
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	f002 0203 	and.w	r2, r2, #3
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4093      	lsls	r3, r2
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014a4:	4934      	ldr	r1, [pc, #208]	; (8001578 <HAL_GPIO_Init+0x324>)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <HAL_GPIO_Init+0x350>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d6:	4a33      	ldr	r2, [pc, #204]	; (80015a4 <HAL_GPIO_Init+0x350>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <HAL_GPIO_Init+0x350>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001500:	4a28      	ldr	r2, [pc, #160]	; (80015a4 <HAL_GPIO_Init+0x350>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001506:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_GPIO_Init+0x350>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_GPIO_Init+0x350>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_GPIO_Init+0x350>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001554:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <HAL_GPIO_Init+0x350>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3301      	adds	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	f67f ae86 	bls.w	8001274 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001568:	bf00      	nop
 800156a:	3724      	adds	r7, #36	; 0x24
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40023800 	.word	0x40023800
 8001578:	40013800 	.word	0x40013800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400
 8001584:	40020800 	.word	0x40020800
 8001588:	40020c00 	.word	0x40020c00
 800158c:	40021000 	.word	0x40021000
 8001590:	40021400 	.word	0x40021400
 8001594:	40021800 	.word	0x40021800
 8001598:	40021c00 	.word	0x40021c00
 800159c:	40022000 	.word	0x40022000
 80015a0:	40022400 	.word	0x40022400
 80015a4:	40013c00 	.word	0x40013c00

080015a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	887b      	ldrh	r3, [r7, #2]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e001      	b.n	80015ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015f4:	e003      	b.n	80015fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	041a      	lsls	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	619a      	str	r2, [r3, #24]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	405a      	eors	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	615a      	str	r2, [r3, #20]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001634:	4a05      	ldr	r2, [pc, #20]	; (800164c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40007000 	.word	0x40007000

08001650 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001672:	4a1e      	ldr	r2, [pc, #120]	; (80016ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800167e:	f7ff fcd7 	bl	8001030 <HAL_GetTick>
 8001682:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001684:	e009      	b.n	800169a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001686:	f7ff fcd3 	bl	8001030 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001694:	d901      	bls.n	800169a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e022      	b.n	80016e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a6:	d1ee      	bne.n	8001686 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b4:	f7ff fcbc 	bl	8001030 <HAL_GetTick>
 80016b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016ba:	e009      	b.n	80016d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016bc:	f7ff fcb8 	bl	8001030 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ca:	d901      	bls.n	80016d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e007      	b.n	80016e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016dc:	d1ee      	bne.n	80016bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40007000 	.word	0x40007000

080016f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e25e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8087 	beq.w	8001822 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001714:	4b96      	ldr	r3, [pc, #600]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b04      	cmp	r3, #4
 800171e:	d00c      	beq.n	800173a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001720:	4b93      	ldr	r3, [pc, #588]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d112      	bne.n	8001752 <HAL_RCC_OscConfig+0x62>
 800172c:	4b90      	ldr	r3, [pc, #576]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001738:	d10b      	bne.n	8001752 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173a:	4b8d      	ldr	r3, [pc, #564]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d06c      	beq.n	8001820 <HAL_RCC_OscConfig+0x130>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d168      	bne.n	8001820 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e238      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x7a>
 800175c:	4a84      	ldr	r2, [pc, #528]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800175e:	4b84      	ldr	r3, [pc, #528]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e02e      	b.n	80017c8 <HAL_RCC_OscConfig+0xd8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x9c>
 8001772:	4a7f      	ldr	r2, [pc, #508]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001774:	4b7e      	ldr	r3, [pc, #504]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4a7c      	ldr	r2, [pc, #496]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001780:	4b7b      	ldr	r3, [pc, #492]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xd8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0xc0>
 8001796:	4a76      	ldr	r2, [pc, #472]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001798:	4b75      	ldr	r3, [pc, #468]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4a73      	ldr	r2, [pc, #460]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017a4:	4b72      	ldr	r3, [pc, #456]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xd8>
 80017b0:	4a6f      	ldr	r2, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017b2:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4a6c      	ldr	r2, [pc, #432]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017be:	4b6c      	ldr	r3, [pc, #432]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc2e 	bl	8001030 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fc2a 	bl	8001030 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1ec      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xe8>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fc1a 	bl	8001030 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fc16 	bl	8001030 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1d8      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	4b57      	ldr	r3, [pc, #348]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x110>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d069      	beq.n	8001902 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800182e:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d11c      	bne.n	8001880 <HAL_RCC_OscConfig+0x190>
 8001846:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x17a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e1ac      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4941      	ldr	r1, [pc, #260]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800186c:	4b40      	ldr	r3, [pc, #256]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	e040      	b.n	8001902 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d023      	beq.n	80018d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4a39      	ldr	r2, [pc, #228]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff fbcc 	bl	8001030 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff fbc8 	bl	8001030 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e18a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	492d      	ldr	r1, [pc, #180]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018bc:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
 80018ce:	e018      	b.n	8001902 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d0:	4a27      	ldr	r2, [pc, #156]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fba8 	bl	8001030 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff fba4 	bl	8001030 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e166      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d038      	beq.n	8001980 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d019      	beq.n	800194a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4a16      	ldr	r2, [pc, #88]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800191a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff fb85 	bl	8001030 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192a:	f7ff fb81 	bl	8001030 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e143      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800193e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x23a>
 8001948:	e01a      	b.n	8001980 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800194e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff fb6b 	bl	8001030 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fb67 	bl	8001030 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d903      	bls.n	8001974 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e129      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
 8001970:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	4b95      	ldr	r3, [pc, #596]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ee      	bne.n	800195e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a4 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b8f      	ldr	r3, [pc, #572]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4a8c      	ldr	r2, [pc, #560]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 800199c:	4b8b      	ldr	r3, [pc, #556]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b89      	ldr	r3, [pc, #548]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b6:	4b86      	ldr	r3, [pc, #536]	; (8001bd0 <HAL_RCC_OscConfig+0x4e0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019c2:	4a83      	ldr	r2, [pc, #524]	; (8001bd0 <HAL_RCC_OscConfig+0x4e0>)
 80019c4:	4b82      	ldr	r3, [pc, #520]	; (8001bd0 <HAL_RCC_OscConfig+0x4e0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7ff fb2f 	bl	8001030 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff fb2b 	bl	8001030 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	; 0x64
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e0ed      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e8:	4b79      	ldr	r3, [pc, #484]	; (8001bd0 <HAL_RCC_OscConfig+0x4e0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x31a>
 80019fc:	4a73      	ldr	r2, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 80019fe:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	; 0x70
 8001a08:	e02d      	b.n	8001a66 <HAL_RCC_OscConfig+0x376>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x33c>
 8001a12:	4a6e      	ldr	r2, [pc, #440]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a14:	4b6d      	ldr	r3, [pc, #436]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1e:	4a6b      	ldr	r2, [pc, #428]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a20:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2a:	e01c      	b.n	8001a66 <HAL_RCC_OscConfig+0x376>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x35e>
 8001a34:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a36:	4b65      	ldr	r3, [pc, #404]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a40:	4a62      	ldr	r2, [pc, #392]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a42:	4b62      	ldr	r3, [pc, #392]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4c:	e00b      	b.n	8001a66 <HAL_RCC_OscConfig+0x376>
 8001a4e:	4a5f      	ldr	r2, [pc, #380]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a50:	4b5e      	ldr	r3, [pc, #376]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5a:	4a5c      	ldr	r2, [pc, #368]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a5c:	4b5b      	ldr	r3, [pc, #364]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d015      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fadf 	bl	8001030 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff fadb 	bl	8001030 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e09b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8c:	4b4f      	ldr	r3, [pc, #316]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ee      	beq.n	8001a76 <HAL_RCC_OscConfig+0x386>
 8001a98:	e014      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fac9 	bl	8001030 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7ff fac5 	bl	8001030 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e085      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ee      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d105      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aca:	4a40      	ldr	r2, [pc, #256]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001acc:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d071      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d069      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d14b      	bne.n	8001b8a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4a36      	ldr	r2, [pc, #216]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff fa97 	bl	8001030 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff fa93 	bl	8001030 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e055      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b18:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b24:	4929      	ldr	r1, [pc, #164]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	061b      	lsls	r3, r3, #24
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	071b      	lsls	r3, r3, #28
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b56:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001b58:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fa65 	bl	8001030 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff fa61 	bl	8001030 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e023      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x47a>
 8001b88:	e01b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff fa4b 	bl	8001030 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fa47 	bl	8001030 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e009      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_OscConfig+0x4dc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4ae>
 8001bbc:	e001      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40007000 	.word	0x40007000

08001bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0ce      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b69      	ldr	r3, [pc, #420]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 020f 	and.w	r2, r3, #15
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d210      	bcs.n	8001c1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4966      	ldr	r1, [pc, #408]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 020f 	bic.w	r2, r3, #15
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b62      	ldr	r3, [pc, #392]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 020f 	and.w	r2, r3, #15
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0b6      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c34:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	4b58      	ldr	r3, [pc, #352]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c4c:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	4b52      	ldr	r3, [pc, #328]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	494f      	ldr	r1, [pc, #316]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d040      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d115      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e07d      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c96:	4b40      	ldr	r3, [pc, #256]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e071      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca6:	4b3c      	ldr	r3, [pc, #240]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e069      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb6:	4938      	ldr	r1, [pc, #224]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	4b37      	ldr	r3, [pc, #220]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f023 0203 	bic.w	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc8:	f7ff f9b2 	bl	8001030 <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd0:	f7ff f9ae 	bl	8001030 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e051      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 020c 	and.w	r2, r3, #12
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1eb      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 020f 	and.w	r2, r3, #15
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d910      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4923      	ldr	r1, [pc, #140]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 020f 	bic.w	r2, r3, #15
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 020f 	and.w	r2, r3, #15
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e030      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d34:	4918      	ldr	r1, [pc, #96]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d52:	4911      	ldr	r1, [pc, #68]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d66:	f000 f81d 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <HAL_RCC_ClockConfig+0x1c8>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff f910 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08003cb4 	.word	0x08003cb4
 8001da0:	20000000 	.word	0x20000000

08001da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da8:	b08f      	sub	sp, #60	; 0x3c
 8001daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db0:	2300      	movs	r3, #0
 8001db2:	637b      	str	r3, [r7, #52]	; 0x34
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dbc:	4b62      	ldr	r3, [pc, #392]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d007      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x3a>
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 80b2 	bne.w	8001f36 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dd2:	4b5e      	ldr	r3, [pc, #376]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001dd6:	e0b1      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dd8:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ddc:	e0ae      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dde:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001de8:	4b57      	ldr	r3, [pc, #348]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d04e      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df4:	4b54      	ldr	r3, [pc, #336]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	f04f 0400 	mov.w	r4, #0
 8001dfe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	ea01 0103 	and.w	r1, r1, r3
 8001e0a:	ea02 0204 	and.w	r2, r2, r4
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4614      	mov	r4, r2
 8001e12:	0160      	lsls	r0, r4, #5
 8001e14:	6278      	str	r0, [r7, #36]	; 0x24
 8001e16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e18:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001e1c:	6278      	str	r0, [r7, #36]	; 0x24
 8001e1e:	015b      	lsls	r3, r3, #5
 8001e20:	623b      	str	r3, [r7, #32]
 8001e22:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001e26:	1a5b      	subs	r3, r3, r1
 8001e28:	eb64 0402 	sbc.w	r4, r4, r2
 8001e2c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001e30:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001e34:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001e38:	ebb8 0803 	subs.w	r8, r8, r3
 8001e3c:	eb69 0904 	sbc.w	r9, r9, r4
 8001e40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001e58:	eb18 0801 	adds.w	r8, r8, r1
 8001e5c:	eb49 0902 	adc.w	r9, r9, r2
 8001e60:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001e78:	4640      	mov	r0, r8
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	f04f 0400 	mov.w	r4, #0
 8001e82:	461a      	mov	r2, r3
 8001e84:	4623      	mov	r3, r4
 8001e86:	f7fe fa2b 	bl	80002e0 <__aeabi_uldivmod>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e90:	e043      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	099b      	lsrs	r3, r3, #6
 8001e98:	f04f 0400 	mov.w	r4, #0
 8001e9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	ea01 0103 	and.w	r1, r1, r3
 8001ea8:	ea02 0204 	and.w	r2, r2, r4
 8001eac:	460b      	mov	r3, r1
 8001eae:	4614      	mov	r4, r2
 8001eb0:	0160      	lsls	r0, r4, #5
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	015b      	lsls	r3, r3, #5
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ec4:	1a5b      	subs	r3, r3, r1
 8001ec6:	eb64 0402 	sbc.w	r4, r4, r2
 8001eca:	01a6      	lsls	r6, r4, #6
 8001ecc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001ed0:	019d      	lsls	r5, r3, #6
 8001ed2:	1aed      	subs	r5, r5, r3
 8001ed4:	eb66 0604 	sbc.w	r6, r6, r4
 8001ed8:	00f3      	lsls	r3, r6, #3
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	00eb      	lsls	r3, r5, #3
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001eec:	186d      	adds	r5, r5, r1
 8001eee:	eb46 0602 	adc.w	r6, r6, r2
 8001ef2:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001ef6:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001efa:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001efe:	4655      	mov	r5, sl
 8001f00:	465e      	mov	r6, fp
 8001f02:	4628      	mov	r0, r5
 8001f04:	4631      	mov	r1, r6
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	f04f 0400 	mov.w	r4, #0
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4623      	mov	r3, r4
 8001f10:	f7fe f9e6 	bl	80002e0 <__aeabi_uldivmod>
 8001f14:	4603      	mov	r3, r0
 8001f16:	460c      	mov	r4, r1
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	0c1b      	lsrs	r3, r3, #16
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	3301      	adds	r3, #1
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f34:	e002      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	373c      	adds	r7, #60	; 0x3c
 8001f42:	46bd      	mov	sp, r7
 8001f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	00f42400 	.word	0x00f42400
 8001f50:	007a1200 	.word	0x007a1200

08001f54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000000 	.word	0x20000000

08001f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f70:	f7ff fff0 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f74:	4601      	mov	r1, r0
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	0a9b      	lsrs	r3, r3, #10
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	4a03      	ldr	r2, [pc, #12]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f82:	5cd3      	ldrb	r3, [r2, r3]
 8001f84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	08003cc4 	.word	0x08003cc4

08001f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f98:	f7ff ffdc 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f9c:	4601      	mov	r1, r0
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0b5b      	lsrs	r3, r3, #13
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	08003cc4 	.word	0x08003cc4

08001fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d012      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fe4:	4a69      	ldr	r2, [pc, #420]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	4b69      	ldr	r3, [pc, #420]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fee:	6093      	str	r3, [r2, #8]
 8001ff0:	4966      	ldr	r1, [pc, #408]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff2:	4b66      	ldr	r3, [pc, #408]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002006:	2301      	movs	r3, #1
 8002008:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d017      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002016:	495d      	ldr	r1, [pc, #372]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002018:	4b5c      	ldr	r3, [pc, #368]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800201e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002034:	d101      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d017      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002052:	494e      	ldr	r1, [pc, #312]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002054:	4b4d      	ldr	r3, [pc, #308]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800205a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002070:	d101      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002072:	2301      	movs	r3, #1
 8002074:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800208e:	2301      	movs	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 808b 	beq.w	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4a3a      	ldr	r2, [pc, #232]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a2:	4b3a      	ldr	r3, [pc, #232]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020aa:	6413      	str	r3, [r2, #64]	; 0x40
 80020ac:	4b37      	ldr	r3, [pc, #220]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020b8:	4a35      	ldr	r2, [pc, #212]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ba:	4b35      	ldr	r3, [pc, #212]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c4:	f7fe ffb4 	bl	8001030 <HAL_GetTick>
 80020c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020cc:	f7fe ffb0 	bl	8001030 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e38d      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020de:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d035      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d02e      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002110:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002112:	4a1e      	ldr	r2, [pc, #120]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800211e:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002128:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800212a:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d014      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe ff78 	bl	8001030 <HAL_GetTick>
 8002140:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7fe ff74 	bl	8001030 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e34f      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0ee      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002172:	d111      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002184:	400b      	ands	r3, r1
 8002186:	4313      	orrs	r3, r2
 8002188:	6083      	str	r3, [r0, #8]
 800218a:	e00b      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800218c:	40023800 	.word	0x40023800
 8002190:	40007000 	.word	0x40007000
 8002194:	0ffffcff 	.word	0x0ffffcff
 8002198:	4ab2      	ldr	r2, [pc, #712]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800219a:	4bb2      	ldr	r3, [pc, #712]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021a2:	6093      	str	r3, [r2, #8]
 80021a4:	49af      	ldr	r1, [pc, #700]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80021a6:	4baf      	ldr	r3, [pc, #700]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80021a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b2:	4313      	orrs	r3, r2
 80021b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d010      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021c2:	4aa8      	ldr	r2, [pc, #672]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80021c4:	4ba7      	ldr	r3, [pc, #668]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80021c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021d2:	49a4      	ldr	r1, [pc, #656]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80021d4:	4ba3      	ldr	r3, [pc, #652]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80021d6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f0:	499c      	ldr	r1, [pc, #624]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80021f2:	4b9c      	ldr	r3, [pc, #624]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002212:	4994      	ldr	r1, [pc, #592]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002214:	4b93      	ldr	r3, [pc, #588]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002234:	498b      	ldr	r1, [pc, #556]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002236:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002256:	4983      	ldr	r1, [pc, #524]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002258:	4b82      	ldr	r3, [pc, #520]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002278:	497a      	ldr	r1, [pc, #488]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800227a:	4b7a      	ldr	r3, [pc, #488]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	f023 0203 	bic.w	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800229a:	4972      	ldr	r1, [pc, #456]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800229c:	4b71      	ldr	r3, [pc, #452]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	f023 020c 	bic.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022bc:	4969      	ldr	r1, [pc, #420]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80022be:	4b69      	ldr	r3, [pc, #420]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022de:	4961      	ldr	r1, [pc, #388]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80022e0:	4b60      	ldr	r3, [pc, #384]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002300:	4958      	ldr	r1, [pc, #352]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002302:	4b58      	ldr	r3, [pc, #352]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002322:	4950      	ldr	r1, [pc, #320]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002324:	4b4f      	ldr	r3, [pc, #316]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002344:	4947      	ldr	r1, [pc, #284]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002366:	493f      	ldr	r1, [pc, #252]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002368:	4b3e      	ldr	r3, [pc, #248]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002388:	4936      	ldr	r1, [pc, #216]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800238a:	4b36      	ldr	r3, [pc, #216]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d011      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023aa:	492e      	ldr	r1, [pc, #184]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c8:	d101      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023ca:	2301      	movs	r3, #1
 80023cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023da:	2301      	movs	r3, #1
 80023dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ea:	491e      	ldr	r1, [pc, #120]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800240c:	4915      	ldr	r1, [pc, #84]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00b      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00e      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002454:	4903      	ldr	r1, [pc, #12]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002456:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800245c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	e001      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002464:	40023800 	.word	0x40023800
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800247e:	4981      	ldr	r1, [pc, #516]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002480:	4b80      	ldr	r3, [pc, #512]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002486:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d005      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024a4:	f040 80d6 	bne.w	8002654 <HAL_RCCEx_PeriphCLKConfig+0x698>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024a8:	4a76      	ldr	r2, [pc, #472]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7fe fdbc 	bl	8001030 <HAL_GetTick>
 80024b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x512>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024bc:	f7fe fdb8 	bl	8001030 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x512>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e195      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024ce:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x500>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d021      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d11d      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x56e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024ee:	4b65      	ldr	r3, [pc, #404]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80024f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024fc:	4b61      	ldr	r3, [pc, #388]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80024fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002502:	0e1b      	lsrs	r3, r3, #24
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800250a:	495e      	ldr	r1, [pc, #376]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	019a      	lsls	r2, r3, #6
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	041b      	lsls	r3, r3, #16
 8002516:	431a      	orrs	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	061b      	lsls	r3, r3, #24
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	071b      	lsls	r3, r3, #28
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x59a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002548:	2b00      	cmp	r3, #0
 800254a:	d02e      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x5ee>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002554:	d129      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002556:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002564:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256a:	0f1b      	lsrs	r3, r3, #28
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002572:	4944      	ldr	r1, [pc, #272]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	019a      	lsls	r2, r3, #6
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	431a      	orrs	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	071b      	lsls	r3, r3, #28
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002592:	493c      	ldr	r1, [pc, #240]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002594:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800259a:	f023 021f 	bic.w	r2, r3, #31
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	3b01      	subs	r3, #1
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01d      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025b6:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025bc:	0e1b      	lsrs	r3, r3, #24
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025c4:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ca:	0f1b      	lsrs	r3, r3, #28
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025d2:	492c      	ldr	r1, [pc, #176]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	019a      	lsls	r2, r3, #6
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	431a      	orrs	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	071b      	lsls	r3, r3, #28
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d011      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x666>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025fe:	4921      	ldr	r1, [pc, #132]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	019a      	lsls	r2, r3, #6
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	061b      	lsls	r3, r3, #24
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	071b      	lsls	r3, r3, #28
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002622:	4a18      	ldr	r2, [pc, #96]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800262c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800262e:	f7fe fcff 	bl	8001030 <HAL_GetTick>
 8002632:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002636:	f7fe fcfb 	bl	8001030 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b64      	cmp	r3, #100	; 0x64
 8002642:	d901      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0d8      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b01      	cmp	r3, #1
 8002658:	f040 80ce 	bne.w	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800265c:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002668:	f7fe fce2 	bl	8001030 <HAL_GetTick>
 800266c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800266e:	e00b      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002670:	f7fe fcde 	bl	8001030 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d904      	bls.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e0bb      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002688:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002694:	d0ec      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x6b4>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d02e      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d12a      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026be:	4b51      	ldr	r3, [pc, #324]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026cc:	4b4d      	ldr	r3, [pc, #308]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	0f1b      	lsrs	r3, r3, #28
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026da:	494a      	ldr	r1, [pc, #296]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	019a      	lsls	r2, r3, #6
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	431a      	orrs	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	071b      	lsls	r3, r3, #28
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026fa:	4942      	ldr	r1, [pc, #264]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026fc:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002702:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	3b01      	subs	r3, #1
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d022      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002728:	d11d      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800272a:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	0e1b      	lsrs	r3, r3, #24
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002738:	4b32      	ldr	r3, [pc, #200]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	0f1b      	lsrs	r3, r3, #28
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002746:	492f      	ldr	r1, [pc, #188]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	019a      	lsls	r2, r3, #6
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	041b      	lsls	r3, r3, #16
 8002754:	431a      	orrs	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	431a      	orrs	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	071b      	lsls	r3, r3, #28
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d028      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002772:	4b24      	ldr	r3, [pc, #144]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	0e1b      	lsrs	r3, r3, #24
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	0c1b      	lsrs	r3, r3, #16
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800278e:	491d      	ldr	r1, [pc, #116]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	019a      	lsls	r2, r3, #6
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	041b      	lsls	r3, r3, #16
 800279a:	431a      	orrs	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	061b      	lsls	r3, r3, #24
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	071b      	lsls	r3, r3, #28
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027ae:	4915      	ldr	r1, [pc, #84]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027c4:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d0:	f7fe fc2e 	bl	8001030 <HAL_GetTick>
 80027d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027d8:	f7fe fc2a 	bl	8001030 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e007      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027f6:	d1ef      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e01d      	b.n	8002856 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fae4 	bl	8000dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 f824 	bl	8002894 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a47      	ldr	r2, [pc, #284]	; (80029c8 <TIM_Base_SetConfig+0x134>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <TIM_Base_SetConfig+0x44>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b6:	d00f      	beq.n	80028d8 <TIM_Base_SetConfig+0x44>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a44      	ldr	r2, [pc, #272]	; (80029cc <TIM_Base_SetConfig+0x138>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00b      	beq.n	80028d8 <TIM_Base_SetConfig+0x44>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a43      	ldr	r2, [pc, #268]	; (80029d0 <TIM_Base_SetConfig+0x13c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <TIM_Base_SetConfig+0x44>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a42      	ldr	r2, [pc, #264]	; (80029d4 <TIM_Base_SetConfig+0x140>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0x44>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a41      	ldr	r2, [pc, #260]	; (80029d8 <TIM_Base_SetConfig+0x144>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <TIM_Base_SetConfig+0x48>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <TIM_Base_SetConfig+0x4a>
 80028dc:	2300      	movs	r3, #0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a34      	ldr	r2, [pc, #208]	; (80029c8 <TIM_Base_SetConfig+0x134>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d02b      	beq.n	8002954 <TIM_Base_SetConfig+0xc0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002902:	d027      	beq.n	8002954 <TIM_Base_SetConfig+0xc0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a31      	ldr	r2, [pc, #196]	; (80029cc <TIM_Base_SetConfig+0x138>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d023      	beq.n	8002954 <TIM_Base_SetConfig+0xc0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <TIM_Base_SetConfig+0x13c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d01f      	beq.n	8002954 <TIM_Base_SetConfig+0xc0>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <TIM_Base_SetConfig+0x140>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d01b      	beq.n	8002954 <TIM_Base_SetConfig+0xc0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a2e      	ldr	r2, [pc, #184]	; (80029d8 <TIM_Base_SetConfig+0x144>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d017      	beq.n	8002954 <TIM_Base_SetConfig+0xc0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a2d      	ldr	r2, [pc, #180]	; (80029dc <TIM_Base_SetConfig+0x148>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d013      	beq.n	8002954 <TIM_Base_SetConfig+0xc0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a2c      	ldr	r2, [pc, #176]	; (80029e0 <TIM_Base_SetConfig+0x14c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00f      	beq.n	8002954 <TIM_Base_SetConfig+0xc0>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a2b      	ldr	r2, [pc, #172]	; (80029e4 <TIM_Base_SetConfig+0x150>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00b      	beq.n	8002954 <TIM_Base_SetConfig+0xc0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <TIM_Base_SetConfig+0x154>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d007      	beq.n	8002954 <TIM_Base_SetConfig+0xc0>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a29      	ldr	r2, [pc, #164]	; (80029ec <TIM_Base_SetConfig+0x158>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d003      	beq.n	8002954 <TIM_Base_SetConfig+0xc0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a28      	ldr	r2, [pc, #160]	; (80029f0 <TIM_Base_SetConfig+0x15c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d101      	bne.n	8002958 <TIM_Base_SetConfig+0xc4>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <TIM_Base_SetConfig+0xc6>
 8002958:	2300      	movs	r3, #0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a0c      	ldr	r2, [pc, #48]	; (80029c8 <TIM_Base_SetConfig+0x134>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0x110>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0e      	ldr	r2, [pc, #56]	; (80029d8 <TIM_Base_SetConfig+0x144>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <TIM_Base_SetConfig+0x114>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <TIM_Base_SetConfig+0x116>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	615a      	str	r2, [r3, #20]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40000c00 	.word	0x40000c00
 80029d8:	40010400 	.word	0x40010400
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40014400 	.word	0x40014400
 80029e4:	40014800 	.word	0x40014800
 80029e8:	40001800 	.word	0x40001800
 80029ec:	40001c00 	.word	0x40001c00
 80029f0:	40002000 	.word	0x40002000

080029f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e03d      	b.n	8002a88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a19      	ldr	r2, [pc, #100]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d108      	bne.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002a3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a62:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
} 
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40010400 	.word	0x40010400

08002a9c <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e043      	b.n	8002b36 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe f9ba 	bl	8000e3c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2224      	movs	r2, #36	; 0x24
 8002acc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f901 	bl	8002ce8 <UART_SetConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e022      	b.n	8002b36 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fb63 	bl	80031c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	6852      	ldr	r2, [r2, #4]
 8002b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	6892      	ldr	r2, [r2, #8]
 8002b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b1c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fbea 	bl	8003308 <UART_CheckIdleState>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b088      	sub	sp, #32
 8002b42:	af02      	add	r7, sp, #8
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d175      	bne.n	8002c4a <HAL_UART_Transmit+0x10c>
  {
    if((pData == NULL ) || (Size == 0U))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_UART_Transmit+0x2c>
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e06e      	b.n	8002c4c <HAL_UART_Transmit+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_UART_Transmit+0x3e>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e067      	b.n	8002c4c <HAL_UART_Transmit+0x10e>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2221      	movs	r2, #33	; 0x21
 8002b8e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b92:	f7fe fa4d 	bl	8001030 <HAL_GetTick>
 8002b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	88fa      	ldrh	r2, [r7, #6]
 8002ba4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002ba8:	e032      	b.n	8002c10 <HAL_UART_Transmit+0xd2>
    {
      huart->TxXferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f844 	bl	8002c54 <UART_WaitOnFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e03a      	b.n	8002c4c <HAL_UART_Transmit+0x10e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bde:	d110      	bne.n	8002c02 <HAL_UART_Transmit+0xc4>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10c      	bne.n	8002c02 <HAL_UART_Transmit+0xc4>
      {
        tmp = (uint16_t*) pData;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	8812      	ldrh	r2, [r2, #0]
 8002bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	e006      	b.n	8002c10 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1c59      	adds	r1, r3, #1
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	6293      	str	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1c6      	bne.n	8002baa <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2200      	movs	r2, #0
 8002c24:	2140      	movs	r1, #64	; 0x40
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f814 	bl	8002c54 <UART_WaitOnFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e00a      	b.n	8002c4c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c64:	e02c      	b.n	8002cc0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d028      	beq.n	8002cc0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c74:	f7fe f9dc 	bl	8001030 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	1ad2      	subs	r2, r2, r3
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d31d      	bcc.n	8002cc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c92:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	6892      	ldr	r2, [r2, #8]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e00f      	b.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	401a      	ands	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d0c3      	beq.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6819      	ldr	r1, [r3, #0]
 8002d26:	4baa      	ldr	r3, [pc, #680]	; (8002fd0 <UART_SetConfig+0x2e8>)
 8002d28:	400b      	ands	r3, r1
 8002d2a:	68f9      	ldr	r1, [r7, #12]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	6852      	ldr	r2, [r2, #4]
 8002d3a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68d2      	ldr	r2, [r2, #12]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	6892      	ldr	r2, [r2, #8]
 8002d5c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a9a      	ldr	r2, [pc, #616]	; (8002fd4 <UART_SetConfig+0x2ec>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d11f      	bne.n	8002db0 <UART_SetConfig+0xc8>
 8002d70:	4b99      	ldr	r3, [pc, #612]	; (8002fd8 <UART_SetConfig+0x2f0>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	f200 813e 	bhi.w	8002ffc <UART_SetConfig+0x314>
 8002d80:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <UART_SetConfig+0xa0>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002da5 	.word	0x08002da5
 8002d90:	08002d9f 	.word	0x08002d9f
 8002d94:	08002dab 	.word	0x08002dab
 8002d98:	2301      	movs	r3, #1
 8002d9a:	75fb      	strb	r3, [r7, #23]
 8002d9c:	e12e      	b.n	8002ffc <UART_SetConfig+0x314>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	75fb      	strb	r3, [r7, #23]
 8002da2:	e12b      	b.n	8002ffc <UART_SetConfig+0x314>
 8002da4:	2304      	movs	r3, #4
 8002da6:	75fb      	strb	r3, [r7, #23]
 8002da8:	e128      	b.n	8002ffc <UART_SetConfig+0x314>
 8002daa:	2308      	movs	r3, #8
 8002dac:	75fb      	strb	r3, [r7, #23]
 8002dae:	e125      	b.n	8002ffc <UART_SetConfig+0x314>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a89      	ldr	r2, [pc, #548]	; (8002fdc <UART_SetConfig+0x2f4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d130      	bne.n	8002e1c <UART_SetConfig+0x134>
 8002dba:	4b87      	ldr	r3, [pc, #540]	; (8002fd8 <UART_SetConfig+0x2f0>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b0c      	cmp	r3, #12
 8002dc6:	f200 8119 	bhi.w	8002ffc <UART_SetConfig+0x314>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <UART_SetConfig+0xe8>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002e05 	.word	0x08002e05
 8002dd4:	08002ffd 	.word	0x08002ffd
 8002dd8:	08002ffd 	.word	0x08002ffd
 8002ddc:	08002ffd 	.word	0x08002ffd
 8002de0:	08002e11 	.word	0x08002e11
 8002de4:	08002ffd 	.word	0x08002ffd
 8002de8:	08002ffd 	.word	0x08002ffd
 8002dec:	08002ffd 	.word	0x08002ffd
 8002df0:	08002e0b 	.word	0x08002e0b
 8002df4:	08002ffd 	.word	0x08002ffd
 8002df8:	08002ffd 	.word	0x08002ffd
 8002dfc:	08002ffd 	.word	0x08002ffd
 8002e00:	08002e17 	.word	0x08002e17
 8002e04:	2300      	movs	r3, #0
 8002e06:	75fb      	strb	r3, [r7, #23]
 8002e08:	e0f8      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	75fb      	strb	r3, [r7, #23]
 8002e0e:	e0f5      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e10:	2304      	movs	r3, #4
 8002e12:	75fb      	strb	r3, [r7, #23]
 8002e14:	e0f2      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e16:	2308      	movs	r3, #8
 8002e18:	75fb      	strb	r3, [r7, #23]
 8002e1a:	e0ef      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6f      	ldr	r2, [pc, #444]	; (8002fe0 <UART_SetConfig+0x2f8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d11c      	bne.n	8002e60 <UART_SetConfig+0x178>
 8002e26:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <UART_SetConfig+0x2f0>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d00f      	beq.n	8002e54 <UART_SetConfig+0x16c>
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d802      	bhi.n	8002e3e <UART_SetConfig+0x156>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <UART_SetConfig+0x160>
 8002e3c:	e0de      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d005      	beq.n	8002e4e <UART_SetConfig+0x166>
 8002e42:	2b30      	cmp	r3, #48	; 0x30
 8002e44:	d009      	beq.n	8002e5a <UART_SetConfig+0x172>
 8002e46:	e0d9      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	75fb      	strb	r3, [r7, #23]
 8002e4c:	e0d6      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	75fb      	strb	r3, [r7, #23]
 8002e52:	e0d3      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e54:	2304      	movs	r3, #4
 8002e56:	75fb      	strb	r3, [r7, #23]
 8002e58:	e0d0      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	75fb      	strb	r3, [r7, #23]
 8002e5e:	e0cd      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a5f      	ldr	r2, [pc, #380]	; (8002fe4 <UART_SetConfig+0x2fc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d11c      	bne.n	8002ea4 <UART_SetConfig+0x1bc>
 8002e6a:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <UART_SetConfig+0x2f0>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d00f      	beq.n	8002e98 <UART_SetConfig+0x1b0>
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	d802      	bhi.n	8002e82 <UART_SetConfig+0x19a>
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <UART_SetConfig+0x1a4>
 8002e80:	e0bc      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e82:	2b80      	cmp	r3, #128	; 0x80
 8002e84:	d005      	beq.n	8002e92 <UART_SetConfig+0x1aa>
 8002e86:	2bc0      	cmp	r3, #192	; 0xc0
 8002e88:	d009      	beq.n	8002e9e <UART_SetConfig+0x1b6>
 8002e8a:	e0b7      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]
 8002e90:	e0b4      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e92:	2302      	movs	r3, #2
 8002e94:	75fb      	strb	r3, [r7, #23]
 8002e96:	e0b1      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	75fb      	strb	r3, [r7, #23]
 8002e9c:	e0ae      	b.n	8002ffc <UART_SetConfig+0x314>
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	75fb      	strb	r3, [r7, #23]
 8002ea2:	e0ab      	b.n	8002ffc <UART_SetConfig+0x314>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a4f      	ldr	r2, [pc, #316]	; (8002fe8 <UART_SetConfig+0x300>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d120      	bne.n	8002ef0 <UART_SetConfig+0x208>
 8002eae:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <UART_SetConfig+0x2f0>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ebc:	d012      	beq.n	8002ee4 <UART_SetConfig+0x1fc>
 8002ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec2:	d802      	bhi.n	8002eca <UART_SetConfig+0x1e2>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <UART_SetConfig+0x1f0>
 8002ec8:	e098      	b.n	8002ffc <UART_SetConfig+0x314>
 8002eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ece:	d006      	beq.n	8002ede <UART_SetConfig+0x1f6>
 8002ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed4:	d009      	beq.n	8002eea <UART_SetConfig+0x202>
 8002ed6:	e091      	b.n	8002ffc <UART_SetConfig+0x314>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	75fb      	strb	r3, [r7, #23]
 8002edc:	e08e      	b.n	8002ffc <UART_SetConfig+0x314>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	75fb      	strb	r3, [r7, #23]
 8002ee2:	e08b      	b.n	8002ffc <UART_SetConfig+0x314>
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	75fb      	strb	r3, [r7, #23]
 8002ee8:	e088      	b.n	8002ffc <UART_SetConfig+0x314>
 8002eea:	2308      	movs	r3, #8
 8002eec:	75fb      	strb	r3, [r7, #23]
 8002eee:	e085      	b.n	8002ffc <UART_SetConfig+0x314>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3d      	ldr	r2, [pc, #244]	; (8002fec <UART_SetConfig+0x304>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d120      	bne.n	8002f3c <UART_SetConfig+0x254>
 8002efa:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <UART_SetConfig+0x2f0>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f08:	d012      	beq.n	8002f30 <UART_SetConfig+0x248>
 8002f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0e:	d802      	bhi.n	8002f16 <UART_SetConfig+0x22e>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d007      	beq.n	8002f24 <UART_SetConfig+0x23c>
 8002f14:	e072      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f1a:	d006      	beq.n	8002f2a <UART_SetConfig+0x242>
 8002f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f20:	d009      	beq.n	8002f36 <UART_SetConfig+0x24e>
 8002f22:	e06b      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f24:	2301      	movs	r3, #1
 8002f26:	75fb      	strb	r3, [r7, #23]
 8002f28:	e068      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	75fb      	strb	r3, [r7, #23]
 8002f2e:	e065      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f30:	2304      	movs	r3, #4
 8002f32:	75fb      	strb	r3, [r7, #23]
 8002f34:	e062      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f36:	2308      	movs	r3, #8
 8002f38:	75fb      	strb	r3, [r7, #23]
 8002f3a:	e05f      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2b      	ldr	r2, [pc, #172]	; (8002ff0 <UART_SetConfig+0x308>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d120      	bne.n	8002f88 <UART_SetConfig+0x2a0>
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <UART_SetConfig+0x2f0>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f54:	d012      	beq.n	8002f7c <UART_SetConfig+0x294>
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d802      	bhi.n	8002f62 <UART_SetConfig+0x27a>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <UART_SetConfig+0x288>
 8002f60:	e04c      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	d006      	beq.n	8002f76 <UART_SetConfig+0x28e>
 8002f68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f6c:	d009      	beq.n	8002f82 <UART_SetConfig+0x29a>
 8002f6e:	e045      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f70:	2300      	movs	r3, #0
 8002f72:	75fb      	strb	r3, [r7, #23]
 8002f74:	e042      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f76:	2302      	movs	r3, #2
 8002f78:	75fb      	strb	r3, [r7, #23]
 8002f7a:	e03f      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	75fb      	strb	r3, [r7, #23]
 8002f80:	e03c      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f82:	2308      	movs	r3, #8
 8002f84:	75fb      	strb	r3, [r7, #23]
 8002f86:	e039      	b.n	8002ffc <UART_SetConfig+0x314>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <UART_SetConfig+0x30c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d135      	bne.n	8002ffe <UART_SetConfig+0x316>
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <UART_SetConfig+0x2f0>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa0:	d012      	beq.n	8002fc8 <UART_SetConfig+0x2e0>
 8002fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa6:	d802      	bhi.n	8002fae <UART_SetConfig+0x2c6>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <UART_SetConfig+0x2d4>
 8002fac:	e026      	b.n	8002ffc <UART_SetConfig+0x314>
 8002fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x2da>
 8002fb4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002fb8:	d01e      	beq.n	8002ff8 <UART_SetConfig+0x310>
 8002fba:	e01f      	b.n	8002ffc <UART_SetConfig+0x314>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]
 8002fc0:	e01c      	b.n	8002ffc <UART_SetConfig+0x314>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	75fb      	strb	r3, [r7, #23]
 8002fc6:	e019      	b.n	8002ffc <UART_SetConfig+0x314>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	75fb      	strb	r3, [r7, #23]
 8002fcc:	e016      	b.n	8002ffc <UART_SetConfig+0x314>
 8002fce:	bf00      	nop
 8002fd0:	efff69f3 	.word	0xefff69f3
 8002fd4:	40011000 	.word	0x40011000
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40004400 	.word	0x40004400
 8002fe0:	40004800 	.word	0x40004800
 8002fe4:	40004c00 	.word	0x40004c00
 8002fe8:	40005000 	.word	0x40005000
 8002fec:	40011400 	.word	0x40011400
 8002ff0:	40007800 	.word	0x40007800
 8002ff4:	40007c00 	.word	0x40007c00
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	75fb      	strb	r3, [r7, #23]
 8002ffc:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003006:	d16c      	bne.n	80030e2 <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8003008:	7dfb      	ldrb	r3, [r7, #23]
 800300a:	2b08      	cmp	r3, #8
 800300c:	d854      	bhi.n	80030b8 <UART_SetConfig+0x3d0>
 800300e:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <UART_SetConfig+0x32c>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	08003039 	.word	0x08003039
 8003018:	08003055 	.word	0x08003055
 800301c:	08003071 	.word	0x08003071
 8003020:	080030b9 	.word	0x080030b9
 8003024:	08003087 	.word	0x08003087
 8003028:	080030b9 	.word	0x080030b9
 800302c:	080030b9 	.word	0x080030b9
 8003030:	080030b9 	.word	0x080030b9
 8003034:	080030a3 	.word	0x080030a3
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003038:	f7fe ff98 	bl	8001f6c <HAL_RCC_GetPCLK1Freq>
 800303c:	4603      	mov	r3, r0
 800303e:	005a      	lsls	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	085b      	lsrs	r3, r3, #1
 8003046:	441a      	add	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	82bb      	strh	r3, [r7, #20]
      break;
 8003052:	e034      	b.n	80030be <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003054:	f7fe ff9e 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 8003058:	4603      	mov	r3, r0
 800305a:	005a      	lsls	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	441a      	add	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	82bb      	strh	r3, [r7, #20]
      break;
 800306e:	e026      	b.n	80030be <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	085a      	lsrs	r2, r3, #1
 8003076:	4b51      	ldr	r3, [pc, #324]	; (80031bc <UART_SetConfig+0x4d4>)
 8003078:	4413      	add	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6852      	ldr	r2, [r2, #4]
 800307e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003082:	82bb      	strh	r3, [r7, #20]
      break;
 8003084:	e01b      	b.n	80030be <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003086:	f7fe fe8d 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 800308a:	4603      	mov	r3, r0
 800308c:	005a      	lsls	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	441a      	add	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	82bb      	strh	r3, [r7, #20]
      break;
 80030a0:	e00d      	b.n	80030be <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	82bb      	strh	r3, [r7, #20]
      break;
 80030b6:	e002      	b.n	80030be <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	74fb      	strb	r3, [r7, #19]
      break;
 80030bc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80030be:	8abb      	ldrh	r3, [r7, #20]
 80030c0:	f023 030f 	bic.w	r3, r3, #15
 80030c4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030c6:	8abb      	ldrh	r3, [r7, #20]
 80030c8:	105b      	asrs	r3, r3, #1
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	897a      	ldrh	r2, [r7, #10]
 80030de:	60da      	str	r2, [r3, #12]
 80030e0:	e067      	b.n	80031b2 <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d861      	bhi.n	80031ac <UART_SetConfig+0x4c4>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0x408>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003115 	.word	0x08003115
 80030f4:	08003135 	.word	0x08003135
 80030f8:	08003155 	.word	0x08003155
 80030fc:	080031ad 	.word	0x080031ad
 8003100:	08003171 	.word	0x08003171
 8003104:	080031ad 	.word	0x080031ad
 8003108:	080031ad 	.word	0x080031ad
 800310c:	080031ad 	.word	0x080031ad
 8003110:	08003191 	.word	0x08003191
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681c      	ldr	r4, [r3, #0]
 8003118:	f7fe ff28 	bl	8001f6c <HAL_RCC_GetPCLK1Freq>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	fbb2 f3f3 	udiv	r3, r2, r3
 800312e:	b29b      	uxth	r3, r3
 8003130:	60e3      	str	r3, [r4, #12]
      break;
 8003132:	e03e      	b.n	80031b2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681c      	ldr	r4, [r3, #0]
 8003138:	f7fe ff2c 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 800313c:	4602      	mov	r2, r0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	441a      	add	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	b29b      	uxth	r3, r3
 8003150:	60e3      	str	r3, [r4, #12]
      break;
 8003152:	e02e      	b.n	80031b2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	0859      	lsrs	r1, r3, #1
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <UART_SetConfig+0x4d8>)
 8003160:	440b      	add	r3, r1
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	6849      	ldr	r1, [r1, #4]
 8003166:	fbb3 f3f1 	udiv	r3, r3, r1
 800316a:	b29b      	uxth	r3, r3
 800316c:	60d3      	str	r3, [r2, #12]
      break;
 800316e:	e020      	b.n	80031b2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681c      	ldr	r4, [r3, #0]
 8003174:	f7fe fe16 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	441a      	add	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	fbb2 f3f3 	udiv	r3, r2, r3
 800318a:	b29b      	uxth	r3, r3
 800318c:	60e3      	str	r3, [r4, #12]
      break;
 800318e:	e010      	b.n	80031b2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6852      	ldr	r2, [r2, #4]
 8003198:	0852      	lsrs	r2, r2, #1
 800319a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6852      	ldr	r2, [r2, #4]
 80031a2:	fbb1 f2f2 	udiv	r2, r1, r2
 80031a6:	b292      	uxth	r2, r2
 80031a8:	60da      	str	r2, [r3, #12]
      break;
 80031aa:	e002      	b.n	80031b2 <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	74fb      	strb	r3, [r7, #19]
      break;
 80031b0:	bf00      	nop
    }
  }

  return ret;
 80031b2:	7cfb      	ldrb	r3, [r7, #19]

}
 80031b4:	4618      	mov	r0, r3
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}
 80031bc:	01e84800 	.word	0x01e84800
 80031c0:	00f42400 	.word	0x00f42400

080031c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	6852      	ldr	r2, [r2, #4]
 80031e2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	6852      	ldr	r2, [r2, #4]
 8003204:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	6852      	ldr	r2, [r2, #4]
 8003226:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	6852      	ldr	r2, [r2, #4]
 8003248:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	6892      	ldr	r2, [r2, #8]
 800326a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	6892      	ldr	r2, [r2, #8]
 800328c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003294:	430a      	orrs	r2, r1
 8003296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01a      	beq.n	80032da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	6852      	ldr	r2, [r2, #4]
 80032ae:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c2:	d10a      	bne.n	80032da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	6852      	ldr	r2, [r2, #4]
 80032ce:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	6852      	ldr	r2, [r2, #4]
 80032f0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af02      	add	r7, sp, #8
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800331a:	f7fd fe89 	bl	8001030 <HAL_GetTick>
 800331e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b08      	cmp	r3, #8
 800332c:	d10e      	bne.n	800334c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff fc89 	bl	8002c54 <UART_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e00c      	b.n	8003366 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003374:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003376:	e003      	b.n	8003380 <LoopCopyDataInit>

08003378 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800337a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800337c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800337e:	3104      	adds	r1, #4

08003380 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003380:	480b      	ldr	r0, [pc, #44]	; (80033b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003384:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003386:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003388:	d3f6      	bcc.n	8003378 <CopyDataInit>
  ldr  r2, =_sbss
 800338a:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800338c:	e002      	b.n	8003394 <LoopFillZerobss>

0800338e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800338e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003390:	f842 3b04 	str.w	r3, [r2], #4

08003394 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003396:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003398:	d3f9      	bcc.n	800338e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800339a:	f7fd fdc1 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800339e:	f000 f811 	bl	80033c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033a2:	f7fd faad 	bl	8000900 <main>
  bx  lr    
 80033a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033a8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80033ac:	08003d10 	.word	0x08003d10
  ldr  r0, =_sdata
 80033b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80033b4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80033b8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80033bc:	200001d4 	.word	0x200001d4

080033c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033c0:	e7fe      	b.n	80033c0 <ADC_IRQHandler>
	...

080033c4 <__libc_init_array>:
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	4e0d      	ldr	r6, [pc, #52]	; (80033fc <__libc_init_array+0x38>)
 80033c8:	4c0d      	ldr	r4, [pc, #52]	; (8003400 <__libc_init_array+0x3c>)
 80033ca:	1ba4      	subs	r4, r4, r6
 80033cc:	10a4      	asrs	r4, r4, #2
 80033ce:	2500      	movs	r5, #0
 80033d0:	42a5      	cmp	r5, r4
 80033d2:	d109      	bne.n	80033e8 <__libc_init_array+0x24>
 80033d4:	4e0b      	ldr	r6, [pc, #44]	; (8003404 <__libc_init_array+0x40>)
 80033d6:	4c0c      	ldr	r4, [pc, #48]	; (8003408 <__libc_init_array+0x44>)
 80033d8:	f000 fc4c 	bl	8003c74 <_init>
 80033dc:	1ba4      	subs	r4, r4, r6
 80033de:	10a4      	asrs	r4, r4, #2
 80033e0:	2500      	movs	r5, #0
 80033e2:	42a5      	cmp	r5, r4
 80033e4:	d105      	bne.n	80033f2 <__libc_init_array+0x2e>
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
 80033e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ec:	4798      	blx	r3
 80033ee:	3501      	adds	r5, #1
 80033f0:	e7ee      	b.n	80033d0 <__libc_init_array+0xc>
 80033f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033f6:	4798      	blx	r3
 80033f8:	3501      	adds	r5, #1
 80033fa:	e7f2      	b.n	80033e2 <__libc_init_array+0x1e>
 80033fc:	08003d08 	.word	0x08003d08
 8003400:	08003d08 	.word	0x08003d08
 8003404:	08003d08 	.word	0x08003d08
 8003408:	08003d0c 	.word	0x08003d0c

0800340c <memset>:
 800340c:	4402      	add	r2, r0
 800340e:	4603      	mov	r3, r0
 8003410:	4293      	cmp	r3, r2
 8003412:	d100      	bne.n	8003416 <memset+0xa>
 8003414:	4770      	bx	lr
 8003416:	f803 1b01 	strb.w	r1, [r3], #1
 800341a:	e7f9      	b.n	8003410 <memset+0x4>

0800341c <siprintf>:
 800341c:	b40e      	push	{r1, r2, r3}
 800341e:	b500      	push	{lr}
 8003420:	b09c      	sub	sp, #112	; 0x70
 8003422:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003426:	ab1d      	add	r3, sp, #116	; 0x74
 8003428:	f8ad 1014 	strh.w	r1, [sp, #20]
 800342c:	9002      	str	r0, [sp, #8]
 800342e:	9006      	str	r0, [sp, #24]
 8003430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003434:	480a      	ldr	r0, [pc, #40]	; (8003460 <siprintf+0x44>)
 8003436:	9104      	str	r1, [sp, #16]
 8003438:	9107      	str	r1, [sp, #28]
 800343a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800343e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003442:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003446:	6800      	ldr	r0, [r0, #0]
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	a902      	add	r1, sp, #8
 800344c:	f000 f866 	bl	800351c <_svfiprintf_r>
 8003450:	9b02      	ldr	r3, [sp, #8]
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	b01c      	add	sp, #112	; 0x70
 8003458:	f85d eb04 	ldr.w	lr, [sp], #4
 800345c:	b003      	add	sp, #12
 800345e:	4770      	bx	lr
 8003460:	2000000c 	.word	0x2000000c

08003464 <__ssputs_r>:
 8003464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003468:	688e      	ldr	r6, [r1, #8]
 800346a:	429e      	cmp	r6, r3
 800346c:	4682      	mov	sl, r0
 800346e:	460c      	mov	r4, r1
 8003470:	4691      	mov	r9, r2
 8003472:	4698      	mov	r8, r3
 8003474:	d835      	bhi.n	80034e2 <__ssputs_r+0x7e>
 8003476:	898a      	ldrh	r2, [r1, #12]
 8003478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800347c:	d031      	beq.n	80034e2 <__ssputs_r+0x7e>
 800347e:	6825      	ldr	r5, [r4, #0]
 8003480:	6909      	ldr	r1, [r1, #16]
 8003482:	1a6f      	subs	r7, r5, r1
 8003484:	6965      	ldr	r5, [r4, #20]
 8003486:	2302      	movs	r3, #2
 8003488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800348c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003490:	f108 0301 	add.w	r3, r8, #1
 8003494:	443b      	add	r3, r7
 8003496:	429d      	cmp	r5, r3
 8003498:	bf38      	it	cc
 800349a:	461d      	movcc	r5, r3
 800349c:	0553      	lsls	r3, r2, #21
 800349e:	d531      	bpl.n	8003504 <__ssputs_r+0xa0>
 80034a0:	4629      	mov	r1, r5
 80034a2:	f000 fb39 	bl	8003b18 <_malloc_r>
 80034a6:	4606      	mov	r6, r0
 80034a8:	b950      	cbnz	r0, 80034c0 <__ssputs_r+0x5c>
 80034aa:	230c      	movs	r3, #12
 80034ac:	f8ca 3000 	str.w	r3, [sl]
 80034b0:	89a3      	ldrh	r3, [r4, #12]
 80034b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b6:	81a3      	strh	r3, [r4, #12]
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c0:	463a      	mov	r2, r7
 80034c2:	6921      	ldr	r1, [r4, #16]
 80034c4:	f000 fab4 	bl	8003a30 <memcpy>
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d2:	81a3      	strh	r3, [r4, #12]
 80034d4:	6126      	str	r6, [r4, #16]
 80034d6:	6165      	str	r5, [r4, #20]
 80034d8:	443e      	add	r6, r7
 80034da:	1bed      	subs	r5, r5, r7
 80034dc:	6026      	str	r6, [r4, #0]
 80034de:	60a5      	str	r5, [r4, #8]
 80034e0:	4646      	mov	r6, r8
 80034e2:	4546      	cmp	r6, r8
 80034e4:	bf28      	it	cs
 80034e6:	4646      	movcs	r6, r8
 80034e8:	4632      	mov	r2, r6
 80034ea:	4649      	mov	r1, r9
 80034ec:	6820      	ldr	r0, [r4, #0]
 80034ee:	f000 faaa 	bl	8003a46 <memmove>
 80034f2:	68a3      	ldr	r3, [r4, #8]
 80034f4:	1b9b      	subs	r3, r3, r6
 80034f6:	60a3      	str	r3, [r4, #8]
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	441e      	add	r6, r3
 80034fc:	6026      	str	r6, [r4, #0]
 80034fe:	2000      	movs	r0, #0
 8003500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003504:	462a      	mov	r2, r5
 8003506:	f000 fb65 	bl	8003bd4 <_realloc_r>
 800350a:	4606      	mov	r6, r0
 800350c:	2800      	cmp	r0, #0
 800350e:	d1e1      	bne.n	80034d4 <__ssputs_r+0x70>
 8003510:	6921      	ldr	r1, [r4, #16]
 8003512:	4650      	mov	r0, sl
 8003514:	f000 fab2 	bl	8003a7c <_free_r>
 8003518:	e7c7      	b.n	80034aa <__ssputs_r+0x46>
	...

0800351c <_svfiprintf_r>:
 800351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003520:	b09d      	sub	sp, #116	; 0x74
 8003522:	4680      	mov	r8, r0
 8003524:	9303      	str	r3, [sp, #12]
 8003526:	898b      	ldrh	r3, [r1, #12]
 8003528:	061c      	lsls	r4, r3, #24
 800352a:	460d      	mov	r5, r1
 800352c:	4616      	mov	r6, r2
 800352e:	d50f      	bpl.n	8003550 <_svfiprintf_r+0x34>
 8003530:	690b      	ldr	r3, [r1, #16]
 8003532:	b96b      	cbnz	r3, 8003550 <_svfiprintf_r+0x34>
 8003534:	2140      	movs	r1, #64	; 0x40
 8003536:	f000 faef 	bl	8003b18 <_malloc_r>
 800353a:	6028      	str	r0, [r5, #0]
 800353c:	6128      	str	r0, [r5, #16]
 800353e:	b928      	cbnz	r0, 800354c <_svfiprintf_r+0x30>
 8003540:	230c      	movs	r3, #12
 8003542:	f8c8 3000 	str.w	r3, [r8]
 8003546:	f04f 30ff 	mov.w	r0, #4294967295
 800354a:	e0c5      	b.n	80036d8 <_svfiprintf_r+0x1bc>
 800354c:	2340      	movs	r3, #64	; 0x40
 800354e:	616b      	str	r3, [r5, #20]
 8003550:	2300      	movs	r3, #0
 8003552:	9309      	str	r3, [sp, #36]	; 0x24
 8003554:	2320      	movs	r3, #32
 8003556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800355a:	2330      	movs	r3, #48	; 0x30
 800355c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003560:	f04f 0b01 	mov.w	fp, #1
 8003564:	4637      	mov	r7, r6
 8003566:	463c      	mov	r4, r7
 8003568:	f814 3b01 	ldrb.w	r3, [r4], #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d13c      	bne.n	80035ea <_svfiprintf_r+0xce>
 8003570:	ebb7 0a06 	subs.w	sl, r7, r6
 8003574:	d00b      	beq.n	800358e <_svfiprintf_r+0x72>
 8003576:	4653      	mov	r3, sl
 8003578:	4632      	mov	r2, r6
 800357a:	4629      	mov	r1, r5
 800357c:	4640      	mov	r0, r8
 800357e:	f7ff ff71 	bl	8003464 <__ssputs_r>
 8003582:	3001      	adds	r0, #1
 8003584:	f000 80a3 	beq.w	80036ce <_svfiprintf_r+0x1b2>
 8003588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800358a:	4453      	add	r3, sl
 800358c:	9309      	str	r3, [sp, #36]	; 0x24
 800358e:	783b      	ldrb	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 809c 	beq.w	80036ce <_svfiprintf_r+0x1b2>
 8003596:	2300      	movs	r3, #0
 8003598:	f04f 32ff 	mov.w	r2, #4294967295
 800359c:	9304      	str	r3, [sp, #16]
 800359e:	9307      	str	r3, [sp, #28]
 80035a0:	9205      	str	r2, [sp, #20]
 80035a2:	9306      	str	r3, [sp, #24]
 80035a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035a8:	931a      	str	r3, [sp, #104]	; 0x68
 80035aa:	2205      	movs	r2, #5
 80035ac:	7821      	ldrb	r1, [r4, #0]
 80035ae:	4850      	ldr	r0, [pc, #320]	; (80036f0 <_svfiprintf_r+0x1d4>)
 80035b0:	f7fc fe46 	bl	8000240 <memchr>
 80035b4:	1c67      	adds	r7, r4, #1
 80035b6:	9b04      	ldr	r3, [sp, #16]
 80035b8:	b9d8      	cbnz	r0, 80035f2 <_svfiprintf_r+0xd6>
 80035ba:	06d9      	lsls	r1, r3, #27
 80035bc:	bf44      	itt	mi
 80035be:	2220      	movmi	r2, #32
 80035c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035c4:	071a      	lsls	r2, r3, #28
 80035c6:	bf44      	itt	mi
 80035c8:	222b      	movmi	r2, #43	; 0x2b
 80035ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035ce:	7822      	ldrb	r2, [r4, #0]
 80035d0:	2a2a      	cmp	r2, #42	; 0x2a
 80035d2:	d016      	beq.n	8003602 <_svfiprintf_r+0xe6>
 80035d4:	9a07      	ldr	r2, [sp, #28]
 80035d6:	2100      	movs	r1, #0
 80035d8:	200a      	movs	r0, #10
 80035da:	4627      	mov	r7, r4
 80035dc:	3401      	adds	r4, #1
 80035de:	783b      	ldrb	r3, [r7, #0]
 80035e0:	3b30      	subs	r3, #48	; 0x30
 80035e2:	2b09      	cmp	r3, #9
 80035e4:	d951      	bls.n	800368a <_svfiprintf_r+0x16e>
 80035e6:	b1c9      	cbz	r1, 800361c <_svfiprintf_r+0x100>
 80035e8:	e011      	b.n	800360e <_svfiprintf_r+0xf2>
 80035ea:	2b25      	cmp	r3, #37	; 0x25
 80035ec:	d0c0      	beq.n	8003570 <_svfiprintf_r+0x54>
 80035ee:	4627      	mov	r7, r4
 80035f0:	e7b9      	b.n	8003566 <_svfiprintf_r+0x4a>
 80035f2:	4a3f      	ldr	r2, [pc, #252]	; (80036f0 <_svfiprintf_r+0x1d4>)
 80035f4:	1a80      	subs	r0, r0, r2
 80035f6:	fa0b f000 	lsl.w	r0, fp, r0
 80035fa:	4318      	orrs	r0, r3
 80035fc:	9004      	str	r0, [sp, #16]
 80035fe:	463c      	mov	r4, r7
 8003600:	e7d3      	b.n	80035aa <_svfiprintf_r+0x8e>
 8003602:	9a03      	ldr	r2, [sp, #12]
 8003604:	1d11      	adds	r1, r2, #4
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	9103      	str	r1, [sp, #12]
 800360a:	2a00      	cmp	r2, #0
 800360c:	db01      	blt.n	8003612 <_svfiprintf_r+0xf6>
 800360e:	9207      	str	r2, [sp, #28]
 8003610:	e004      	b.n	800361c <_svfiprintf_r+0x100>
 8003612:	4252      	negs	r2, r2
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	9207      	str	r2, [sp, #28]
 800361a:	9304      	str	r3, [sp, #16]
 800361c:	783b      	ldrb	r3, [r7, #0]
 800361e:	2b2e      	cmp	r3, #46	; 0x2e
 8003620:	d10e      	bne.n	8003640 <_svfiprintf_r+0x124>
 8003622:	787b      	ldrb	r3, [r7, #1]
 8003624:	2b2a      	cmp	r3, #42	; 0x2a
 8003626:	f107 0101 	add.w	r1, r7, #1
 800362a:	d132      	bne.n	8003692 <_svfiprintf_r+0x176>
 800362c:	9b03      	ldr	r3, [sp, #12]
 800362e:	1d1a      	adds	r2, r3, #4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	9203      	str	r2, [sp, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	bfb8      	it	lt
 8003638:	f04f 33ff 	movlt.w	r3, #4294967295
 800363c:	3702      	adds	r7, #2
 800363e:	9305      	str	r3, [sp, #20]
 8003640:	4c2c      	ldr	r4, [pc, #176]	; (80036f4 <_svfiprintf_r+0x1d8>)
 8003642:	7839      	ldrb	r1, [r7, #0]
 8003644:	2203      	movs	r2, #3
 8003646:	4620      	mov	r0, r4
 8003648:	f7fc fdfa 	bl	8000240 <memchr>
 800364c:	b138      	cbz	r0, 800365e <_svfiprintf_r+0x142>
 800364e:	2340      	movs	r3, #64	; 0x40
 8003650:	1b00      	subs	r0, r0, r4
 8003652:	fa03 f000 	lsl.w	r0, r3, r0
 8003656:	9b04      	ldr	r3, [sp, #16]
 8003658:	4303      	orrs	r3, r0
 800365a:	9304      	str	r3, [sp, #16]
 800365c:	3701      	adds	r7, #1
 800365e:	7839      	ldrb	r1, [r7, #0]
 8003660:	4825      	ldr	r0, [pc, #148]	; (80036f8 <_svfiprintf_r+0x1dc>)
 8003662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003666:	2206      	movs	r2, #6
 8003668:	1c7e      	adds	r6, r7, #1
 800366a:	f7fc fde9 	bl	8000240 <memchr>
 800366e:	2800      	cmp	r0, #0
 8003670:	d035      	beq.n	80036de <_svfiprintf_r+0x1c2>
 8003672:	4b22      	ldr	r3, [pc, #136]	; (80036fc <_svfiprintf_r+0x1e0>)
 8003674:	b9fb      	cbnz	r3, 80036b6 <_svfiprintf_r+0x19a>
 8003676:	9b03      	ldr	r3, [sp, #12]
 8003678:	3307      	adds	r3, #7
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	3308      	adds	r3, #8
 8003680:	9303      	str	r3, [sp, #12]
 8003682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003684:	444b      	add	r3, r9
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
 8003688:	e76c      	b.n	8003564 <_svfiprintf_r+0x48>
 800368a:	fb00 3202 	mla	r2, r0, r2, r3
 800368e:	2101      	movs	r1, #1
 8003690:	e7a3      	b.n	80035da <_svfiprintf_r+0xbe>
 8003692:	2300      	movs	r3, #0
 8003694:	9305      	str	r3, [sp, #20]
 8003696:	4618      	mov	r0, r3
 8003698:	240a      	movs	r4, #10
 800369a:	460f      	mov	r7, r1
 800369c:	3101      	adds	r1, #1
 800369e:	783a      	ldrb	r2, [r7, #0]
 80036a0:	3a30      	subs	r2, #48	; 0x30
 80036a2:	2a09      	cmp	r2, #9
 80036a4:	d903      	bls.n	80036ae <_svfiprintf_r+0x192>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0ca      	beq.n	8003640 <_svfiprintf_r+0x124>
 80036aa:	9005      	str	r0, [sp, #20]
 80036ac:	e7c8      	b.n	8003640 <_svfiprintf_r+0x124>
 80036ae:	fb04 2000 	mla	r0, r4, r0, r2
 80036b2:	2301      	movs	r3, #1
 80036b4:	e7f1      	b.n	800369a <_svfiprintf_r+0x17e>
 80036b6:	ab03      	add	r3, sp, #12
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	462a      	mov	r2, r5
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <_svfiprintf_r+0x1e4>)
 80036be:	a904      	add	r1, sp, #16
 80036c0:	4640      	mov	r0, r8
 80036c2:	f3af 8000 	nop.w
 80036c6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80036ca:	4681      	mov	r9, r0
 80036cc:	d1d9      	bne.n	8003682 <_svfiprintf_r+0x166>
 80036ce:	89ab      	ldrh	r3, [r5, #12]
 80036d0:	065b      	lsls	r3, r3, #25
 80036d2:	f53f af38 	bmi.w	8003546 <_svfiprintf_r+0x2a>
 80036d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036d8:	b01d      	add	sp, #116	; 0x74
 80036da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036de:	ab03      	add	r3, sp, #12
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	462a      	mov	r2, r5
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <_svfiprintf_r+0x1e4>)
 80036e6:	a904      	add	r1, sp, #16
 80036e8:	4640      	mov	r0, r8
 80036ea:	f000 f881 	bl	80037f0 <_printf_i>
 80036ee:	e7ea      	b.n	80036c6 <_svfiprintf_r+0x1aa>
 80036f0:	08003ccc 	.word	0x08003ccc
 80036f4:	08003cd2 	.word	0x08003cd2
 80036f8:	08003cd6 	.word	0x08003cd6
 80036fc:	00000000 	.word	0x00000000
 8003700:	08003465 	.word	0x08003465

08003704 <_printf_common>:
 8003704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	4691      	mov	r9, r2
 800370a:	461f      	mov	r7, r3
 800370c:	688a      	ldr	r2, [r1, #8]
 800370e:	690b      	ldr	r3, [r1, #16]
 8003710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003714:	4293      	cmp	r3, r2
 8003716:	bfb8      	it	lt
 8003718:	4613      	movlt	r3, r2
 800371a:	f8c9 3000 	str.w	r3, [r9]
 800371e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003722:	4606      	mov	r6, r0
 8003724:	460c      	mov	r4, r1
 8003726:	b112      	cbz	r2, 800372e <_printf_common+0x2a>
 8003728:	3301      	adds	r3, #1
 800372a:	f8c9 3000 	str.w	r3, [r9]
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	0699      	lsls	r1, r3, #26
 8003732:	bf42      	ittt	mi
 8003734:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003738:	3302      	addmi	r3, #2
 800373a:	f8c9 3000 	strmi.w	r3, [r9]
 800373e:	6825      	ldr	r5, [r4, #0]
 8003740:	f015 0506 	ands.w	r5, r5, #6
 8003744:	d107      	bne.n	8003756 <_printf_common+0x52>
 8003746:	f104 0a19 	add.w	sl, r4, #25
 800374a:	68e3      	ldr	r3, [r4, #12]
 800374c:	f8d9 2000 	ldr.w	r2, [r9]
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	429d      	cmp	r5, r3
 8003754:	db29      	blt.n	80037aa <_printf_common+0xa6>
 8003756:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	3300      	adds	r3, #0
 800375e:	bf18      	it	ne
 8003760:	2301      	movne	r3, #1
 8003762:	0692      	lsls	r2, r2, #26
 8003764:	d42e      	bmi.n	80037c4 <_printf_common+0xc0>
 8003766:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800376a:	4639      	mov	r1, r7
 800376c:	4630      	mov	r0, r6
 800376e:	47c0      	blx	r8
 8003770:	3001      	adds	r0, #1
 8003772:	d021      	beq.n	80037b8 <_printf_common+0xb4>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	68e5      	ldr	r5, [r4, #12]
 8003778:	f8d9 2000 	ldr.w	r2, [r9]
 800377c:	f003 0306 	and.w	r3, r3, #6
 8003780:	2b04      	cmp	r3, #4
 8003782:	bf08      	it	eq
 8003784:	1aad      	subeq	r5, r5, r2
 8003786:	68a3      	ldr	r3, [r4, #8]
 8003788:	6922      	ldr	r2, [r4, #16]
 800378a:	bf0c      	ite	eq
 800378c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003790:	2500      	movne	r5, #0
 8003792:	4293      	cmp	r3, r2
 8003794:	bfc4      	itt	gt
 8003796:	1a9b      	subgt	r3, r3, r2
 8003798:	18ed      	addgt	r5, r5, r3
 800379a:	f04f 0900 	mov.w	r9, #0
 800379e:	341a      	adds	r4, #26
 80037a0:	454d      	cmp	r5, r9
 80037a2:	d11b      	bne.n	80037dc <_printf_common+0xd8>
 80037a4:	2000      	movs	r0, #0
 80037a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037aa:	2301      	movs	r3, #1
 80037ac:	4652      	mov	r2, sl
 80037ae:	4639      	mov	r1, r7
 80037b0:	4630      	mov	r0, r6
 80037b2:	47c0      	blx	r8
 80037b4:	3001      	adds	r0, #1
 80037b6:	d103      	bne.n	80037c0 <_printf_common+0xbc>
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c0:	3501      	adds	r5, #1
 80037c2:	e7c2      	b.n	800374a <_printf_common+0x46>
 80037c4:	18e1      	adds	r1, r4, r3
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	2030      	movs	r0, #48	; 0x30
 80037ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037ce:	4422      	add	r2, r4
 80037d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037d8:	3302      	adds	r3, #2
 80037da:	e7c4      	b.n	8003766 <_printf_common+0x62>
 80037dc:	2301      	movs	r3, #1
 80037de:	4622      	mov	r2, r4
 80037e0:	4639      	mov	r1, r7
 80037e2:	4630      	mov	r0, r6
 80037e4:	47c0      	blx	r8
 80037e6:	3001      	adds	r0, #1
 80037e8:	d0e6      	beq.n	80037b8 <_printf_common+0xb4>
 80037ea:	f109 0901 	add.w	r9, r9, #1
 80037ee:	e7d7      	b.n	80037a0 <_printf_common+0x9c>

080037f0 <_printf_i>:
 80037f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037f4:	4617      	mov	r7, r2
 80037f6:	7e0a      	ldrb	r2, [r1, #24]
 80037f8:	b085      	sub	sp, #20
 80037fa:	2a6e      	cmp	r2, #110	; 0x6e
 80037fc:	4698      	mov	r8, r3
 80037fe:	4606      	mov	r6, r0
 8003800:	460c      	mov	r4, r1
 8003802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003804:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003808:	f000 80bc 	beq.w	8003984 <_printf_i+0x194>
 800380c:	d81a      	bhi.n	8003844 <_printf_i+0x54>
 800380e:	2a63      	cmp	r2, #99	; 0x63
 8003810:	d02e      	beq.n	8003870 <_printf_i+0x80>
 8003812:	d80a      	bhi.n	800382a <_printf_i+0x3a>
 8003814:	2a00      	cmp	r2, #0
 8003816:	f000 80c8 	beq.w	80039aa <_printf_i+0x1ba>
 800381a:	2a58      	cmp	r2, #88	; 0x58
 800381c:	f000 808a 	beq.w	8003934 <_printf_i+0x144>
 8003820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003824:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003828:	e02a      	b.n	8003880 <_printf_i+0x90>
 800382a:	2a64      	cmp	r2, #100	; 0x64
 800382c:	d001      	beq.n	8003832 <_printf_i+0x42>
 800382e:	2a69      	cmp	r2, #105	; 0x69
 8003830:	d1f6      	bne.n	8003820 <_printf_i+0x30>
 8003832:	6821      	ldr	r1, [r4, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	f011 0f80 	tst.w	r1, #128	; 0x80
 800383a:	d023      	beq.n	8003884 <_printf_i+0x94>
 800383c:	1d11      	adds	r1, r2, #4
 800383e:	6019      	str	r1, [r3, #0]
 8003840:	6813      	ldr	r3, [r2, #0]
 8003842:	e027      	b.n	8003894 <_printf_i+0xa4>
 8003844:	2a73      	cmp	r2, #115	; 0x73
 8003846:	f000 80b4 	beq.w	80039b2 <_printf_i+0x1c2>
 800384a:	d808      	bhi.n	800385e <_printf_i+0x6e>
 800384c:	2a6f      	cmp	r2, #111	; 0x6f
 800384e:	d02a      	beq.n	80038a6 <_printf_i+0xb6>
 8003850:	2a70      	cmp	r2, #112	; 0x70
 8003852:	d1e5      	bne.n	8003820 <_printf_i+0x30>
 8003854:	680a      	ldr	r2, [r1, #0]
 8003856:	f042 0220 	orr.w	r2, r2, #32
 800385a:	600a      	str	r2, [r1, #0]
 800385c:	e003      	b.n	8003866 <_printf_i+0x76>
 800385e:	2a75      	cmp	r2, #117	; 0x75
 8003860:	d021      	beq.n	80038a6 <_printf_i+0xb6>
 8003862:	2a78      	cmp	r2, #120	; 0x78
 8003864:	d1dc      	bne.n	8003820 <_printf_i+0x30>
 8003866:	2278      	movs	r2, #120	; 0x78
 8003868:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800386c:	496e      	ldr	r1, [pc, #440]	; (8003a28 <_printf_i+0x238>)
 800386e:	e064      	b.n	800393a <_printf_i+0x14a>
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003876:	1d11      	adds	r1, r2, #4
 8003878:	6019      	str	r1, [r3, #0]
 800387a:	6813      	ldr	r3, [r2, #0]
 800387c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003880:	2301      	movs	r3, #1
 8003882:	e0a3      	b.n	80039cc <_printf_i+0x1dc>
 8003884:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003888:	f102 0104 	add.w	r1, r2, #4
 800388c:	6019      	str	r1, [r3, #0]
 800388e:	d0d7      	beq.n	8003840 <_printf_i+0x50>
 8003890:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003894:	2b00      	cmp	r3, #0
 8003896:	da03      	bge.n	80038a0 <_printf_i+0xb0>
 8003898:	222d      	movs	r2, #45	; 0x2d
 800389a:	425b      	negs	r3, r3
 800389c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038a0:	4962      	ldr	r1, [pc, #392]	; (8003a2c <_printf_i+0x23c>)
 80038a2:	220a      	movs	r2, #10
 80038a4:	e017      	b.n	80038d6 <_printf_i+0xe6>
 80038a6:	6820      	ldr	r0, [r4, #0]
 80038a8:	6819      	ldr	r1, [r3, #0]
 80038aa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80038ae:	d003      	beq.n	80038b8 <_printf_i+0xc8>
 80038b0:	1d08      	adds	r0, r1, #4
 80038b2:	6018      	str	r0, [r3, #0]
 80038b4:	680b      	ldr	r3, [r1, #0]
 80038b6:	e006      	b.n	80038c6 <_printf_i+0xd6>
 80038b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038bc:	f101 0004 	add.w	r0, r1, #4
 80038c0:	6018      	str	r0, [r3, #0]
 80038c2:	d0f7      	beq.n	80038b4 <_printf_i+0xc4>
 80038c4:	880b      	ldrh	r3, [r1, #0]
 80038c6:	4959      	ldr	r1, [pc, #356]	; (8003a2c <_printf_i+0x23c>)
 80038c8:	2a6f      	cmp	r2, #111	; 0x6f
 80038ca:	bf14      	ite	ne
 80038cc:	220a      	movne	r2, #10
 80038ce:	2208      	moveq	r2, #8
 80038d0:	2000      	movs	r0, #0
 80038d2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80038d6:	6865      	ldr	r5, [r4, #4]
 80038d8:	60a5      	str	r5, [r4, #8]
 80038da:	2d00      	cmp	r5, #0
 80038dc:	f2c0 809c 	blt.w	8003a18 <_printf_i+0x228>
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	f020 0004 	bic.w	r0, r0, #4
 80038e6:	6020      	str	r0, [r4, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d13f      	bne.n	800396c <_printf_i+0x17c>
 80038ec:	2d00      	cmp	r5, #0
 80038ee:	f040 8095 	bne.w	8003a1c <_printf_i+0x22c>
 80038f2:	4675      	mov	r5, lr
 80038f4:	2a08      	cmp	r2, #8
 80038f6:	d10b      	bne.n	8003910 <_printf_i+0x120>
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	07da      	lsls	r2, r3, #31
 80038fc:	d508      	bpl.n	8003910 <_printf_i+0x120>
 80038fe:	6923      	ldr	r3, [r4, #16]
 8003900:	6862      	ldr	r2, [r4, #4]
 8003902:	429a      	cmp	r2, r3
 8003904:	bfde      	ittt	le
 8003906:	2330      	movle	r3, #48	; 0x30
 8003908:	f805 3c01 	strble.w	r3, [r5, #-1]
 800390c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003910:	ebae 0305 	sub.w	r3, lr, r5
 8003914:	6123      	str	r3, [r4, #16]
 8003916:	f8cd 8000 	str.w	r8, [sp]
 800391a:	463b      	mov	r3, r7
 800391c:	aa03      	add	r2, sp, #12
 800391e:	4621      	mov	r1, r4
 8003920:	4630      	mov	r0, r6
 8003922:	f7ff feef 	bl	8003704 <_printf_common>
 8003926:	3001      	adds	r0, #1
 8003928:	d155      	bne.n	80039d6 <_printf_i+0x1e6>
 800392a:	f04f 30ff 	mov.w	r0, #4294967295
 800392e:	b005      	add	sp, #20
 8003930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003934:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003938:	493c      	ldr	r1, [pc, #240]	; (8003a2c <_printf_i+0x23c>)
 800393a:	6822      	ldr	r2, [r4, #0]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003942:	f100 0504 	add.w	r5, r0, #4
 8003946:	601d      	str	r5, [r3, #0]
 8003948:	d001      	beq.n	800394e <_printf_i+0x15e>
 800394a:	6803      	ldr	r3, [r0, #0]
 800394c:	e002      	b.n	8003954 <_printf_i+0x164>
 800394e:	0655      	lsls	r5, r2, #25
 8003950:	d5fb      	bpl.n	800394a <_printf_i+0x15a>
 8003952:	8803      	ldrh	r3, [r0, #0]
 8003954:	07d0      	lsls	r0, r2, #31
 8003956:	bf44      	itt	mi
 8003958:	f042 0220 	orrmi.w	r2, r2, #32
 800395c:	6022      	strmi	r2, [r4, #0]
 800395e:	b91b      	cbnz	r3, 8003968 <_printf_i+0x178>
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	f022 0220 	bic.w	r2, r2, #32
 8003966:	6022      	str	r2, [r4, #0]
 8003968:	2210      	movs	r2, #16
 800396a:	e7b1      	b.n	80038d0 <_printf_i+0xe0>
 800396c:	4675      	mov	r5, lr
 800396e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003972:	fb02 3310 	mls	r3, r2, r0, r3
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800397c:	4603      	mov	r3, r0
 800397e:	2800      	cmp	r0, #0
 8003980:	d1f5      	bne.n	800396e <_printf_i+0x17e>
 8003982:	e7b7      	b.n	80038f4 <_printf_i+0x104>
 8003984:	6808      	ldr	r0, [r1, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	6949      	ldr	r1, [r1, #20]
 800398a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800398e:	d004      	beq.n	800399a <_printf_i+0x1aa>
 8003990:	1d10      	adds	r0, r2, #4
 8003992:	6018      	str	r0, [r3, #0]
 8003994:	6813      	ldr	r3, [r2, #0]
 8003996:	6019      	str	r1, [r3, #0]
 8003998:	e007      	b.n	80039aa <_printf_i+0x1ba>
 800399a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800399e:	f102 0004 	add.w	r0, r2, #4
 80039a2:	6018      	str	r0, [r3, #0]
 80039a4:	6813      	ldr	r3, [r2, #0]
 80039a6:	d0f6      	beq.n	8003996 <_printf_i+0x1a6>
 80039a8:	8019      	strh	r1, [r3, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	6123      	str	r3, [r4, #16]
 80039ae:	4675      	mov	r5, lr
 80039b0:	e7b1      	b.n	8003916 <_printf_i+0x126>
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	1d11      	adds	r1, r2, #4
 80039b6:	6019      	str	r1, [r3, #0]
 80039b8:	6815      	ldr	r5, [r2, #0]
 80039ba:	6862      	ldr	r2, [r4, #4]
 80039bc:	2100      	movs	r1, #0
 80039be:	4628      	mov	r0, r5
 80039c0:	f7fc fc3e 	bl	8000240 <memchr>
 80039c4:	b108      	cbz	r0, 80039ca <_printf_i+0x1da>
 80039c6:	1b40      	subs	r0, r0, r5
 80039c8:	6060      	str	r0, [r4, #4]
 80039ca:	6863      	ldr	r3, [r4, #4]
 80039cc:	6123      	str	r3, [r4, #16]
 80039ce:	2300      	movs	r3, #0
 80039d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d4:	e79f      	b.n	8003916 <_printf_i+0x126>
 80039d6:	6923      	ldr	r3, [r4, #16]
 80039d8:	462a      	mov	r2, r5
 80039da:	4639      	mov	r1, r7
 80039dc:	4630      	mov	r0, r6
 80039de:	47c0      	blx	r8
 80039e0:	3001      	adds	r0, #1
 80039e2:	d0a2      	beq.n	800392a <_printf_i+0x13a>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	079b      	lsls	r3, r3, #30
 80039e8:	d507      	bpl.n	80039fa <_printf_i+0x20a>
 80039ea:	2500      	movs	r5, #0
 80039ec:	f104 0919 	add.w	r9, r4, #25
 80039f0:	68e3      	ldr	r3, [r4, #12]
 80039f2:	9a03      	ldr	r2, [sp, #12]
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	429d      	cmp	r5, r3
 80039f8:	db05      	blt.n	8003a06 <_printf_i+0x216>
 80039fa:	68e0      	ldr	r0, [r4, #12]
 80039fc:	9b03      	ldr	r3, [sp, #12]
 80039fe:	4298      	cmp	r0, r3
 8003a00:	bfb8      	it	lt
 8003a02:	4618      	movlt	r0, r3
 8003a04:	e793      	b.n	800392e <_printf_i+0x13e>
 8003a06:	2301      	movs	r3, #1
 8003a08:	464a      	mov	r2, r9
 8003a0a:	4639      	mov	r1, r7
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	47c0      	blx	r8
 8003a10:	3001      	adds	r0, #1
 8003a12:	d08a      	beq.n	800392a <_printf_i+0x13a>
 8003a14:	3501      	adds	r5, #1
 8003a16:	e7eb      	b.n	80039f0 <_printf_i+0x200>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1a7      	bne.n	800396c <_printf_i+0x17c>
 8003a1c:	780b      	ldrb	r3, [r1, #0]
 8003a1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a26:	e765      	b.n	80038f4 <_printf_i+0x104>
 8003a28:	08003cee 	.word	0x08003cee
 8003a2c:	08003cdd 	.word	0x08003cdd

08003a30 <memcpy>:
 8003a30:	b510      	push	{r4, lr}
 8003a32:	1e43      	subs	r3, r0, #1
 8003a34:	440a      	add	r2, r1
 8003a36:	4291      	cmp	r1, r2
 8003a38:	d100      	bne.n	8003a3c <memcpy+0xc>
 8003a3a:	bd10      	pop	{r4, pc}
 8003a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a44:	e7f7      	b.n	8003a36 <memcpy+0x6>

08003a46 <memmove>:
 8003a46:	4288      	cmp	r0, r1
 8003a48:	b510      	push	{r4, lr}
 8003a4a:	eb01 0302 	add.w	r3, r1, r2
 8003a4e:	d803      	bhi.n	8003a58 <memmove+0x12>
 8003a50:	1e42      	subs	r2, r0, #1
 8003a52:	4299      	cmp	r1, r3
 8003a54:	d10c      	bne.n	8003a70 <memmove+0x2a>
 8003a56:	bd10      	pop	{r4, pc}
 8003a58:	4298      	cmp	r0, r3
 8003a5a:	d2f9      	bcs.n	8003a50 <memmove+0xa>
 8003a5c:	1881      	adds	r1, r0, r2
 8003a5e:	1ad2      	subs	r2, r2, r3
 8003a60:	42d3      	cmn	r3, r2
 8003a62:	d100      	bne.n	8003a66 <memmove+0x20>
 8003a64:	bd10      	pop	{r4, pc}
 8003a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003a6e:	e7f7      	b.n	8003a60 <memmove+0x1a>
 8003a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a74:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003a78:	e7eb      	b.n	8003a52 <memmove+0xc>
	...

08003a7c <_free_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4605      	mov	r5, r0
 8003a80:	2900      	cmp	r1, #0
 8003a82:	d045      	beq.n	8003b10 <_free_r+0x94>
 8003a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a88:	1f0c      	subs	r4, r1, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bfb8      	it	lt
 8003a8e:	18e4      	addlt	r4, r4, r3
 8003a90:	f000 f8d6 	bl	8003c40 <__malloc_lock>
 8003a94:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <_free_r+0x98>)
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	4610      	mov	r0, r2
 8003a9a:	b933      	cbnz	r3, 8003aaa <_free_r+0x2e>
 8003a9c:	6063      	str	r3, [r4, #4]
 8003a9e:	6014      	str	r4, [r2, #0]
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aa6:	f000 b8cc 	b.w	8003c42 <__malloc_unlock>
 8003aaa:	42a3      	cmp	r3, r4
 8003aac:	d90c      	bls.n	8003ac8 <_free_r+0x4c>
 8003aae:	6821      	ldr	r1, [r4, #0]
 8003ab0:	1862      	adds	r2, r4, r1
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	bf04      	itt	eq
 8003ab6:	681a      	ldreq	r2, [r3, #0]
 8003ab8:	685b      	ldreq	r3, [r3, #4]
 8003aba:	6063      	str	r3, [r4, #4]
 8003abc:	bf04      	itt	eq
 8003abe:	1852      	addeq	r2, r2, r1
 8003ac0:	6022      	streq	r2, [r4, #0]
 8003ac2:	6004      	str	r4, [r0, #0]
 8003ac4:	e7ec      	b.n	8003aa0 <_free_r+0x24>
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	b10a      	cbz	r2, 8003ad0 <_free_r+0x54>
 8003acc:	42a2      	cmp	r2, r4
 8003ace:	d9fa      	bls.n	8003ac6 <_free_r+0x4a>
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	1858      	adds	r0, r3, r1
 8003ad4:	42a0      	cmp	r0, r4
 8003ad6:	d10b      	bne.n	8003af0 <_free_r+0x74>
 8003ad8:	6820      	ldr	r0, [r4, #0]
 8003ada:	4401      	add	r1, r0
 8003adc:	1858      	adds	r0, r3, r1
 8003ade:	4282      	cmp	r2, r0
 8003ae0:	6019      	str	r1, [r3, #0]
 8003ae2:	d1dd      	bne.n	8003aa0 <_free_r+0x24>
 8003ae4:	6810      	ldr	r0, [r2, #0]
 8003ae6:	6852      	ldr	r2, [r2, #4]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	4401      	add	r1, r0
 8003aec:	6019      	str	r1, [r3, #0]
 8003aee:	e7d7      	b.n	8003aa0 <_free_r+0x24>
 8003af0:	d902      	bls.n	8003af8 <_free_r+0x7c>
 8003af2:	230c      	movs	r3, #12
 8003af4:	602b      	str	r3, [r5, #0]
 8003af6:	e7d3      	b.n	8003aa0 <_free_r+0x24>
 8003af8:	6820      	ldr	r0, [r4, #0]
 8003afa:	1821      	adds	r1, r4, r0
 8003afc:	428a      	cmp	r2, r1
 8003afe:	bf04      	itt	eq
 8003b00:	6811      	ldreq	r1, [r2, #0]
 8003b02:	6852      	ldreq	r2, [r2, #4]
 8003b04:	6062      	str	r2, [r4, #4]
 8003b06:	bf04      	itt	eq
 8003b08:	1809      	addeq	r1, r1, r0
 8003b0a:	6021      	streq	r1, [r4, #0]
 8003b0c:	605c      	str	r4, [r3, #4]
 8003b0e:	e7c7      	b.n	8003aa0 <_free_r+0x24>
 8003b10:	bd38      	pop	{r3, r4, r5, pc}
 8003b12:	bf00      	nop
 8003b14:	2000008c 	.word	0x2000008c

08003b18 <_malloc_r>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	1ccd      	adds	r5, r1, #3
 8003b1c:	f025 0503 	bic.w	r5, r5, #3
 8003b20:	3508      	adds	r5, #8
 8003b22:	2d0c      	cmp	r5, #12
 8003b24:	bf38      	it	cc
 8003b26:	250c      	movcc	r5, #12
 8003b28:	2d00      	cmp	r5, #0
 8003b2a:	4606      	mov	r6, r0
 8003b2c:	db01      	blt.n	8003b32 <_malloc_r+0x1a>
 8003b2e:	42a9      	cmp	r1, r5
 8003b30:	d903      	bls.n	8003b3a <_malloc_r+0x22>
 8003b32:	230c      	movs	r3, #12
 8003b34:	6033      	str	r3, [r6, #0]
 8003b36:	2000      	movs	r0, #0
 8003b38:	bd70      	pop	{r4, r5, r6, pc}
 8003b3a:	f000 f881 	bl	8003c40 <__malloc_lock>
 8003b3e:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <_malloc_r+0xb4>)
 8003b40:	6814      	ldr	r4, [r2, #0]
 8003b42:	4621      	mov	r1, r4
 8003b44:	b991      	cbnz	r1, 8003b6c <_malloc_r+0x54>
 8003b46:	4c22      	ldr	r4, [pc, #136]	; (8003bd0 <_malloc_r+0xb8>)
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	b91b      	cbnz	r3, 8003b54 <_malloc_r+0x3c>
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f000 f867 	bl	8003c20 <_sbrk_r>
 8003b52:	6020      	str	r0, [r4, #0]
 8003b54:	4629      	mov	r1, r5
 8003b56:	4630      	mov	r0, r6
 8003b58:	f000 f862 	bl	8003c20 <_sbrk_r>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d126      	bne.n	8003bae <_malloc_r+0x96>
 8003b60:	230c      	movs	r3, #12
 8003b62:	6033      	str	r3, [r6, #0]
 8003b64:	4630      	mov	r0, r6
 8003b66:	f000 f86c 	bl	8003c42 <__malloc_unlock>
 8003b6a:	e7e4      	b.n	8003b36 <_malloc_r+0x1e>
 8003b6c:	680b      	ldr	r3, [r1, #0]
 8003b6e:	1b5b      	subs	r3, r3, r5
 8003b70:	d41a      	bmi.n	8003ba8 <_malloc_r+0x90>
 8003b72:	2b0b      	cmp	r3, #11
 8003b74:	d90f      	bls.n	8003b96 <_malloc_r+0x7e>
 8003b76:	600b      	str	r3, [r1, #0]
 8003b78:	50cd      	str	r5, [r1, r3]
 8003b7a:	18cc      	adds	r4, r1, r3
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	f000 f860 	bl	8003c42 <__malloc_unlock>
 8003b82:	f104 000b 	add.w	r0, r4, #11
 8003b86:	1d23      	adds	r3, r4, #4
 8003b88:	f020 0007 	bic.w	r0, r0, #7
 8003b8c:	1ac3      	subs	r3, r0, r3
 8003b8e:	d01b      	beq.n	8003bc8 <_malloc_r+0xb0>
 8003b90:	425a      	negs	r2, r3
 8003b92:	50e2      	str	r2, [r4, r3]
 8003b94:	bd70      	pop	{r4, r5, r6, pc}
 8003b96:	428c      	cmp	r4, r1
 8003b98:	bf0d      	iteet	eq
 8003b9a:	6863      	ldreq	r3, [r4, #4]
 8003b9c:	684b      	ldrne	r3, [r1, #4]
 8003b9e:	6063      	strne	r3, [r4, #4]
 8003ba0:	6013      	streq	r3, [r2, #0]
 8003ba2:	bf18      	it	ne
 8003ba4:	460c      	movne	r4, r1
 8003ba6:	e7e9      	b.n	8003b7c <_malloc_r+0x64>
 8003ba8:	460c      	mov	r4, r1
 8003baa:	6849      	ldr	r1, [r1, #4]
 8003bac:	e7ca      	b.n	8003b44 <_malloc_r+0x2c>
 8003bae:	1cc4      	adds	r4, r0, #3
 8003bb0:	f024 0403 	bic.w	r4, r4, #3
 8003bb4:	42a0      	cmp	r0, r4
 8003bb6:	d005      	beq.n	8003bc4 <_malloc_r+0xac>
 8003bb8:	1a21      	subs	r1, r4, r0
 8003bba:	4630      	mov	r0, r6
 8003bbc:	f000 f830 	bl	8003c20 <_sbrk_r>
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d0cd      	beq.n	8003b60 <_malloc_r+0x48>
 8003bc4:	6025      	str	r5, [r4, #0]
 8003bc6:	e7d9      	b.n	8003b7c <_malloc_r+0x64>
 8003bc8:	bd70      	pop	{r4, r5, r6, pc}
 8003bca:	bf00      	nop
 8003bcc:	2000008c 	.word	0x2000008c
 8003bd0:	20000090 	.word	0x20000090

08003bd4 <_realloc_r>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	4607      	mov	r7, r0
 8003bd8:	4614      	mov	r4, r2
 8003bda:	460e      	mov	r6, r1
 8003bdc:	b921      	cbnz	r1, 8003be8 <_realloc_r+0x14>
 8003bde:	4611      	mov	r1, r2
 8003be0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003be4:	f7ff bf98 	b.w	8003b18 <_malloc_r>
 8003be8:	b922      	cbnz	r2, 8003bf4 <_realloc_r+0x20>
 8003bea:	f7ff ff47 	bl	8003a7c <_free_r>
 8003bee:	4625      	mov	r5, r4
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf4:	f000 f826 	bl	8003c44 <_malloc_usable_size_r>
 8003bf8:	4284      	cmp	r4, r0
 8003bfa:	d90f      	bls.n	8003c1c <_realloc_r+0x48>
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	4638      	mov	r0, r7
 8003c00:	f7ff ff8a 	bl	8003b18 <_malloc_r>
 8003c04:	4605      	mov	r5, r0
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d0f2      	beq.n	8003bf0 <_realloc_r+0x1c>
 8003c0a:	4631      	mov	r1, r6
 8003c0c:	4622      	mov	r2, r4
 8003c0e:	f7ff ff0f 	bl	8003a30 <memcpy>
 8003c12:	4631      	mov	r1, r6
 8003c14:	4638      	mov	r0, r7
 8003c16:	f7ff ff31 	bl	8003a7c <_free_r>
 8003c1a:	e7e9      	b.n	8003bf0 <_realloc_r+0x1c>
 8003c1c:	4635      	mov	r5, r6
 8003c1e:	e7e7      	b.n	8003bf0 <_realloc_r+0x1c>

08003c20 <_sbrk_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4c06      	ldr	r4, [pc, #24]	; (8003c3c <_sbrk_r+0x1c>)
 8003c24:	2300      	movs	r3, #0
 8003c26:	4605      	mov	r5, r0
 8003c28:	4608      	mov	r0, r1
 8003c2a:	6023      	str	r3, [r4, #0]
 8003c2c:	f000 f814 	bl	8003c58 <_sbrk>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d102      	bne.n	8003c3a <_sbrk_r+0x1a>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	b103      	cbz	r3, 8003c3a <_sbrk_r+0x1a>
 8003c38:	602b      	str	r3, [r5, #0]
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	200001d0 	.word	0x200001d0

08003c40 <__malloc_lock>:
 8003c40:	4770      	bx	lr

08003c42 <__malloc_unlock>:
 8003c42:	4770      	bx	lr

08003c44 <_malloc_usable_size_r>:
 8003c44:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	f1a0 0004 	sub.w	r0, r0, #4
 8003c4e:	bfbc      	itt	lt
 8003c50:	580b      	ldrlt	r3, [r1, r0]
 8003c52:	18c0      	addlt	r0, r0, r3
 8003c54:	4770      	bx	lr
	...

08003c58 <_sbrk>:
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <_sbrk+0x14>)
 8003c5a:	6819      	ldr	r1, [r3, #0]
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	b909      	cbnz	r1, 8003c64 <_sbrk+0xc>
 8003c60:	4903      	ldr	r1, [pc, #12]	; (8003c70 <_sbrk+0x18>)
 8003c62:	6019      	str	r1, [r3, #0]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	4402      	add	r2, r0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	4770      	bx	lr
 8003c6c:	20000094 	.word	0x20000094
 8003c70:	200001d4 	.word	0x200001d4

08003c74 <_init>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	bf00      	nop
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr

08003c80 <_fini>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	bf00      	nop
 8003c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c86:	bc08      	pop	{r3}
 8003c88:	469e      	mov	lr, r3
 8003c8a:	4770      	bx	lr
